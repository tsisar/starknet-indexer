// Code generated by generator-mapper; DO NOT EDIT.

package registry

import (
	"context"
	"encoding/json"
	"fmt"
	"github.com/Tsisar/extended-log-go/log"
	"github.com/Tsisar/starknet-indexer/generated/ent"
	"github.com/Tsisar/starknet-indexer/internal/storage/model"
)

type EventMapper func(ctx context.Context, client *ent.Client, event model.Event) error

type EventHandler[T any] func(ctx context.Context, client *ent.Client, ev T, transaction model.Transaction) error

var RegistryMap = map[string]map[string]EventMapper{
{{- range .Packages }}
	"{{ . }}": {{ toCamelCase . }}Registry,
{{- end }}
}

func makeMapper[T any](handler EventHandler[T]) EventMapper {
	return func(ctx context.Context, client *ent.Client, event model.Event) error {
		log.Debugf("[mapper] Mapping event: %s", event.EventName)

		var ev T
		if err := json.Unmarshal(event.RawData, &ev); err != nil {
			return fmt.Errorf("[mapping] failed to decode %T: %v", ev, err)
		}

		if handler != nil {
			if err := handler(ctx, client, ev, event.Transaction); err != nil {
				return fmt.Errorf("[mapping] failed to handle %T: %v", ev, err)
			}
		}

		return nil
	}
}