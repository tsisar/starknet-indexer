// Code generated by generator-core; DO NOT EDIT.
package nodes_registry

import (
	"fmt"
	"github.com/NethermindEth/juno/core/felt"
	"github.com/tsisar/starknet-indexer/internal/types"
)

func DecodeLogDeposit(keys, data []*felt.Felt) (interface{}, error) {
	if len(keys) != 3 {
		return nil, fmt.Errorf("expected 3 keys, got %d", len(keys))
	}

	return LogDeposit{
		Key: LogDepositKey{
			Node: types.NewAddress(keys[0]),
			DepositAmount: types.U256{
				Low:  keys[1].String(),
				High: keys[2].String(),
			},
		},
	}, nil
}

func DecodeLogNodeActivated(keys, data []*felt.Felt) (interface{}, error) {
	if len(keys) != 1 {
		return nil, fmt.Errorf("expected 1 keys, got %d", len(keys))
	}

	return LogNodeActivated{
		Key: LogNodeActivatedKey{
			Node: types.NewAddress(keys[0]),
		},
	}, nil
}

func DecodeLogNodeDeactivated(keys, data []*felt.Felt) (interface{}, error) {
	if len(keys) != 1 {
		return nil, fmt.Errorf("expected 1 keys, got %d", len(keys))
	}

	return LogNodeDeactivated{
		Key: LogNodeDeactivatedKey{
			Node: types.NewAddress(keys[0]),
		},
	}, nil
}

func DecodeLogWithdraw(keys, data []*felt.Felt) (interface{}, error) {
	if len(keys) != 3 {
		return nil, fmt.Errorf("expected 3 keys, got %d", len(keys))
	}

	return LogWithdraw{
		Key: LogWithdrawKey{
			Node: types.NewAddress(keys[0]),
			Amount: types.U256{
				Low:  keys[1].String(),
				High: keys[2].String(),
			},
		},
	}, nil
}

func DecodeLogNodeAddedToAggregator(keys, data []*felt.Felt) (interface{}, error) {
	if len(keys) != 2 {
		return nil, fmt.Errorf("expected 2 keys, got %d", len(keys))
	}

	return LogNodeAddedToAggregator{
		Key: LogNodeAddedToAggregatorKey{
			Aggregator: types.NewAddress(keys[0]),
			Node:       types.NewAddress(keys[1]),
		},
	}, nil
}

func DecodeLogNodeRemovedFromAggregator(keys, data []*felt.Felt) (interface{}, error) {
	if len(keys) != 2 {
		return nil, fmt.Errorf("expected 2 keys, got %d", len(keys))
	}

	return LogNodeRemovedFromAggregator{
		Key: LogNodeRemovedFromAggregatorKey{
			Aggregator: types.NewAddress(keys[0]),
			Node:       types.NewAddress(keys[1]),
		},
	}, nil
}

func DecodeLogDepositConfiscated(keys, data []*felt.Felt) (interface{}, error) {
	if len(keys) != 3 {
		return nil, fmt.Errorf("expected 3 keys, got %d", len(keys))
	}

	return LogDepositConfiscated{
		Key: LogDepositConfiscatedKey{
			Node: types.NewAddress(keys[0]),
			Amount: types.U256{
				Low:  keys[1].String(),
				High: keys[2].String(),
			},
		},
	}, nil
}

func DecodeLogDepositRequiredChanged(keys, data []*felt.Felt) (interface{}, error) {
	if len(keys) != 2 {
		return nil, fmt.Errorf("expected 2 keys, got %d", len(keys))
	}

	return LogDepositRequiredChanged{
		Key: LogDepositRequiredChangedKey{
			DepositRequired: types.U256{
				Low:  keys[0].String(),
				High: keys[1].String(),
			},
		},
	}, nil
}

var Decoders = map[string]types.EventDecoderWithMeta{
	"0x31b097cc1e52b3ccdf473dbb16a0fb02676cb54d6e821d1fb8e92a06181676f": {Func: DecodeLogDeposit, Name: "oracle_network::core::nodes_registry::NodesRegistry::LogDeposit"},
	"0x36a6a7645390054dd19ca8cb468b7c4d85c1876905c814a4c635467444ecaa1": {Func: DecodeLogNodeActivated, Name: "oracle_network::core::nodes_registry::NodesRegistry::LogNodeActivated"},
	"0x18b98b922858c71b4cf114f768dea462ca2601318a03e6ea3f097e2fb946253": {Func: DecodeLogNodeDeactivated, Name: "oracle_network::core::nodes_registry::NodesRegistry::LogNodeDeactivated"},
	"0x280d24f9e38b9cc608a5a448a83ae6e1ffff10aef6464a56ca067a5470b8f35": {Func: DecodeLogWithdraw, Name: "oracle_network::core::nodes_registry::NodesRegistry::LogWithdraw"},
	"0x1e1797dfc711e3f5d2ccc818438128299865e8897a13fbfe2b2dba683e2ca3e": {Func: DecodeLogNodeAddedToAggregator, Name: "oracle_network::core::nodes_registry::NodesRegistry::LogNodeAddedToAggregator"},
	"0xe808eab250714ee10f7b6a9ffe771c5f18725069834363c2467f443cbc9df":   {Func: DecodeLogNodeRemovedFromAggregator, Name: "oracle_network::core::nodes_registry::NodesRegistry::LogNodeRemovedFromAggregator"},
	"0x38e9b76e6179edbf486af1179334244c071e8f366b2196aeba66fd6022d0e76": {Func: DecodeLogDepositConfiscated, Name: "oracle_network::core::nodes_registry::NodesRegistry::LogDepositConfiscated"},
	"0x1fd0d43911afc1d2527910c08cc716eebb4ad6fbd41359f0f39e0da2e09df6c": {Func: DecodeLogDepositRequiredChanged, Name: "oracle_network::core::nodes_registry::NodesRegistry::LogDepositRequiredChanged"},
}
