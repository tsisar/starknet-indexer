// Code generated by generator-core; DO NOT EDIT.
package treasury

import (
	"fmt"
	"github.com/NethermindEth/juno/core/felt"
	"github.com/Tsisar/starknet-indexer/internal/types"
)

func DecodeLogRewardSet(keys, data []*felt.Felt) (interface{}, error) {
	if len(keys) != 3 {
		return nil, fmt.Errorf("expected 3 keys, got %d", len(keys))
	}

	return LogRewardSet{
		Key: LogRewardSetKey{
			Aggregator: types.NewAddress(keys[0]),
			Amount: types.U256{
				Low:  keys[1].String(),
				High: keys[2].String(),
			},
		},
	}, nil
}

func DecodeLogRefunded(keys, data []*felt.Felt) (interface{}, error) {
	if len(keys) != 3 {
		return nil, fmt.Errorf("expected 3 keys, got %d", len(keys))
	}

	return LogRefunded{
		Key: LogRefundedKey{
			To: types.NewAddress(keys[0]),
			Amount: types.U256{
				Low:  keys[1].String(),
				High: keys[2].String(),
			},
		},
	}, nil
}

func DecodeLogRewardsDistributed(keys, data []*felt.Felt) (interface{}, error) {
	if len(keys) != 3 {
		return nil, fmt.Errorf("expected 3 keys, got %d", len(keys))
	}
	if len(data) != 1 {
		return nil, fmt.Errorf("expected 1 data fields, got %d", len(data))
	}

	return LogRewardsDistributed{
		Key: LogRewardsDistributedKey{
			Aggregator: types.NewAddress(keys[0]),
			RewardPerAnswer: types.U256{
				Low:  keys[1].String(),
				High: keys[2].String(),
			},
		},
		Data: LogRewardsDistributedData{
			Nodes: data[0].String(),
		},
	}, nil
}

func DecodeLogFeeCollected(keys, data []*felt.Felt) (interface{}, error) {
	if len(keys) != 2 {
		return nil, fmt.Errorf("expected 2 keys, got %d", len(keys))
	}

	return LogFeeCollected{
		Key: LogFeeCollectedKey{
			Amount: types.U256{
				Low:  keys[0].String(),
				High: keys[1].String(),
			},
		},
	}, nil
}

func DecodeLogFeeWithdrawn(keys, data []*felt.Felt) (interface{}, error) {
	if len(keys) != 3 {
		return nil, fmt.Errorf("expected 3 keys, got %d", len(keys))
	}

	return LogFeeWithdrawn{
		Key: LogFeeWithdrawnKey{
			Recipient: types.NewAddress(keys[0]),
			Amount: types.U256{
				Low:  keys[1].String(),
				High: keys[2].String(),
			},
		},
	}, nil
}

func DecodeLogRewardWithdrawn(keys, data []*felt.Felt) (interface{}, error) {
	if len(keys) != 3 {
		return nil, fmt.Errorf("expected 3 keys, got %d", len(keys))
	}

	return LogRewardWithdrawn{
		Key: LogRewardWithdrawnKey{
			Recipient: types.NewAddress(keys[0]),
			Amount: types.U256{
				Low:  keys[1].String(),
				High: keys[2].String(),
			},
		},
	}, nil
}

func DecodeLogSurplusWithdrawn(keys, data []*felt.Felt) (interface{}, error) {
	if len(keys) != 3 {
		return nil, fmt.Errorf("expected 3 keys, got %d", len(keys))
	}

	return LogSurplusWithdrawn{
		Key: LogSurplusWithdrawnKey{
			Recipient: types.NewAddress(keys[0]),
			Amount: types.U256{
				Low:  keys[1].String(),
				High: keys[2].String(),
			},
		},
	}, nil
}

var Decoders = map[string]types.EventDecoderWithMeta{
	"0x2795cac2cbfb09acd77522524de5b2cb77c0594316458a05cd6a8d78ebcd6d2": {Func: DecodeLogRewardSet, Name: "oracle_network::core::treasury::Treasury::LogRewardSet"},
	"0x3315986548750ec7cb7144d6df91c179d00737eaa81c1d458a40168c611ce64": {Func: DecodeLogRefunded, Name: "oracle_network::core::treasury::Treasury::LogRefunded"},
	"0xb3eec8f7e840cf666395bbf6aeaeff9010644e2528342e902896178905e90f":  {Func: DecodeLogRewardsDistributed, Name: "oracle_network::core::treasury::Treasury::LogRewardsDistributed"},
	"0x11a711da57ee426b4ff5d6eacb0e8b83a04c69a9f14c5bad9883875de391a33": {Func: DecodeLogFeeCollected, Name: "oracle_network::core::treasury::Treasury::LogFeeCollected"},
	"0x30c64da7b9a373fc39334bc74b11f6f85e55e9fb8f1541c718ffb42495fd09b": {Func: DecodeLogFeeWithdrawn, Name: "oracle_network::core::treasury::Treasury::LogFeeWithdrawn"},
	"0x3c02f653bc9316427434d1f7e29fbf2b99c65c40529f004e0a277ee42b46ee":  {Func: DecodeLogRewardWithdrawn, Name: "oracle_network::core::treasury::Treasury::LogRewardWithdrawn"},
	"0xa56bf956112f416fd28b36b4abc19821dcf4948dfae615fcd9d31ae1658348":  {Func: DecodeLogSurplusWithdrawn, Name: "oracle_network::core::treasury::Treasury::LogSurplusWithdrawn"},
}
