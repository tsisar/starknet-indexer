// Code generated by generator-core; DO NOT EDIT.
package show_stopper

import (
	"fmt"
	"github.com/NethermindEth/juno/core/felt"
	"github.com/Tsisar/starknet-indexer/internal/types"
)

func DecodeLogCage(keys, data []*felt.Felt) (interface{}, error) {
	if len(data) != 2 {
		return nil, fmt.Errorf("expected 2 data fields, got %d", len(data))
	}

	return LogCage{
		Data: LogCageData{
			CageCoolDown: types.U256{
				Low:  data[0].String(),
				High: data[1].String(),
			},
		},
	}, nil
}

func DecodeLogCageCollateralPool(keys, data []*felt.Felt) (interface{}, error) {
	if len(keys) != 1 {
		return nil, fmt.Errorf("expected 1 keys, got %d", len(keys))
	}

	return LogCageCollateralPool{
		Key: LogCageCollateralPoolKey{
			CollateralPoolId: types.NewTextFelt(keys[0]),
		},
	}, nil
}

func DecodeLogAccumulateBadDebt(keys, data []*felt.Felt) (interface{}, error) {
	if len(keys) != 2 {
		return nil, fmt.Errorf("expected 2 keys, got %d", len(keys))
	}
	if len(data) != 4 {
		return nil, fmt.Errorf("expected 4 data fields, got %d", len(data))
	}

	return LogAccumulateBadDebt{
		Key: LogAccumulateBadDebtKey{
			CollateralPoolId: types.NewTextFelt(keys[0]),
			PositionAddress:  types.NewAddress(keys[1]),
		},
		Data: LogAccumulateBadDebtData{
			Amount: types.U256{
				Low:  data[0].String(),
				High: data[1].String(),
			},
			DebtShare: types.U256{
				Low:  data[2].String(),
				High: data[3].String(),
			},
		},
	}, nil
}

func DecodeLogRedeemLockedCollateral(keys, data []*felt.Felt) (interface{}, error) {
	if len(keys) != 2 {
		return nil, fmt.Errorf("expected 2 keys, got %d", len(keys))
	}
	if len(data) != 2 {
		return nil, fmt.Errorf("expected 2 data fields, got %d", len(data))
	}

	return LogRedeemLockedCollateral{
		Key: LogRedeemLockedCollateralKey{
			CollateralPoolId: types.NewTextFelt(keys[0]),
			PositionAddress:  types.NewAddress(keys[1]),
		},
		Data: LogRedeemLockedCollateralData{
			Amount: types.U256{
				Low:  data[0].String(),
				High: data[1].String(),
			},
		},
	}, nil
}

func DecodeLogFinalizeDebt(keys, data []*felt.Felt) (interface{}, error) {

	return LogFinalizeDebt{}, nil
}

func DecodeLogFinalizeCashPrice(keys, data []*felt.Felt) (interface{}, error) {
	if len(keys) != 1 {
		return nil, fmt.Errorf("expected 1 keys, got %d", len(keys))
	}

	return LogFinalizeCashPrice{
		Key: LogFinalizeCashPriceKey{
			CollateralPoolId: types.NewTextFelt(keys[0]),
		},
	}, nil
}

func DecodeLogAccumulateStablecoin(keys, data []*felt.Felt) (interface{}, error) {
	if len(keys) != 1 {
		return nil, fmt.Errorf("expected 1 keys, got %d", len(keys))
	}
	if len(data) != 2 {
		return nil, fmt.Errorf("expected 2 data fields, got %d", len(data))
	}

	return LogAccumulateStablecoin{
		Key: LogAccumulateStablecoinKey{
			OwnerAddress: types.NewAddress(keys[0]),
		},
		Data: LogAccumulateStablecoinData{
			Amount: types.U256{
				Low:  data[0].String(),
				High: data[1].String(),
			},
		},
	}, nil
}

func DecodeLogRedeemStablecoin(keys, data []*felt.Felt) (interface{}, error) {
	if len(keys) != 2 {
		return nil, fmt.Errorf("expected 2 keys, got %d", len(keys))
	}
	if len(data) != 2 {
		return nil, fmt.Errorf("expected 2 data fields, got %d", len(data))
	}

	return LogRedeemStablecoin{
		Key: LogRedeemStablecoinKey{
			CollateralPoolId: types.NewTextFelt(keys[0]),
			OwnerAddress:     types.NewAddress(keys[1]),
		},
		Data: LogRedeemStablecoinData{
			Amount: types.U256{
				Low:  data[0].String(),
				High: data[1].String(),
			},
		},
	}, nil
}

func DecodeLogSetBookKeeper(keys, data []*felt.Felt) (interface{}, error) {
	if len(keys) != 1 {
		return nil, fmt.Errorf("expected 1 keys, got %d", len(keys))
	}
	if len(data) != 1 {
		return nil, fmt.Errorf("expected 1 data fields, got %d", len(data))
	}

	return LogSetBookKeeper{
		Key: LogSetBookKeeperKey{
			Caller: types.NewAddress(keys[0]),
		},
		Data: LogSetBookKeeperData{
			Data: types.NewAddress(data[0]),
		},
	}, nil
}

func DecodeLogSetLiquidationEngine(keys, data []*felt.Felt) (interface{}, error) {
	if len(keys) != 1 {
		return nil, fmt.Errorf("expected 1 keys, got %d", len(keys))
	}
	if len(data) != 1 {
		return nil, fmt.Errorf("expected 1 data fields, got %d", len(data))
	}

	return LogSetLiquidationEngine{
		Key: LogSetLiquidationEngineKey{
			Caller: types.NewAddress(keys[0]),
		},
		Data: LogSetLiquidationEngineData{
			Data: types.NewAddress(data[0]),
		},
	}, nil
}

func DecodeLogSetSystemDebtEngine(keys, data []*felt.Felt) (interface{}, error) {
	if len(keys) != 1 {
		return nil, fmt.Errorf("expected 1 keys, got %d", len(keys))
	}
	if len(data) != 1 {
		return nil, fmt.Errorf("expected 1 data fields, got %d", len(data))
	}

	return LogSetSystemDebtEngine{
		Key: LogSetSystemDebtEngineKey{
			Caller: types.NewAddress(keys[0]),
		},
		Data: LogSetSystemDebtEngineData{
			Data: types.NewAddress(data[0]),
		},
	}, nil
}

func DecodeLogSetPriceConsumer(keys, data []*felt.Felt) (interface{}, error) {
	if len(keys) != 1 {
		return nil, fmt.Errorf("expected 1 keys, got %d", len(keys))
	}
	if len(data) != 1 {
		return nil, fmt.Errorf("expected 1 data fields, got %d", len(data))
	}

	return LogSetPriceConsumer{
		Key: LogSetPriceConsumerKey{
			Caller: types.NewAddress(keys[0]),
		},
		Data: LogSetPriceConsumerData{
			Data: types.NewAddress(data[0]),
		},
	}, nil
}

func DecodeLogSetCageCoolDown(keys, data []*felt.Felt) (interface{}, error) {
	if len(keys) != 1 {
		return nil, fmt.Errorf("expected 1 keys, got %d", len(keys))
	}
	if len(data) != 2 {
		return nil, fmt.Errorf("expected 2 data fields, got %d", len(data))
	}

	return LogSetCageCoolDown{
		Key: LogSetCageCoolDownKey{
			Caller: types.NewAddress(keys[0]),
		},
		Data: LogSetCageCoolDownData{
			Data: types.U256{
				Low:  data[0].String(),
				High: data[1].String(),
			},
		},
	}, nil
}

var Decoders = map[string]types.EventDecoderWithMeta{
	"0x75ef26d8af3732b337ded7c33086749b36a2c1ec660f2de592fe60717edfd":   {Func: DecodeLogCage, Name: "stablecoin::core::show_stopper::ShowStopper::LogCage"},
	"0x245279524c28c802d9a89a6830989ccce2a3bd2a005419eebb50f1c6e5b370e": {Func: DecodeLogCageCollateralPool, Name: "stablecoin::core::show_stopper::ShowStopper::LogCageCollateralPool"},
	"0xca7d50371476b73dbdc0bd03aa45d3df4ef64d2a359a9345c3dd60bb437f6d":  {Func: DecodeLogAccumulateBadDebt, Name: "stablecoin::core::show_stopper::ShowStopper::LogAccumulateBadDebt"},
	"0xfb6f09b3b86a8d8061db83c9811adad72e3360cb15a5a1e287c3f4d83cd31e":  {Func: DecodeLogRedeemLockedCollateral, Name: "stablecoin::core::show_stopper::ShowStopper::LogRedeemLockedCollateral"},
	"0x1849a9fa2ad3b16002904beda04ed4780bbccada0a6b8c56390024c44fc83b":  {Func: DecodeLogFinalizeDebt, Name: "stablecoin::core::show_stopper::ShowStopper::LogFinalizeDebt"},
	"0x105c9f41c0757b1a41a1809fdf9e7eee7a22db90e9223b5b817f56a8f331335": {Func: DecodeLogFinalizeCashPrice, Name: "stablecoin::core::show_stopper::ShowStopper::LogFinalizeCashPrice"},
	"0x3d2c72bb6eaf7ee584423b412033e970f66c7d2b1b98fbadccfe9d99c01ac0d": {Func: DecodeLogAccumulateStablecoin, Name: "stablecoin::core::show_stopper::ShowStopper::LogAccumulateStablecoin"},
	"0xf570d8df12b1d52cf4d532c96b59f98fb3649f2b61cb583b6635c91e2fc2f1":  {Func: DecodeLogRedeemStablecoin, Name: "stablecoin::core::show_stopper::ShowStopper::LogRedeemStablecoin"},
	"0x1ff221b30a3b491affd2f37d096cf0e8d5565722b8ff03d4751f1c2f067083f": {Func: DecodeLogSetBookKeeper, Name: "stablecoin::core::show_stopper::ShowStopper::LogSetBookKeeper"},
	"0x3b69c9ebabba215c016822a3ee58d67c0dd1d61aeb9b63e290f6e8ec15cf628": {Func: DecodeLogSetLiquidationEngine, Name: "stablecoin::core::show_stopper::ShowStopper::LogSetLiquidationEngine"},
	"0x2809f037675f0a9842a56717025c7b3c831a8f8e02b18680b181e9e216f7df2": {Func: DecodeLogSetSystemDebtEngine, Name: "stablecoin::core::show_stopper::ShowStopper::LogSetSystemDebtEngine"},
	"0x341b0e095b76c7658f6ffc93402f63c3d62c11c54ac3c29bc6d8acce3b62aef": {Func: DecodeLogSetPriceConsumer, Name: "stablecoin::core::show_stopper::ShowStopper::LogSetPriceConsumer"},
	"0x126e4fd23b02b8ed7acfc342d2e0d3f8c2315ca393ddcee5daa456a262bd21":  {Func: DecodeLogSetCageCoolDown, Name: "stablecoin::core::show_stopper::ShowStopper::LogSetCageCoolDown"},
}
