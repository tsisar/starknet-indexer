// Code generated by generator-core; DO NOT EDIT.
package liquidation_strategy

import (
	"fmt"
	"github.com/NethermindEth/juno/core/felt"
	"github.com/tsisar/starknet-indexer/internal/types"
)

func DecodePaused(keys, data []*felt.Felt) (interface{}, error) {
	if len(data) != 1 {
		return nil, fmt.Errorf("expected 1 data fields, got %d", len(data))
	}

	return Paused{
		Data: PausedData{
			Account: types.NewAddress(data[0]),
		},
	}, nil
}

func DecodeUnpaused(keys, data []*felt.Felt) (interface{}, error) {
	if len(data) != 1 {
		return nil, fmt.Errorf("expected 1 data fields, got %d", len(data))
	}

	return Unpaused{
		Data: UnpausedData{
			Account: types.NewAddress(data[0]),
		},
	}, nil
}

func DecodeLogFixedSpreadLiquidate(keys, data []*felt.Felt) (interface{}, error) {
	if len(keys) != 3 {
		return nil, fmt.Errorf("expected 3 keys, got %d", len(keys))
	}
	if len(data) != 17 {
		return nil, fmt.Errorf("expected 17 data fields, got %d", len(data))
	}

	return LogFixedSpreadLiquidate{
		Key: LogFixedSpreadLiquidateKey{
			CollateralPoolId:  types.NewTextFelt(keys[0]),
			PositionAddress:   types.NewAddress(keys[1]),
			LiquidatorAddress: types.NewAddress(keys[2]),
		},
		Data: LogFixedSpreadLiquidateData{
			PositionDebtShare: types.U256{
				Low:  data[0].String(),
				High: data[1].String(),
			},
			PositionCollateralAmount: types.U256{
				Low:  data[2].String(),
				High: data[3].String(),
			},
			DebtShareToBeLiquidated: types.U256{
				Low:  data[4].String(),
				High: data[5].String(),
			},
			MaxDebtShareToBeLiquidated: types.U256{
				Low:  data[6].String(),
				High: data[7].String(),
			},
			CollateralRecipient: types.NewAddress(data[8]),
			ActualDebtShareToBeLiquidated: types.U256{
				Low:  data[9].String(),
				High: data[10].String(),
			},
			ActualDebtValueToBeLiquidated: types.U256{
				Low:  data[11].String(),
				High: data[12].String(),
			},
			CollateralAmountToBeLiquidated: types.U256{
				Low:  data[13].String(),
				High: data[14].String(),
			},
			TreasuryFees: types.U256{
				Low:  data[15].String(),
				High: data[16].String(),
			},
		},
	}, nil
}

func DecodeLogSetFlashLendingEnabled(keys, data []*felt.Felt) (interface{}, error) {
	if len(keys) != 1 {
		return nil, fmt.Errorf("expected 1 keys, got %d", len(keys))
	}
	if len(data) != 1 {
		return nil, fmt.Errorf("expected 1 data fields, got %d", len(data))
	}

	return LogSetFlashLendingEnabled{
		Key: LogSetFlashLendingEnabledKey{
			Caller: types.NewAddress(keys[0]),
		},
		Data: LogSetFlashLendingEnabledData{
			FlashLendingEnabled: data[0].Cmp(&felt.Zero) != 0,
		},
	}, nil
}

func DecodeLogSetBookKeeper(keys, data []*felt.Felt) (interface{}, error) {
	if len(data) != 1 {
		return nil, fmt.Errorf("expected 1 data fields, got %d", len(data))
	}

	return LogSetBookKeeper{
		Data: LogSetBookKeeperData{
			NewAddress: types.NewAddress(data[0]),
		},
	}, nil
}

var Decoders = map[string]types.EventDecoderWithMeta{
	"0x2eb5248cf3d8cd81a5ba6d3cc6e1997df7b174eb894aac081867c1a2bc43c90": {Func: DecodePaused, Name: "stablecoin::components::pausable::PausableComponent::Paused"},
	"0xece5baf71f670bcb771481fd7bd9efd6d6b8053246fe67b5a13db8bf5f50f1":  {Func: DecodeUnpaused, Name: "stablecoin::components::pausable::PausableComponent::Unpaused"},
	"0x3a3cc4f4296a9feb85fc169412bf660a4b05dee74ae1c54a17f18576bb04141": {Func: DecodeLogFixedSpreadLiquidate, Name: "stablecoin::core::strategies::fixed_spread_liquidation_strategy::FixedSpreadLiquidationStrategy::LogFixedSpreadLiquidate"},
	"0x305ec3ae8c4311b9cc974d3f06702336f916a226b22ab4abb69b12930ab153e": {Func: DecodeLogSetFlashLendingEnabled, Name: "stablecoin::core::strategies::fixed_spread_liquidation_strategy::FixedSpreadLiquidationStrategy::LogSetFlashLendingEnabled"},
	"0x1ff221b30a3b491affd2f37d096cf0e8d5565722b8ff03d4751f1c2f067083f": {Func: DecodeLogSetBookKeeper, Name: "stablecoin::core::strategies::fixed_spread_liquidation_strategy::FixedSpreadLiquidationStrategy::LogSetBookKeeper"},
}
