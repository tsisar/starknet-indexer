// Code generated by generator-core; DO NOT EDIT.
package collateral_pool_config

import (
	"fmt"
	"github.com/NethermindEth/juno/core/felt"
	"github.com/Tsisar/starknet-indexer/internal/types"
)

func DecodeLogSetPriceWithSafetyMargin(keys, data []*felt.Felt) (interface{}, error) {
	if len(keys) != 2 {
		return nil, fmt.Errorf("expected 2 keys, got %d", len(keys))
	}
	if len(data) != 2 {
		return nil, fmt.Errorf("expected 2 data fields, got %d", len(data))
	}

	return LogSetPriceWithSafetyMargin{
		Key: LogSetPriceWithSafetyMarginKey{
			Caller:           types.NewAddress(keys[0]),
			CollateralPoolId: types.NewTextFelt(keys[1]),
		},
		Data: LogSetPriceWithSafetyMarginData{
			PriceWithSafetyMargin: types.U256{
				Low:  data[0].String(),
				High: data[1].String(),
			},
		},
	}, nil
}

func DecodeLogSetDebtCeiling(keys, data []*felt.Felt) (interface{}, error) {
	if len(keys) != 2 {
		return nil, fmt.Errorf("expected 2 keys, got %d", len(keys))
	}
	if len(data) != 2 {
		return nil, fmt.Errorf("expected 2 data fields, got %d", len(data))
	}

	return LogSetDebtCeiling{
		Key: LogSetDebtCeilingKey{
			Caller:           types.NewAddress(keys[0]),
			CollateralPoolId: types.NewTextFelt(keys[1]),
		},
		Data: LogSetDebtCeilingData{
			DebtCeiling: types.U256{
				Low:  data[0].String(),
				High: data[1].String(),
			},
		},
	}, nil
}

func DecodeLogSetDebtFloor(keys, data []*felt.Felt) (interface{}, error) {
	if len(keys) != 2 {
		return nil, fmt.Errorf("expected 2 keys, got %d", len(keys))
	}
	if len(data) != 2 {
		return nil, fmt.Errorf("expected 2 data fields, got %d", len(data))
	}

	return LogSetDebtFloor{
		Key: LogSetDebtFloorKey{
			Caller:           types.NewAddress(keys[0]),
			CollateralPoolId: types.NewTextFelt(keys[1]),
		},
		Data: LogSetDebtFloorData{
			DebtFloor: types.U256{
				Low:  data[0].String(),
				High: data[1].String(),
			},
		},
	}, nil
}

func DecodeLogSetPriceFeed(keys, data []*felt.Felt) (interface{}, error) {
	if len(keys) != 2 {
		return nil, fmt.Errorf("expected 2 keys, got %d", len(keys))
	}
	if len(data) != 1 {
		return nil, fmt.Errorf("expected 1 data fields, got %d", len(data))
	}

	return LogSetPriceFeed{
		Key: LogSetPriceFeedKey{
			Caller:           types.NewAddress(keys[0]),
			CollateralPoolId: types.NewTextFelt(keys[1]),
		},
		Data: LogSetPriceFeedData{
			PriceFeed: types.NewAddress(data[0]),
		},
	}, nil
}

func DecodeLogSetLiquidationRatio(keys, data []*felt.Felt) (interface{}, error) {
	if len(keys) != 2 {
		return nil, fmt.Errorf("expected 2 keys, got %d", len(keys))
	}
	if len(data) != 2 {
		return nil, fmt.Errorf("expected 2 data fields, got %d", len(data))
	}

	return LogSetLiquidationRatio{
		Key: LogSetLiquidationRatioKey{
			Caller:           types.NewAddress(keys[0]),
			CollateralPoolId: types.NewTextFelt(keys[1]),
		},
		Data: LogSetLiquidationRatioData{
			LiquidationRatio: types.U256{
				Low:  data[0].String(),
				High: data[1].String(),
			},
		},
	}, nil
}

func DecodeLogSetStabilityFeeRate(keys, data []*felt.Felt) (interface{}, error) {
	if len(keys) != 2 {
		return nil, fmt.Errorf("expected 2 keys, got %d", len(keys))
	}
	if len(data) != 2 {
		return nil, fmt.Errorf("expected 2 data fields, got %d", len(data))
	}

	return LogSetStabilityFeeRate{
		Key: LogSetStabilityFeeRateKey{
			Caller:           types.NewAddress(keys[0]),
			CollateralPoolId: types.NewTextFelt(keys[1]),
		},
		Data: LogSetStabilityFeeRateData{
			StabilityFeeRate: types.U256{
				Low:  data[0].String(),
				High: data[1].String(),
			},
		},
	}, nil
}

func DecodeLogSetAdapter(keys, data []*felt.Felt) (interface{}, error) {
	if len(keys) != 2 {
		return nil, fmt.Errorf("expected 2 keys, got %d", len(keys))
	}
	if len(data) != 1 {
		return nil, fmt.Errorf("expected 1 data fields, got %d", len(data))
	}

	return LogSetAdapter{
		Key: LogSetAdapterKey{
			Caller:           types.NewAddress(keys[0]),
			CollateralPoolId: types.NewTextFelt(keys[1]),
		},
		Data: LogSetAdapterData{
			Adapter: types.NewAddress(data[0]),
		},
	}, nil
}

func DecodeLogSetCloseFactorBps(keys, data []*felt.Felt) (interface{}, error) {
	if len(keys) != 2 {
		return nil, fmt.Errorf("expected 2 keys, got %d", len(keys))
	}
	if len(data) != 2 {
		return nil, fmt.Errorf("expected 2 data fields, got %d", len(data))
	}

	return LogSetCloseFactorBps{
		Key: LogSetCloseFactorBpsKey{
			Caller:           types.NewAddress(keys[0]),
			CollateralPoolId: types.NewTextFelt(keys[1]),
		},
		Data: LogSetCloseFactorBpsData{
			CloseFactorBps: types.U256{
				Low:  data[0].String(),
				High: data[1].String(),
			},
		},
	}, nil
}

func DecodeLogSetLiquidatorIncentiveBps(keys, data []*felt.Felt) (interface{}, error) {
	if len(keys) != 2 {
		return nil, fmt.Errorf("expected 2 keys, got %d", len(keys))
	}
	if len(data) != 2 {
		return nil, fmt.Errorf("expected 2 data fields, got %d", len(data))
	}

	return LogSetLiquidatorIncentiveBps{
		Key: LogSetLiquidatorIncentiveBpsKey{
			Caller:           types.NewAddress(keys[0]),
			CollateralPoolId: types.NewTextFelt(keys[1]),
		},
		Data: LogSetLiquidatorIncentiveBpsData{
			LiquidatorIncentiveBps: types.U256{
				Low:  data[0].String(),
				High: data[1].String(),
			},
		},
	}, nil
}

func DecodeLogSetTreasuryFeesBps(keys, data []*felt.Felt) (interface{}, error) {
	if len(keys) != 2 {
		return nil, fmt.Errorf("expected 2 keys, got %d", len(keys))
	}
	if len(data) != 2 {
		return nil, fmt.Errorf("expected 2 data fields, got %d", len(data))
	}

	return LogSetTreasuryFeesBps{
		Key: LogSetTreasuryFeesBpsKey{
			Caller:           types.NewAddress(keys[0]),
			CollateralPoolId: types.NewTextFelt(keys[1]),
		},
		Data: LogSetTreasuryFeesBpsData{
			TreasuryFeesBps: types.U256{
				Low:  data[0].String(),
				High: data[1].String(),
			},
		},
	}, nil
}

func DecodeLogSetStrategy(keys, data []*felt.Felt) (interface{}, error) {
	if len(keys) != 2 {
		return nil, fmt.Errorf("expected 2 keys, got %d", len(keys))
	}
	if len(data) != 1 {
		return nil, fmt.Errorf("expected 1 data fields, got %d", len(data))
	}

	return LogSetStrategy{
		Key: LogSetStrategyKey{
			Caller:           types.NewAddress(keys[0]),
			CollateralPoolId: types.NewTextFelt(keys[1]),
		},
		Data: LogSetStrategyData{
			Strategy: types.NewAddress(data[0]),
		},
	}, nil
}

func DecodeLogSetTotalDebtShare(keys, data []*felt.Felt) (interface{}, error) {
	if len(keys) != 2 {
		return nil, fmt.Errorf("expected 2 keys, got %d", len(keys))
	}
	if len(data) != 2 {
		return nil, fmt.Errorf("expected 2 data fields, got %d", len(data))
	}

	return LogSetTotalDebtShare{
		Key: LogSetTotalDebtShareKey{
			Caller:           types.NewAddress(keys[0]),
			CollateralPoolId: types.NewTextFelt(keys[1]),
		},
		Data: LogSetTotalDebtShareData{
			TotalDebtShare: types.U256{
				Low:  data[0].String(),
				High: data[1].String(),
			},
		},
	}, nil
}

func DecodeLogSetDebtAccumulatedRate(keys, data []*felt.Felt) (interface{}, error) {
	if len(keys) != 2 {
		return nil, fmt.Errorf("expected 2 keys, got %d", len(keys))
	}
	if len(data) != 2 {
		return nil, fmt.Errorf("expected 2 data fields, got %d", len(data))
	}

	return LogSetDebtAccumulatedRate{
		Key: LogSetDebtAccumulatedRateKey{
			Caller:           types.NewAddress(keys[0]),
			CollateralPoolId: types.NewTextFelt(keys[1]),
		},
		Data: LogSetDebtAccumulatedRateData{
			DebtAccumulatedRate: types.U256{
				Low:  data[0].String(),
				High: data[1].String(),
			},
		},
	}, nil
}

func DecodeLogInitCollateralPoolId(keys, data []*felt.Felt) (interface{}, error) {
	if len(keys) != 1 {
		return nil, fmt.Errorf("expected 1 keys, got %d", len(keys))
	}
	if len(data) != 7 {
		return nil, fmt.Errorf("expected 7 data fields, got %d", len(data))
	}

	return LogInitCollateralPoolId{
		Key: LogInitCollateralPoolIdKey{
			CollateralPoolId: types.NewTextFelt(keys[0]),
		},
		Data: LogInitCollateralPoolIdData{
			DebtCeiling: types.U256{
				Low:  data[0].String(),
				High: data[1].String(),
			},
			LiquidationRatio: types.U256{
				Low:  data[2].String(),
				High: data[3].String(),
			},
			StabilityFeeRate: types.U256{
				Low:  data[4].String(),
				High: data[5].String(),
			},
			Adapter: types.NewAddress(data[6]),
		},
	}, nil
}

func DecodeLogPositionDebtCeiling(keys, data []*felt.Felt) (interface{}, error) {
	if len(keys) != 2 {
		return nil, fmt.Errorf("expected 2 keys, got %d", len(keys))
	}
	if len(data) != 2 {
		return nil, fmt.Errorf("expected 2 data fields, got %d", len(data))
	}

	return LogPositionDebtCeiling{
		Key: LogPositionDebtCeilingKey{
			MessageSender:    types.NewAddress(keys[0]),
			CollateralPoolId: types.NewTextFelt(keys[1]),
		},
		Data: LogPositionDebtCeilingData{
			PositionDebtCeiling: types.U256{
				Low:  data[0].String(),
				High: data[1].String(),
			},
		},
	}, nil
}

var Decoders = map[string]types.EventDecoderWithMeta{
	"0x3098649541c6e6f35bf09b0b4b19214e15b282b970d8795859934358ef7c093": {Func: DecodeLogSetPriceWithSafetyMargin, Name: "stablecoin::core::config::collateral_pool_config::CollateralPoolConfig::LogSetPriceWithSafetyMargin"},
	"0x1e3165d6b3db19266957e845d7446e2eb9af4e376b5fe0e9bf6ad482e5865c0": {Func: DecodeLogSetDebtCeiling, Name: "stablecoin::core::config::collateral_pool_config::CollateralPoolConfig::LogSetDebtCeiling"},
	"0x1e4ef84699e5e4dcc0d48c4e21a9b8ca9b2a2f6655b951178083e4628102345": {Func: DecodeLogSetDebtFloor, Name: "stablecoin::core::config::collateral_pool_config::CollateralPoolConfig::LogSetDebtFloor"},
	"0x36eec8a6bc1c39138c3f62cf0f6dc8ba6df5e2f819106719d021ae75a9bdb44": {Func: DecodeLogSetPriceFeed, Name: "stablecoin::core::config::collateral_pool_config::CollateralPoolConfig::LogSetPriceFeed"},
	"0x27208be6fae8c44b0f6dc4d6bb441e8db1c28e2199192938822d4020d52419a": {Func: DecodeLogSetLiquidationRatio, Name: "stablecoin::core::config::collateral_pool_config::CollateralPoolConfig::LogSetLiquidationRatio"},
	"0x1fbbf926ac54029b36cd4577b74c00b475fbcaf9b75a7df1d7adfe92ace29e5": {Func: DecodeLogSetStabilityFeeRate, Name: "stablecoin::core::config::collateral_pool_config::CollateralPoolConfig::LogSetStabilityFeeRate"},
	"0x1b3826789f3a87d43424682fd3314518ffb5cd2c5d966fd1ec9c981823ea53d": {Func: DecodeLogSetAdapter, Name: "stablecoin::core::config::collateral_pool_config::CollateralPoolConfig::LogSetAdapter"},
	"0x3e04856b12e5029f79f697d58d5d143f305855a5b44f54bfc3744f9d04c7ab9": {Func: DecodeLogSetCloseFactorBps, Name: "stablecoin::core::config::collateral_pool_config::CollateralPoolConfig::LogSetCloseFactorBps"},
	"0x32a62e527cd45530d1687d717e5d20eabb0fb63c745f9b2158fa3ec785b096c": {Func: DecodeLogSetLiquidatorIncentiveBps, Name: "stablecoin::core::config::collateral_pool_config::CollateralPoolConfig::LogSetLiquidatorIncentiveBps"},
	"0x39370a81cb3cba9b221c67b5c29adc913e739e41b882a8e7cec564db7afc35a": {Func: DecodeLogSetTreasuryFeesBps, Name: "stablecoin::core::config::collateral_pool_config::CollateralPoolConfig::LogSetTreasuryFeesBps"},
	"0x5aadf6a4e1eb4d02f7b972b17d0742bef6be4199a7ec71544e6a8ee88a6d85":  {Func: DecodeLogSetStrategy, Name: "stablecoin::core::config::collateral_pool_config::CollateralPoolConfig::LogSetStrategy"},
	"0x1434ad3faee29b737d09af2fb9f7a18468386a8d7499431c28d5f7eb968e01d": {Func: DecodeLogSetTotalDebtShare, Name: "stablecoin::core::config::collateral_pool_config::CollateralPoolConfig::LogSetTotalDebtShare"},
	"0x2e778e7314cd222d71b2dde4b9221326385ab06d68f23f0f857e126cc934bdc": {Func: DecodeLogSetDebtAccumulatedRate, Name: "stablecoin::core::config::collateral_pool_config::CollateralPoolConfig::LogSetDebtAccumulatedRate"},
	"0x3f5bb7becc3652775915374a76005b98c760d2ca186396560330114e4e7161c": {Func: DecodeLogInitCollateralPoolId, Name: "stablecoin::core::config::collateral_pool_config::CollateralPoolConfig::LogInitCollateralPoolId"},
	"0xbda62c3338c9d2483a106b8926005da68e863eb0f1688f06ceb50272c5011e":  {Func: DecodeLogPositionDebtCeiling, Name: "stablecoin::core::config::collateral_pool_config::CollateralPoolConfig::LogPositionDebtCeiling"},
}
