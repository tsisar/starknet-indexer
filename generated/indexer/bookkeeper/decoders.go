// Code generated by generator-core; DO NOT EDIT.
package bookkeeper

import (
	"fmt"
	"github.com/NethermindEth/juno/core/felt"
	"github.com/Tsisar/starknet-indexer/internal/types"
)

func DecodePaused(keys, data []*felt.Felt) (interface{}, error) {
	if len(data) != 1 {
		return nil, fmt.Errorf("expected 1 data fields, got %d", len(data))
	}

	return Paused{
		Data: PausedData{
			Account: types.NewAddress(data[0]),
		},
	}, nil
}

func DecodeUnpaused(keys, data []*felt.Felt) (interface{}, error) {
	if len(data) != 1 {
		return nil, fmt.Errorf("expected 1 data fields, got %d", len(data))
	}

	return Unpaused{
		Data: UnpausedData{
			Account: types.NewAddress(data[0]),
		},
	}, nil
}

func DecodeLogSetTotalDebtCeiling(keys, data []*felt.Felt) (interface{}, error) {
	if len(keys) != 1 {
		return nil, fmt.Errorf("expected 1 keys, got %d", len(keys))
	}
	if len(data) != 2 {
		return nil, fmt.Errorf("expected 2 data fields, got %d", len(data))
	}

	return LogSetTotalDebtCeiling{
		Key: LogSetTotalDebtCeilingKey{
			Caller: types.NewAddress(keys[0]),
		},
		Data: LogSetTotalDebtCeilingData{
			TotalDebtCeiling: types.U256{
				Low:  data[0].String(),
				High: data[1].String(),
			},
		},
	}, nil
}

func DecodeLogSetCollateralPoolConfig(keys, data []*felt.Felt) (interface{}, error) {
	if len(keys) != 1 {
		return nil, fmt.Errorf("expected 1 keys, got %d", len(keys))
	}
	if len(data) != 1 {
		return nil, fmt.Errorf("expected 1 data fields, got %d", len(data))
	}

	return LogSetCollateralPoolConfig{
		Key: LogSetCollateralPoolConfigKey{
			Caller: types.NewAddress(keys[0]),
		},
		Data: LogSetCollateralPoolConfigData{
			CollateralPoolConfig: types.NewAddress(data[0]),
		},
	}, nil
}

func DecodeLogSetAccessControlConfig(keys, data []*felt.Felt) (interface{}, error) {
	if len(keys) != 1 {
		return nil, fmt.Errorf("expected 1 keys, got %d", len(keys))
	}
	if len(data) != 1 {
		return nil, fmt.Errorf("expected 1 data fields, got %d", len(data))
	}

	return LogSetAccessControlConfig{
		Key: LogSetAccessControlConfigKey{
			Caller: types.NewAddress(keys[0]),
		},
		Data: LogSetAccessControlConfigData{
			AccessControlConfig: types.NewAddress(data[0]),
		},
	}, nil
}

func DecodeLogAdjustPosition(keys, data []*felt.Felt) (interface{}, error) {
	if len(keys) != 3 {
		return nil, fmt.Errorf("expected 3 keys, got %d", len(keys))
	}
	if len(data) != 12 {
		return nil, fmt.Errorf("expected 12 data fields, got %d", len(data))
	}

	return LogAdjustPosition{
		Key: LogAdjustPositionKey{
			Caller:           types.NewAddress(keys[0]),
			CollateralPoolId: types.NewTextFelt(keys[1]),
			PositionAddress:  types.NewAddress(keys[2]),
		},
		Data: LogAdjustPositionData{
			LockedCollateral: types.U256{
				Low:  data[0].String(),
				High: data[1].String(),
			},
			DebtShare: types.U256{
				Low:  data[2].String(),
				High: data[3].String(),
			},
			PositionDebtValue: types.U256{
				Low:  data[4].String(),
				High: data[5].String(),
			},
			AddCollateral: types.I257{
				Abs: types.U256{
					Low:  data[6].String(),
					High: data[7].String(),
				},
				IsNegative: data[8].Cmp(&felt.Zero) != 0,
			},
			AddDebtShare: types.I257{
				Abs: types.U256{
					Low:  data[9].String(),
					High: data[10].String(),
				},
				IsNegative: data[11].Cmp(&felt.Zero) != 0,
			},
		},
	}, nil
}

func DecodeLogAddCollateral(keys, data []*felt.Felt) (interface{}, error) {
	if len(keys) != 2 {
		return nil, fmt.Errorf("expected 2 keys, got %d", len(keys))
	}
	if len(data) != 3 {
		return nil, fmt.Errorf("expected 3 data fields, got %d", len(data))
	}

	return LogAddCollateral{
		Key: LogAddCollateralKey{
			Caller: types.NewAddress(keys[0]),
			Dst:    types.NewAddress(keys[1]),
		},
		Data: LogAddCollateralData{
			Amount: types.I257{
				Abs: types.U256{
					Low:  data[0].String(),
					High: data[1].String(),
				},
				IsNegative: data[2].Cmp(&felt.Zero) != 0,
			},
		},
	}, nil
}

func DecodeLogMoveCollateral(keys, data []*felt.Felt) (interface{}, error) {
	if len(keys) != 3 {
		return nil, fmt.Errorf("expected 3 keys, got %d", len(keys))
	}
	if len(data) != 3 {
		return nil, fmt.Errorf("expected 3 data fields, got %d", len(data))
	}

	return LogMoveCollateral{
		Key: LogMoveCollateralKey{
			Caller:           types.NewAddress(keys[0]),
			CollateralPoolId: types.NewTextFelt(keys[1]),
			Dst:              types.NewAddress(keys[2]),
		},
		Data: LogMoveCollateralData{
			Src: types.NewAddress(data[0]),
			Amount: types.U256{
				Low:  data[1].String(),
				High: data[2].String(),
			},
		},
	}, nil
}

func DecodeLogMoveStablecoin(keys, data []*felt.Felt) (interface{}, error) {
	if len(keys) != 2 {
		return nil, fmt.Errorf("expected 2 keys, got %d", len(keys))
	}
	if len(data) != 3 {
		return nil, fmt.Errorf("expected 3 data fields, got %d", len(data))
	}

	return LogMoveStablecoin{
		Key: LogMoveStablecoinKey{
			Caller: types.NewAddress(keys[0]),
			Dst:    types.NewAddress(keys[1]),
		},
		Data: LogMoveStablecoinData{
			Src: types.NewAddress(data[0]),
			Amount: types.U256{
				Low:  data[1].String(),
				High: data[2].String(),
			},
		},
	}, nil
}

func DecodeLogAddToWhitelist(keys, data []*felt.Felt) (interface{}, error) {
	if len(keys) != 2 {
		return nil, fmt.Errorf("expected 2 keys, got %d", len(keys))
	}

	return LogAddToWhitelist{
		Key: LogAddToWhitelistKey{
			PositionAddress:        types.NewAddress(keys[0]),
			ToBeWhitelistedAddress: types.NewAddress(keys[1]),
		},
	}, nil
}

func DecodeLogRemoveFromWhitelist(keys, data []*felt.Felt) (interface{}, error) {
	if len(keys) != 2 {
		return nil, fmt.Errorf("expected 2 keys, got %d", len(keys))
	}

	return LogRemoveFromWhitelist{
		Key: LogRemoveFromWhitelistKey{
			PositionAddress:    types.NewAddress(keys[0]),
			ToBeRemovedAddress: types.NewAddress(keys[1]),
		},
	}, nil
}

func DecodeStablecoinIssuedAmount(keys, data []*felt.Felt) (interface{}, error) {
	if len(keys) != 1 {
		return nil, fmt.Errorf("expected 1 keys, got %d", len(keys))
	}
	if len(data) != 4 {
		return nil, fmt.Errorf("expected 4 data fields, got %d", len(data))
	}

	return StablecoinIssuedAmount{
		Key: StablecoinIssuedAmountKey{
			CollateralPoolId: types.NewTextFelt(keys[0]),
		},
		Data: StablecoinIssuedAmountData{
			TotalStablecoinIssued: types.U256{
				Low:  data[0].String(),
				High: data[1].String(),
			},
			PoolStablecoinIssued: types.U256{
				Low:  data[2].String(),
				High: data[3].String(),
			},
		},
	}, nil
}

func DecodeLogCage(keys, data []*felt.Felt) (interface{}, error) {

	return LogCage{}, nil
}

var Decoders = map[string]types.EventDecoderWithMeta{
	"0x2eb5248cf3d8cd81a5ba6d3cc6e1997df7b174eb894aac081867c1a2bc43c90": {Func: DecodePaused, Name: "stablecoin::components::pausable::PausableComponent::Paused"},
	"0xece5baf71f670bcb771481fd7bd9efd6d6b8053246fe67b5a13db8bf5f50f1":  {Func: DecodeUnpaused, Name: "stablecoin::components::pausable::PausableComponent::Unpaused"},
	"0x4f0649ea1e3f35b15c7b99ad0416c0946dc9e2452f27a72327f140f23dffd0":  {Func: DecodeLogSetTotalDebtCeiling, Name: "stablecoin::core::bookkeeper::BookKeeper::LogSetTotalDebtCeiling"},
	"0x2fd7d82203e945a7dd2c7ccd64db23e4af9cb6c016cfae1e457679221aacd03": {Func: DecodeLogSetCollateralPoolConfig, Name: "stablecoin::core::bookkeeper::BookKeeper::LogSetCollateralPoolConfig"},
	"0x299667613c997fd6fc15c51a5c3b55e66701061d593bfa04867d1dd048a0f40": {Func: DecodeLogSetAccessControlConfig, Name: "stablecoin::core::bookkeeper::BookKeeper::LogSetAccessControlConfig"},
	"0x3a5be1612488ae2b617687d8eb57bb0fd5f761ef1bcd898e0456bb963d5e763": {Func: DecodeLogAdjustPosition, Name: "stablecoin::core::bookkeeper::BookKeeper::LogAdjustPosition"},
	"0x1915ff74d9b9e58f6d6feaaf6df58198a22e9313a3de8f51f45185c7dfd014d": {Func: DecodeLogAddCollateral, Name: "stablecoin::core::bookkeeper::BookKeeper::LogAddCollateral"},
	"0x1d9116ef4134510054d047eb4c125431be1389ff5ab6d58c1fdad4ebe1fd4b5": {Func: DecodeLogMoveCollateral, Name: "stablecoin::core::bookkeeper::BookKeeper::LogMoveCollateral"},
	"0x1eb450c8e85332366c0de4ed4ecee51a281a9cc54835dfa77d386541beedce7": {Func: DecodeLogMoveStablecoin, Name: "stablecoin::core::bookkeeper::BookKeeper::LogMoveStablecoin"},
	"0x1338d8637e5f1d9f0538699896d04ece348accfaac81d0924f421b1cfbfdfec": {Func: DecodeLogAddToWhitelist, Name: "stablecoin::core::bookkeeper::BookKeeper::LogAddToWhitelist"},
	"0x32176b0461878b055af0a933e1c41f4a0d653a05fd879ca66fc1f39baa2f79":  {Func: DecodeLogRemoveFromWhitelist, Name: "stablecoin::core::bookkeeper::BookKeeper::LogRemoveFromWhitelist"},
	"0x1b445f723fd2eef14e6cb9385fc98542e389ab19dc094a85722f550dc773b8e": {Func: DecodeStablecoinIssuedAmount, Name: "stablecoin::core::bookkeeper::BookKeeper::StablecoinIssuedAmount"},
	"0x75ef26d8af3732b337ded7c33086749b36a2c1ec660f2de592fe60717edfd":   {Func: DecodeLogCage, Name: "stablecoin::core::bookkeeper::BookKeeper::LogCage"},
}
