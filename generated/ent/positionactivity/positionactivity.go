// Code generated by ent, DO NOT EDIT.

package positionactivity

import (
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the positionactivity type in the database.
	Label = "position_activity"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldActivityState holds the string denoting the activitystate field in the database.
	FieldActivityState = "activity_state"
	// FieldCollateralAmount holds the string denoting the collateralamount field in the database.
	FieldCollateralAmount = "collateral_amount"
	// FieldDebtAmount holds the string denoting the debtamount field in the database.
	FieldDebtAmount = "debt_amount"
	// FieldBlockNumber holds the string denoting the blocknumber field in the database.
	FieldBlockNumber = "block_number"
	// FieldBlockTimestamp holds the string denoting the blocktimestamp field in the database.
	FieldBlockTimestamp = "block_timestamp"
	// FieldTransaction holds the string denoting the transaction field in the database.
	FieldTransaction = "transaction"
	// EdgePosition holds the string denoting the position edge name in mutations.
	EdgePosition = "position"
	// Table holds the table name of the positionactivity in the database.
	Table = "position_activities"
	// PositionTable is the table that holds the position relation/edge.
	PositionTable = "position_activities"
	// PositionInverseTable is the table name for the Position entity.
	// It exists in this package in order to avoid circular dependency with the "position" package.
	PositionInverseTable = "positions"
	// PositionColumn is the table column denoting the position relation/edge.
	PositionColumn = "position_activity_position"
)

// Columns holds all SQL columns for positionactivity fields.
var Columns = []string{
	FieldID,
	FieldActivityState,
	FieldCollateralAmount,
	FieldDebtAmount,
	FieldBlockNumber,
	FieldBlockTimestamp,
	FieldTransaction,
}

// ForeignKeys holds the SQL foreign-keys that are owned by the "position_activities"
// table and are not defined as standalone fields in the schema.
var ForeignKeys = []string{
	"position_activity",
	"position_activity_position",
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	for i := range ForeignKeys {
		if column == ForeignKeys[i] {
			return true
		}
	}
	return false
}

// OrderOption defines the ordering options for the PositionActivity queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByActivityState orders the results by the activityState field.
func ByActivityState(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldActivityState, opts...).ToFunc()
}

// ByCollateralAmount orders the results by the collateralAmount field.
func ByCollateralAmount(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCollateralAmount, opts...).ToFunc()
}

// ByDebtAmount orders the results by the debtAmount field.
func ByDebtAmount(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDebtAmount, opts...).ToFunc()
}

// ByBlockNumber orders the results by the blockNumber field.
func ByBlockNumber(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldBlockNumber, opts...).ToFunc()
}

// ByBlockTimestamp orders the results by the blockTimestamp field.
func ByBlockTimestamp(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldBlockTimestamp, opts...).ToFunc()
}

// ByTransaction orders the results by the transaction field.
func ByTransaction(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldTransaction, opts...).ToFunc()
}

// ByPositionField orders the results by position field.
func ByPositionField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newPositionStep(), sql.OrderByField(field, opts...))
	}
}
func newPositionStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(PositionInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, false, PositionTable, PositionColumn),
	)
}
