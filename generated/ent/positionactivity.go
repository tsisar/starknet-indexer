// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/tsisar/starknet-indexer/generated/ent/position"
	"github.com/tsisar/starknet-indexer/generated/ent/positionactivity"
)

// PositionActivity is the model entity for the PositionActivity schema.
type PositionActivity struct {
	config `json:"-"`
	// ID of the ent.
	ID string `json:"id,omitempty"`
	// ActivityState holds the value of the "activityState" field.
	ActivityState string `json:"activityState,omitempty"`
	// CollateralAmount holds the value of the "collateralAmount" field.
	CollateralAmount string `json:"collateralAmount,omitempty"`
	// DebtAmount holds the value of the "debtAmount" field.
	DebtAmount string `json:"debtAmount,omitempty"`
	// BlockNumber holds the value of the "blockNumber" field.
	BlockNumber string `json:"blockNumber,omitempty"`
	// BlockTimestamp holds the value of the "blockTimestamp" field.
	BlockTimestamp string `json:"blockTimestamp,omitempty"`
	// Transaction holds the value of the "transaction" field.
	Transaction string `json:"transaction,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the PositionActivityQuery when eager-loading is set.
	Edges                      PositionActivityEdges `json:"edges"`
	position_activity          *string
	position_activity_position *string
	selectValues               sql.SelectValues
}

// PositionActivityEdges holds the relations/edges for other nodes in the graph.
type PositionActivityEdges struct {
	// Position holds the value of the position edge.
	Position *Position `json:"position,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// PositionOrErr returns the Position value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e PositionActivityEdges) PositionOrErr() (*Position, error) {
	if e.Position != nil {
		return e.Position, nil
	} else if e.loadedTypes[0] {
		return nil, &NotFoundError{label: position.Label}
	}
	return nil, &NotLoadedError{edge: "position"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*PositionActivity) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case positionactivity.FieldID, positionactivity.FieldActivityState, positionactivity.FieldCollateralAmount, positionactivity.FieldDebtAmount, positionactivity.FieldBlockNumber, positionactivity.FieldBlockTimestamp, positionactivity.FieldTransaction:
			values[i] = new(sql.NullString)
		case positionactivity.ForeignKeys[0]: // position_activity
			values[i] = new(sql.NullString)
		case positionactivity.ForeignKeys[1]: // position_activity_position
			values[i] = new(sql.NullString)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the PositionActivity fields.
func (pa *PositionActivity) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case positionactivity.FieldID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value.Valid {
				pa.ID = value.String
			}
		case positionactivity.FieldActivityState:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field activityState", values[i])
			} else if value.Valid {
				pa.ActivityState = value.String
			}
		case positionactivity.FieldCollateralAmount:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field collateralAmount", values[i])
			} else if value.Valid {
				pa.CollateralAmount = value.String
			}
		case positionactivity.FieldDebtAmount:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field debtAmount", values[i])
			} else if value.Valid {
				pa.DebtAmount = value.String
			}
		case positionactivity.FieldBlockNumber:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field blockNumber", values[i])
			} else if value.Valid {
				pa.BlockNumber = value.String
			}
		case positionactivity.FieldBlockTimestamp:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field blockTimestamp", values[i])
			} else if value.Valid {
				pa.BlockTimestamp = value.String
			}
		case positionactivity.FieldTransaction:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field transaction", values[i])
			} else if value.Valid {
				pa.Transaction = value.String
			}
		case positionactivity.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field position_activity", values[i])
			} else if value.Valid {
				pa.position_activity = new(string)
				*pa.position_activity = value.String
			}
		case positionactivity.ForeignKeys[1]:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field position_activity_position", values[i])
			} else if value.Valid {
				pa.position_activity_position = new(string)
				*pa.position_activity_position = value.String
			}
		default:
			pa.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the PositionActivity.
// This includes values selected through modifiers, order, etc.
func (pa *PositionActivity) Value(name string) (ent.Value, error) {
	return pa.selectValues.Get(name)
}

// QueryPosition queries the "position" edge of the PositionActivity entity.
func (pa *PositionActivity) QueryPosition() *PositionQuery {
	return NewPositionActivityClient(pa.config).QueryPosition(pa)
}

// Update returns a builder for updating this PositionActivity.
// Note that you need to call PositionActivity.Unwrap() before calling this method if this PositionActivity
// was returned from a transaction, and the transaction was committed or rolled back.
func (pa *PositionActivity) Update() *PositionActivityUpdateOne {
	return NewPositionActivityClient(pa.config).UpdateOne(pa)
}

// Unwrap unwraps the PositionActivity entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (pa *PositionActivity) Unwrap() *PositionActivity {
	_tx, ok := pa.config.driver.(*txDriver)
	if !ok {
		panic("ent: PositionActivity is not a transactional entity")
	}
	pa.config.driver = _tx.drv
	return pa
}

// String implements the fmt.Stringer.
func (pa *PositionActivity) String() string {
	var builder strings.Builder
	builder.WriteString("PositionActivity(")
	builder.WriteString(fmt.Sprintf("id=%v, ", pa.ID))
	builder.WriteString("activityState=")
	builder.WriteString(pa.ActivityState)
	builder.WriteString(", ")
	builder.WriteString("collateralAmount=")
	builder.WriteString(pa.CollateralAmount)
	builder.WriteString(", ")
	builder.WriteString("debtAmount=")
	builder.WriteString(pa.DebtAmount)
	builder.WriteString(", ")
	builder.WriteString("blockNumber=")
	builder.WriteString(pa.BlockNumber)
	builder.WriteString(", ")
	builder.WriteString("blockTimestamp=")
	builder.WriteString(pa.BlockTimestamp)
	builder.WriteString(", ")
	builder.WriteString("transaction=")
	builder.WriteString(pa.Transaction)
	builder.WriteByte(')')
	return builder.String()
}

// PositionActivities is a parsable slice of PositionActivity.
type PositionActivities []*PositionActivity
