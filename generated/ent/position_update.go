// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/Tsisar/starknet-indexer/generated/ent/pool"
	"github.com/Tsisar/starknet-indexer/generated/ent/position"
	"github.com/Tsisar/starknet-indexer/generated/ent/positionactivity"
	"github.com/Tsisar/starknet-indexer/generated/ent/predicate"
)

// PositionUpdate is the builder for updating Position entities.
type PositionUpdate struct {
	config
	hooks    []Hook
	mutation *PositionMutation
}

// Where appends a list predicates to the PositionUpdate builder.
func (pu *PositionUpdate) Where(ps ...predicate.Position) *PositionUpdate {
	pu.mutation.Where(ps...)
	return pu
}

// SetPositionAddress sets the "positionAddress" field.
func (pu *PositionUpdate) SetPositionAddress(s string) *PositionUpdate {
	pu.mutation.SetPositionAddress(s)
	return pu
}

// SetNillablePositionAddress sets the "positionAddress" field if the given value is not nil.
func (pu *PositionUpdate) SetNillablePositionAddress(s *string) *PositionUpdate {
	if s != nil {
		pu.SetPositionAddress(*s)
	}
	return pu
}

// SetUserAddress sets the "userAddress" field.
func (pu *PositionUpdate) SetUserAddress(s string) *PositionUpdate {
	pu.mutation.SetUserAddress(s)
	return pu
}

// SetNillableUserAddress sets the "userAddress" field if the given value is not nil.
func (pu *PositionUpdate) SetNillableUserAddress(s *string) *PositionUpdate {
	if s != nil {
		pu.SetUserAddress(*s)
	}
	return pu
}

// SetWalletAddress sets the "walletAddress" field.
func (pu *PositionUpdate) SetWalletAddress(s string) *PositionUpdate {
	pu.mutation.SetWalletAddress(s)
	return pu
}

// SetNillableWalletAddress sets the "walletAddress" field if the given value is not nil.
func (pu *PositionUpdate) SetNillableWalletAddress(s *string) *PositionUpdate {
	if s != nil {
		pu.SetWalletAddress(*s)
	}
	return pu
}

// SetCollateralPool sets the "collateralPool" field.
func (pu *PositionUpdate) SetCollateralPool(s string) *PositionUpdate {
	pu.mutation.SetCollateralPool(s)
	return pu
}

// SetNillableCollateralPool sets the "collateralPool" field if the given value is not nil.
func (pu *PositionUpdate) SetNillableCollateralPool(s *string) *PositionUpdate {
	if s != nil {
		pu.SetCollateralPool(*s)
	}
	return pu
}

// SetCollateralPoolName sets the "collateralPoolName" field.
func (pu *PositionUpdate) SetCollateralPoolName(s string) *PositionUpdate {
	pu.mutation.SetCollateralPoolName(s)
	return pu
}

// SetNillableCollateralPoolName sets the "collateralPoolName" field if the given value is not nil.
func (pu *PositionUpdate) SetNillableCollateralPoolName(s *string) *PositionUpdate {
	if s != nil {
		pu.SetCollateralPoolName(*s)
	}
	return pu
}

// SetPositionId sets the "positionId" field.
func (pu *PositionUpdate) SetPositionId(s string) *PositionUpdate {
	pu.mutation.SetPositionId(s)
	return pu
}

// SetNillablePositionId sets the "positionId" field if the given value is not nil.
func (pu *PositionUpdate) SetNillablePositionId(s *string) *PositionUpdate {
	if s != nil {
		pu.SetPositionId(*s)
	}
	return pu
}

// SetLockedCollateral sets the "lockedCollateral" field.
func (pu *PositionUpdate) SetLockedCollateral(s string) *PositionUpdate {
	pu.mutation.SetLockedCollateral(s)
	return pu
}

// SetNillableLockedCollateral sets the "lockedCollateral" field if the given value is not nil.
func (pu *PositionUpdate) SetNillableLockedCollateral(s *string) *PositionUpdate {
	if s != nil {
		pu.SetLockedCollateral(*s)
	}
	return pu
}

// SetDebtValue sets the "debtValue" field.
func (pu *PositionUpdate) SetDebtValue(s string) *PositionUpdate {
	pu.mutation.SetDebtValue(s)
	return pu
}

// SetNillableDebtValue sets the "debtValue" field if the given value is not nil.
func (pu *PositionUpdate) SetNillableDebtValue(s *string) *PositionUpdate {
	if s != nil {
		pu.SetDebtValue(*s)
	}
	return pu
}

// SetDebtShare sets the "debtShare" field.
func (pu *PositionUpdate) SetDebtShare(s string) *PositionUpdate {
	pu.mutation.SetDebtShare(s)
	return pu
}

// SetNillableDebtShare sets the "debtShare" field if the given value is not nil.
func (pu *PositionUpdate) SetNillableDebtShare(s *string) *PositionUpdate {
	if s != nil {
		pu.SetDebtShare(*s)
	}
	return pu
}

// SetSafetyBuffer sets the "safetyBuffer" field.
func (pu *PositionUpdate) SetSafetyBuffer(s string) *PositionUpdate {
	pu.mutation.SetSafetyBuffer(s)
	return pu
}

// SetNillableSafetyBuffer sets the "safetyBuffer" field if the given value is not nil.
func (pu *PositionUpdate) SetNillableSafetyBuffer(s *string) *PositionUpdate {
	if s != nil {
		pu.SetSafetyBuffer(*s)
	}
	return pu
}

// SetSafetyBufferInPercent sets the "safetyBufferInPercent" field.
func (pu *PositionUpdate) SetSafetyBufferInPercent(s string) *PositionUpdate {
	pu.mutation.SetSafetyBufferInPercent(s)
	return pu
}

// SetNillableSafetyBufferInPercent sets the "safetyBufferInPercent" field if the given value is not nil.
func (pu *PositionUpdate) SetNillableSafetyBufferInPercent(s *string) *PositionUpdate {
	if s != nil {
		pu.SetSafetyBufferInPercent(*s)
	}
	return pu
}

// SetTvl sets the "tvl" field.
func (pu *PositionUpdate) SetTvl(s string) *PositionUpdate {
	pu.mutation.SetTvl(s)
	return pu
}

// SetNillableTvl sets the "tvl" field if the given value is not nil.
func (pu *PositionUpdate) SetNillableTvl(s *string) *PositionUpdate {
	if s != nil {
		pu.SetTvl(*s)
	}
	return pu
}

// SetPositionStatus sets the "positionStatus" field.
func (pu *PositionUpdate) SetPositionStatus(s string) *PositionUpdate {
	pu.mutation.SetPositionStatus(s)
	return pu
}

// SetNillablePositionStatus sets the "positionStatus" field if the given value is not nil.
func (pu *PositionUpdate) SetNillablePositionStatus(s *string) *PositionUpdate {
	if s != nil {
		pu.SetPositionStatus(*s)
	}
	return pu
}

// SetLiquidationCount sets the "liquidationCount" field.
func (pu *PositionUpdate) SetLiquidationCount(s string) *PositionUpdate {
	pu.mutation.SetLiquidationCount(s)
	return pu
}

// SetNillableLiquidationCount sets the "liquidationCount" field if the given value is not nil.
func (pu *PositionUpdate) SetNillableLiquidationCount(s *string) *PositionUpdate {
	if s != nil {
		pu.SetLiquidationCount(*s)
	}
	return pu
}

// SetBlockNumber sets the "blockNumber" field.
func (pu *PositionUpdate) SetBlockNumber(s string) *PositionUpdate {
	pu.mutation.SetBlockNumber(s)
	return pu
}

// SetNillableBlockNumber sets the "blockNumber" field if the given value is not nil.
func (pu *PositionUpdate) SetNillableBlockNumber(s *string) *PositionUpdate {
	if s != nil {
		pu.SetBlockNumber(*s)
	}
	return pu
}

// SetBlockTimestamp sets the "blockTimestamp" field.
func (pu *PositionUpdate) SetBlockTimestamp(s string) *PositionUpdate {
	pu.mutation.SetBlockTimestamp(s)
	return pu
}

// SetNillableBlockTimestamp sets the "blockTimestamp" field if the given value is not nil.
func (pu *PositionUpdate) SetNillableBlockTimestamp(s *string) *PositionUpdate {
	if s != nil {
		pu.SetBlockTimestamp(*s)
	}
	return pu
}

// SetTransaction sets the "transaction" field.
func (pu *PositionUpdate) SetTransaction(s string) *PositionUpdate {
	pu.mutation.SetTransaction(s)
	return pu
}

// SetNillableTransaction sets the "transaction" field if the given value is not nil.
func (pu *PositionUpdate) SetNillableTransaction(s *string) *PositionUpdate {
	if s != nil {
		pu.SetTransaction(*s)
	}
	return pu
}

// SetPoolID sets the "pool" edge to the Pool entity by ID.
func (pu *PositionUpdate) SetPoolID(id string) *PositionUpdate {
	pu.mutation.SetPoolID(id)
	return pu
}

// SetNillablePoolID sets the "pool" edge to the Pool entity by ID if the given value is not nil.
func (pu *PositionUpdate) SetNillablePoolID(id *string) *PositionUpdate {
	if id != nil {
		pu = pu.SetPoolID(*id)
	}
	return pu
}

// SetPool sets the "pool" edge to the Pool entity.
func (pu *PositionUpdate) SetPool(p *Pool) *PositionUpdate {
	return pu.SetPoolID(p.ID)
}

// AddActivityIDs adds the "activity" edge to the PositionActivity entity by IDs.
func (pu *PositionUpdate) AddActivityIDs(ids ...string) *PositionUpdate {
	pu.mutation.AddActivityIDs(ids...)
	return pu
}

// AddActivity adds the "activity" edges to the PositionActivity entity.
func (pu *PositionUpdate) AddActivity(p ...*PositionActivity) *PositionUpdate {
	ids := make([]string, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return pu.AddActivityIDs(ids...)
}

// Mutation returns the PositionMutation object of the builder.
func (pu *PositionUpdate) Mutation() *PositionMutation {
	return pu.mutation
}

// ClearPool clears the "pool" edge to the Pool entity.
func (pu *PositionUpdate) ClearPool() *PositionUpdate {
	pu.mutation.ClearPool()
	return pu
}

// ClearActivity clears all "activity" edges to the PositionActivity entity.
func (pu *PositionUpdate) ClearActivity() *PositionUpdate {
	pu.mutation.ClearActivity()
	return pu
}

// RemoveActivityIDs removes the "activity" edge to PositionActivity entities by IDs.
func (pu *PositionUpdate) RemoveActivityIDs(ids ...string) *PositionUpdate {
	pu.mutation.RemoveActivityIDs(ids...)
	return pu
}

// RemoveActivity removes "activity" edges to PositionActivity entities.
func (pu *PositionUpdate) RemoveActivity(p ...*PositionActivity) *PositionUpdate {
	ids := make([]string, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return pu.RemoveActivityIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (pu *PositionUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, pu.sqlSave, pu.mutation, pu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (pu *PositionUpdate) SaveX(ctx context.Context) int {
	affected, err := pu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (pu *PositionUpdate) Exec(ctx context.Context) error {
	_, err := pu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (pu *PositionUpdate) ExecX(ctx context.Context) {
	if err := pu.Exec(ctx); err != nil {
		panic(err)
	}
}

func (pu *PositionUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(position.Table, position.Columns, sqlgraph.NewFieldSpec(position.FieldID, field.TypeString))
	if ps := pu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := pu.mutation.PositionAddress(); ok {
		_spec.SetField(position.FieldPositionAddress, field.TypeString, value)
	}
	if value, ok := pu.mutation.UserAddress(); ok {
		_spec.SetField(position.FieldUserAddress, field.TypeString, value)
	}
	if value, ok := pu.mutation.WalletAddress(); ok {
		_spec.SetField(position.FieldWalletAddress, field.TypeString, value)
	}
	if value, ok := pu.mutation.CollateralPool(); ok {
		_spec.SetField(position.FieldCollateralPool, field.TypeString, value)
	}
	if value, ok := pu.mutation.CollateralPoolName(); ok {
		_spec.SetField(position.FieldCollateralPoolName, field.TypeString, value)
	}
	if value, ok := pu.mutation.PositionId(); ok {
		_spec.SetField(position.FieldPositionId, field.TypeString, value)
	}
	if value, ok := pu.mutation.LockedCollateral(); ok {
		_spec.SetField(position.FieldLockedCollateral, field.TypeString, value)
	}
	if value, ok := pu.mutation.DebtValue(); ok {
		_spec.SetField(position.FieldDebtValue, field.TypeString, value)
	}
	if value, ok := pu.mutation.DebtShare(); ok {
		_spec.SetField(position.FieldDebtShare, field.TypeString, value)
	}
	if value, ok := pu.mutation.SafetyBuffer(); ok {
		_spec.SetField(position.FieldSafetyBuffer, field.TypeString, value)
	}
	if value, ok := pu.mutation.SafetyBufferInPercent(); ok {
		_spec.SetField(position.FieldSafetyBufferInPercent, field.TypeString, value)
	}
	if value, ok := pu.mutation.Tvl(); ok {
		_spec.SetField(position.FieldTvl, field.TypeString, value)
	}
	if value, ok := pu.mutation.PositionStatus(); ok {
		_spec.SetField(position.FieldPositionStatus, field.TypeString, value)
	}
	if value, ok := pu.mutation.LiquidationCount(); ok {
		_spec.SetField(position.FieldLiquidationCount, field.TypeString, value)
	}
	if value, ok := pu.mutation.BlockNumber(); ok {
		_spec.SetField(position.FieldBlockNumber, field.TypeString, value)
	}
	if value, ok := pu.mutation.BlockTimestamp(); ok {
		_spec.SetField(position.FieldBlockTimestamp, field.TypeString, value)
	}
	if value, ok := pu.mutation.Transaction(); ok {
		_spec.SetField(position.FieldTransaction, field.TypeString, value)
	}
	if pu.mutation.PoolCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   position.PoolTable,
			Columns: []string{position.PoolColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(pool.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pu.mutation.PoolIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   position.PoolTable,
			Columns: []string{position.PoolColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(pool.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if pu.mutation.ActivityCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   position.ActivityTable,
			Columns: []string{position.ActivityColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(positionactivity.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pu.mutation.RemovedActivityIDs(); len(nodes) > 0 && !pu.mutation.ActivityCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   position.ActivityTable,
			Columns: []string{position.ActivityColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(positionactivity.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pu.mutation.ActivityIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   position.ActivityTable,
			Columns: []string{position.ActivityColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(positionactivity.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, pu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{position.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	pu.mutation.done = true
	return n, nil
}

// PositionUpdateOne is the builder for updating a single Position entity.
type PositionUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *PositionMutation
}

// SetPositionAddress sets the "positionAddress" field.
func (puo *PositionUpdateOne) SetPositionAddress(s string) *PositionUpdateOne {
	puo.mutation.SetPositionAddress(s)
	return puo
}

// SetNillablePositionAddress sets the "positionAddress" field if the given value is not nil.
func (puo *PositionUpdateOne) SetNillablePositionAddress(s *string) *PositionUpdateOne {
	if s != nil {
		puo.SetPositionAddress(*s)
	}
	return puo
}

// SetUserAddress sets the "userAddress" field.
func (puo *PositionUpdateOne) SetUserAddress(s string) *PositionUpdateOne {
	puo.mutation.SetUserAddress(s)
	return puo
}

// SetNillableUserAddress sets the "userAddress" field if the given value is not nil.
func (puo *PositionUpdateOne) SetNillableUserAddress(s *string) *PositionUpdateOne {
	if s != nil {
		puo.SetUserAddress(*s)
	}
	return puo
}

// SetWalletAddress sets the "walletAddress" field.
func (puo *PositionUpdateOne) SetWalletAddress(s string) *PositionUpdateOne {
	puo.mutation.SetWalletAddress(s)
	return puo
}

// SetNillableWalletAddress sets the "walletAddress" field if the given value is not nil.
func (puo *PositionUpdateOne) SetNillableWalletAddress(s *string) *PositionUpdateOne {
	if s != nil {
		puo.SetWalletAddress(*s)
	}
	return puo
}

// SetCollateralPool sets the "collateralPool" field.
func (puo *PositionUpdateOne) SetCollateralPool(s string) *PositionUpdateOne {
	puo.mutation.SetCollateralPool(s)
	return puo
}

// SetNillableCollateralPool sets the "collateralPool" field if the given value is not nil.
func (puo *PositionUpdateOne) SetNillableCollateralPool(s *string) *PositionUpdateOne {
	if s != nil {
		puo.SetCollateralPool(*s)
	}
	return puo
}

// SetCollateralPoolName sets the "collateralPoolName" field.
func (puo *PositionUpdateOne) SetCollateralPoolName(s string) *PositionUpdateOne {
	puo.mutation.SetCollateralPoolName(s)
	return puo
}

// SetNillableCollateralPoolName sets the "collateralPoolName" field if the given value is not nil.
func (puo *PositionUpdateOne) SetNillableCollateralPoolName(s *string) *PositionUpdateOne {
	if s != nil {
		puo.SetCollateralPoolName(*s)
	}
	return puo
}

// SetPositionId sets the "positionId" field.
func (puo *PositionUpdateOne) SetPositionId(s string) *PositionUpdateOne {
	puo.mutation.SetPositionId(s)
	return puo
}

// SetNillablePositionId sets the "positionId" field if the given value is not nil.
func (puo *PositionUpdateOne) SetNillablePositionId(s *string) *PositionUpdateOne {
	if s != nil {
		puo.SetPositionId(*s)
	}
	return puo
}

// SetLockedCollateral sets the "lockedCollateral" field.
func (puo *PositionUpdateOne) SetLockedCollateral(s string) *PositionUpdateOne {
	puo.mutation.SetLockedCollateral(s)
	return puo
}

// SetNillableLockedCollateral sets the "lockedCollateral" field if the given value is not nil.
func (puo *PositionUpdateOne) SetNillableLockedCollateral(s *string) *PositionUpdateOne {
	if s != nil {
		puo.SetLockedCollateral(*s)
	}
	return puo
}

// SetDebtValue sets the "debtValue" field.
func (puo *PositionUpdateOne) SetDebtValue(s string) *PositionUpdateOne {
	puo.mutation.SetDebtValue(s)
	return puo
}

// SetNillableDebtValue sets the "debtValue" field if the given value is not nil.
func (puo *PositionUpdateOne) SetNillableDebtValue(s *string) *PositionUpdateOne {
	if s != nil {
		puo.SetDebtValue(*s)
	}
	return puo
}

// SetDebtShare sets the "debtShare" field.
func (puo *PositionUpdateOne) SetDebtShare(s string) *PositionUpdateOne {
	puo.mutation.SetDebtShare(s)
	return puo
}

// SetNillableDebtShare sets the "debtShare" field if the given value is not nil.
func (puo *PositionUpdateOne) SetNillableDebtShare(s *string) *PositionUpdateOne {
	if s != nil {
		puo.SetDebtShare(*s)
	}
	return puo
}

// SetSafetyBuffer sets the "safetyBuffer" field.
func (puo *PositionUpdateOne) SetSafetyBuffer(s string) *PositionUpdateOne {
	puo.mutation.SetSafetyBuffer(s)
	return puo
}

// SetNillableSafetyBuffer sets the "safetyBuffer" field if the given value is not nil.
func (puo *PositionUpdateOne) SetNillableSafetyBuffer(s *string) *PositionUpdateOne {
	if s != nil {
		puo.SetSafetyBuffer(*s)
	}
	return puo
}

// SetSafetyBufferInPercent sets the "safetyBufferInPercent" field.
func (puo *PositionUpdateOne) SetSafetyBufferInPercent(s string) *PositionUpdateOne {
	puo.mutation.SetSafetyBufferInPercent(s)
	return puo
}

// SetNillableSafetyBufferInPercent sets the "safetyBufferInPercent" field if the given value is not nil.
func (puo *PositionUpdateOne) SetNillableSafetyBufferInPercent(s *string) *PositionUpdateOne {
	if s != nil {
		puo.SetSafetyBufferInPercent(*s)
	}
	return puo
}

// SetTvl sets the "tvl" field.
func (puo *PositionUpdateOne) SetTvl(s string) *PositionUpdateOne {
	puo.mutation.SetTvl(s)
	return puo
}

// SetNillableTvl sets the "tvl" field if the given value is not nil.
func (puo *PositionUpdateOne) SetNillableTvl(s *string) *PositionUpdateOne {
	if s != nil {
		puo.SetTvl(*s)
	}
	return puo
}

// SetPositionStatus sets the "positionStatus" field.
func (puo *PositionUpdateOne) SetPositionStatus(s string) *PositionUpdateOne {
	puo.mutation.SetPositionStatus(s)
	return puo
}

// SetNillablePositionStatus sets the "positionStatus" field if the given value is not nil.
func (puo *PositionUpdateOne) SetNillablePositionStatus(s *string) *PositionUpdateOne {
	if s != nil {
		puo.SetPositionStatus(*s)
	}
	return puo
}

// SetLiquidationCount sets the "liquidationCount" field.
func (puo *PositionUpdateOne) SetLiquidationCount(s string) *PositionUpdateOne {
	puo.mutation.SetLiquidationCount(s)
	return puo
}

// SetNillableLiquidationCount sets the "liquidationCount" field if the given value is not nil.
func (puo *PositionUpdateOne) SetNillableLiquidationCount(s *string) *PositionUpdateOne {
	if s != nil {
		puo.SetLiquidationCount(*s)
	}
	return puo
}

// SetBlockNumber sets the "blockNumber" field.
func (puo *PositionUpdateOne) SetBlockNumber(s string) *PositionUpdateOne {
	puo.mutation.SetBlockNumber(s)
	return puo
}

// SetNillableBlockNumber sets the "blockNumber" field if the given value is not nil.
func (puo *PositionUpdateOne) SetNillableBlockNumber(s *string) *PositionUpdateOne {
	if s != nil {
		puo.SetBlockNumber(*s)
	}
	return puo
}

// SetBlockTimestamp sets the "blockTimestamp" field.
func (puo *PositionUpdateOne) SetBlockTimestamp(s string) *PositionUpdateOne {
	puo.mutation.SetBlockTimestamp(s)
	return puo
}

// SetNillableBlockTimestamp sets the "blockTimestamp" field if the given value is not nil.
func (puo *PositionUpdateOne) SetNillableBlockTimestamp(s *string) *PositionUpdateOne {
	if s != nil {
		puo.SetBlockTimestamp(*s)
	}
	return puo
}

// SetTransaction sets the "transaction" field.
func (puo *PositionUpdateOne) SetTransaction(s string) *PositionUpdateOne {
	puo.mutation.SetTransaction(s)
	return puo
}

// SetNillableTransaction sets the "transaction" field if the given value is not nil.
func (puo *PositionUpdateOne) SetNillableTransaction(s *string) *PositionUpdateOne {
	if s != nil {
		puo.SetTransaction(*s)
	}
	return puo
}

// SetPoolID sets the "pool" edge to the Pool entity by ID.
func (puo *PositionUpdateOne) SetPoolID(id string) *PositionUpdateOne {
	puo.mutation.SetPoolID(id)
	return puo
}

// SetNillablePoolID sets the "pool" edge to the Pool entity by ID if the given value is not nil.
func (puo *PositionUpdateOne) SetNillablePoolID(id *string) *PositionUpdateOne {
	if id != nil {
		puo = puo.SetPoolID(*id)
	}
	return puo
}

// SetPool sets the "pool" edge to the Pool entity.
func (puo *PositionUpdateOne) SetPool(p *Pool) *PositionUpdateOne {
	return puo.SetPoolID(p.ID)
}

// AddActivityIDs adds the "activity" edge to the PositionActivity entity by IDs.
func (puo *PositionUpdateOne) AddActivityIDs(ids ...string) *PositionUpdateOne {
	puo.mutation.AddActivityIDs(ids...)
	return puo
}

// AddActivity adds the "activity" edges to the PositionActivity entity.
func (puo *PositionUpdateOne) AddActivity(p ...*PositionActivity) *PositionUpdateOne {
	ids := make([]string, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return puo.AddActivityIDs(ids...)
}

// Mutation returns the PositionMutation object of the builder.
func (puo *PositionUpdateOne) Mutation() *PositionMutation {
	return puo.mutation
}

// ClearPool clears the "pool" edge to the Pool entity.
func (puo *PositionUpdateOne) ClearPool() *PositionUpdateOne {
	puo.mutation.ClearPool()
	return puo
}

// ClearActivity clears all "activity" edges to the PositionActivity entity.
func (puo *PositionUpdateOne) ClearActivity() *PositionUpdateOne {
	puo.mutation.ClearActivity()
	return puo
}

// RemoveActivityIDs removes the "activity" edge to PositionActivity entities by IDs.
func (puo *PositionUpdateOne) RemoveActivityIDs(ids ...string) *PositionUpdateOne {
	puo.mutation.RemoveActivityIDs(ids...)
	return puo
}

// RemoveActivity removes "activity" edges to PositionActivity entities.
func (puo *PositionUpdateOne) RemoveActivity(p ...*PositionActivity) *PositionUpdateOne {
	ids := make([]string, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return puo.RemoveActivityIDs(ids...)
}

// Where appends a list predicates to the PositionUpdate builder.
func (puo *PositionUpdateOne) Where(ps ...predicate.Position) *PositionUpdateOne {
	puo.mutation.Where(ps...)
	return puo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (puo *PositionUpdateOne) Select(field string, fields ...string) *PositionUpdateOne {
	puo.fields = append([]string{field}, fields...)
	return puo
}

// Save executes the query and returns the updated Position entity.
func (puo *PositionUpdateOne) Save(ctx context.Context) (*Position, error) {
	return withHooks(ctx, puo.sqlSave, puo.mutation, puo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (puo *PositionUpdateOne) SaveX(ctx context.Context) *Position {
	node, err := puo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (puo *PositionUpdateOne) Exec(ctx context.Context) error {
	_, err := puo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (puo *PositionUpdateOne) ExecX(ctx context.Context) {
	if err := puo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (puo *PositionUpdateOne) sqlSave(ctx context.Context) (_node *Position, err error) {
	_spec := sqlgraph.NewUpdateSpec(position.Table, position.Columns, sqlgraph.NewFieldSpec(position.FieldID, field.TypeString))
	id, ok := puo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Position.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := puo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, position.FieldID)
		for _, f := range fields {
			if !position.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != position.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := puo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := puo.mutation.PositionAddress(); ok {
		_spec.SetField(position.FieldPositionAddress, field.TypeString, value)
	}
	if value, ok := puo.mutation.UserAddress(); ok {
		_spec.SetField(position.FieldUserAddress, field.TypeString, value)
	}
	if value, ok := puo.mutation.WalletAddress(); ok {
		_spec.SetField(position.FieldWalletAddress, field.TypeString, value)
	}
	if value, ok := puo.mutation.CollateralPool(); ok {
		_spec.SetField(position.FieldCollateralPool, field.TypeString, value)
	}
	if value, ok := puo.mutation.CollateralPoolName(); ok {
		_spec.SetField(position.FieldCollateralPoolName, field.TypeString, value)
	}
	if value, ok := puo.mutation.PositionId(); ok {
		_spec.SetField(position.FieldPositionId, field.TypeString, value)
	}
	if value, ok := puo.mutation.LockedCollateral(); ok {
		_spec.SetField(position.FieldLockedCollateral, field.TypeString, value)
	}
	if value, ok := puo.mutation.DebtValue(); ok {
		_spec.SetField(position.FieldDebtValue, field.TypeString, value)
	}
	if value, ok := puo.mutation.DebtShare(); ok {
		_spec.SetField(position.FieldDebtShare, field.TypeString, value)
	}
	if value, ok := puo.mutation.SafetyBuffer(); ok {
		_spec.SetField(position.FieldSafetyBuffer, field.TypeString, value)
	}
	if value, ok := puo.mutation.SafetyBufferInPercent(); ok {
		_spec.SetField(position.FieldSafetyBufferInPercent, field.TypeString, value)
	}
	if value, ok := puo.mutation.Tvl(); ok {
		_spec.SetField(position.FieldTvl, field.TypeString, value)
	}
	if value, ok := puo.mutation.PositionStatus(); ok {
		_spec.SetField(position.FieldPositionStatus, field.TypeString, value)
	}
	if value, ok := puo.mutation.LiquidationCount(); ok {
		_spec.SetField(position.FieldLiquidationCount, field.TypeString, value)
	}
	if value, ok := puo.mutation.BlockNumber(); ok {
		_spec.SetField(position.FieldBlockNumber, field.TypeString, value)
	}
	if value, ok := puo.mutation.BlockTimestamp(); ok {
		_spec.SetField(position.FieldBlockTimestamp, field.TypeString, value)
	}
	if value, ok := puo.mutation.Transaction(); ok {
		_spec.SetField(position.FieldTransaction, field.TypeString, value)
	}
	if puo.mutation.PoolCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   position.PoolTable,
			Columns: []string{position.PoolColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(pool.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := puo.mutation.PoolIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   position.PoolTable,
			Columns: []string{position.PoolColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(pool.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if puo.mutation.ActivityCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   position.ActivityTable,
			Columns: []string{position.ActivityColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(positionactivity.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := puo.mutation.RemovedActivityIDs(); len(nodes) > 0 && !puo.mutation.ActivityCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   position.ActivityTable,
			Columns: []string{position.ActivityColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(positionactivity.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := puo.mutation.ActivityIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   position.ActivityTable,
			Columns: []string{position.ActivityColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(positionactivity.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Position{config: puo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, puo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{position.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	puo.mutation.done = true
	return _node, nil
}
