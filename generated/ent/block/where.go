// Code generated by ent, DO NOT EDIT.

package block

import (
	"entgo.io/ent/dialect/sql"
	"github.com/tsisar/starknet-indexer/generated/ent/predicate"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.Block {
	return predicate.Block(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.Block {
	return predicate.Block(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.Block {
	return predicate.Block(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.Block {
	return predicate.Block(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.Block {
	return predicate.Block(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.Block {
	return predicate.Block(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.Block {
	return predicate.Block(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.Block {
	return predicate.Block(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.Block {
	return predicate.Block(sql.FieldLTE(FieldID, id))
}

// Hash applies equality check predicate on the "hash" field. It's identical to HashEQ.
func Hash(v string) predicate.Block {
	return predicate.Block(sql.FieldEQ(FieldHash, v))
}

// Number applies equality check predicate on the "number" field. It's identical to NumberEQ.
func Number(v string) predicate.Block {
	return predicate.Block(sql.FieldEQ(FieldNumber, v))
}

// ParentHash applies equality check predicate on the "parentHash" field. It's identical to ParentHashEQ.
func ParentHash(v string) predicate.Block {
	return predicate.Block(sql.FieldEQ(FieldParentHash, v))
}

// Timestamp applies equality check predicate on the "timestamp" field. It's identical to TimestampEQ.
func Timestamp(v string) predicate.Block {
	return predicate.Block(sql.FieldEQ(FieldTimestamp, v))
}

// HashEQ applies the EQ predicate on the "hash" field.
func HashEQ(v string) predicate.Block {
	return predicate.Block(sql.FieldEQ(FieldHash, v))
}

// HashNEQ applies the NEQ predicate on the "hash" field.
func HashNEQ(v string) predicate.Block {
	return predicate.Block(sql.FieldNEQ(FieldHash, v))
}

// HashIn applies the In predicate on the "hash" field.
func HashIn(vs ...string) predicate.Block {
	return predicate.Block(sql.FieldIn(FieldHash, vs...))
}

// HashNotIn applies the NotIn predicate on the "hash" field.
func HashNotIn(vs ...string) predicate.Block {
	return predicate.Block(sql.FieldNotIn(FieldHash, vs...))
}

// HashGT applies the GT predicate on the "hash" field.
func HashGT(v string) predicate.Block {
	return predicate.Block(sql.FieldGT(FieldHash, v))
}

// HashGTE applies the GTE predicate on the "hash" field.
func HashGTE(v string) predicate.Block {
	return predicate.Block(sql.FieldGTE(FieldHash, v))
}

// HashLT applies the LT predicate on the "hash" field.
func HashLT(v string) predicate.Block {
	return predicate.Block(sql.FieldLT(FieldHash, v))
}

// HashLTE applies the LTE predicate on the "hash" field.
func HashLTE(v string) predicate.Block {
	return predicate.Block(sql.FieldLTE(FieldHash, v))
}

// HashContains applies the Contains predicate on the "hash" field.
func HashContains(v string) predicate.Block {
	return predicate.Block(sql.FieldContains(FieldHash, v))
}

// HashHasPrefix applies the HasPrefix predicate on the "hash" field.
func HashHasPrefix(v string) predicate.Block {
	return predicate.Block(sql.FieldHasPrefix(FieldHash, v))
}

// HashHasSuffix applies the HasSuffix predicate on the "hash" field.
func HashHasSuffix(v string) predicate.Block {
	return predicate.Block(sql.FieldHasSuffix(FieldHash, v))
}

// HashEqualFold applies the EqualFold predicate on the "hash" field.
func HashEqualFold(v string) predicate.Block {
	return predicate.Block(sql.FieldEqualFold(FieldHash, v))
}

// HashContainsFold applies the ContainsFold predicate on the "hash" field.
func HashContainsFold(v string) predicate.Block {
	return predicate.Block(sql.FieldContainsFold(FieldHash, v))
}

// NumberEQ applies the EQ predicate on the "number" field.
func NumberEQ(v string) predicate.Block {
	return predicate.Block(sql.FieldEQ(FieldNumber, v))
}

// NumberNEQ applies the NEQ predicate on the "number" field.
func NumberNEQ(v string) predicate.Block {
	return predicate.Block(sql.FieldNEQ(FieldNumber, v))
}

// NumberIn applies the In predicate on the "number" field.
func NumberIn(vs ...string) predicate.Block {
	return predicate.Block(sql.FieldIn(FieldNumber, vs...))
}

// NumberNotIn applies the NotIn predicate on the "number" field.
func NumberNotIn(vs ...string) predicate.Block {
	return predicate.Block(sql.FieldNotIn(FieldNumber, vs...))
}

// NumberGT applies the GT predicate on the "number" field.
func NumberGT(v string) predicate.Block {
	return predicate.Block(sql.FieldGT(FieldNumber, v))
}

// NumberGTE applies the GTE predicate on the "number" field.
func NumberGTE(v string) predicate.Block {
	return predicate.Block(sql.FieldGTE(FieldNumber, v))
}

// NumberLT applies the LT predicate on the "number" field.
func NumberLT(v string) predicate.Block {
	return predicate.Block(sql.FieldLT(FieldNumber, v))
}

// NumberLTE applies the LTE predicate on the "number" field.
func NumberLTE(v string) predicate.Block {
	return predicate.Block(sql.FieldLTE(FieldNumber, v))
}

// NumberContains applies the Contains predicate on the "number" field.
func NumberContains(v string) predicate.Block {
	return predicate.Block(sql.FieldContains(FieldNumber, v))
}

// NumberHasPrefix applies the HasPrefix predicate on the "number" field.
func NumberHasPrefix(v string) predicate.Block {
	return predicate.Block(sql.FieldHasPrefix(FieldNumber, v))
}

// NumberHasSuffix applies the HasSuffix predicate on the "number" field.
func NumberHasSuffix(v string) predicate.Block {
	return predicate.Block(sql.FieldHasSuffix(FieldNumber, v))
}

// NumberEqualFold applies the EqualFold predicate on the "number" field.
func NumberEqualFold(v string) predicate.Block {
	return predicate.Block(sql.FieldEqualFold(FieldNumber, v))
}

// NumberContainsFold applies the ContainsFold predicate on the "number" field.
func NumberContainsFold(v string) predicate.Block {
	return predicate.Block(sql.FieldContainsFold(FieldNumber, v))
}

// ParentHashEQ applies the EQ predicate on the "parentHash" field.
func ParentHashEQ(v string) predicate.Block {
	return predicate.Block(sql.FieldEQ(FieldParentHash, v))
}

// ParentHashNEQ applies the NEQ predicate on the "parentHash" field.
func ParentHashNEQ(v string) predicate.Block {
	return predicate.Block(sql.FieldNEQ(FieldParentHash, v))
}

// ParentHashIn applies the In predicate on the "parentHash" field.
func ParentHashIn(vs ...string) predicate.Block {
	return predicate.Block(sql.FieldIn(FieldParentHash, vs...))
}

// ParentHashNotIn applies the NotIn predicate on the "parentHash" field.
func ParentHashNotIn(vs ...string) predicate.Block {
	return predicate.Block(sql.FieldNotIn(FieldParentHash, vs...))
}

// ParentHashGT applies the GT predicate on the "parentHash" field.
func ParentHashGT(v string) predicate.Block {
	return predicate.Block(sql.FieldGT(FieldParentHash, v))
}

// ParentHashGTE applies the GTE predicate on the "parentHash" field.
func ParentHashGTE(v string) predicate.Block {
	return predicate.Block(sql.FieldGTE(FieldParentHash, v))
}

// ParentHashLT applies the LT predicate on the "parentHash" field.
func ParentHashLT(v string) predicate.Block {
	return predicate.Block(sql.FieldLT(FieldParentHash, v))
}

// ParentHashLTE applies the LTE predicate on the "parentHash" field.
func ParentHashLTE(v string) predicate.Block {
	return predicate.Block(sql.FieldLTE(FieldParentHash, v))
}

// ParentHashContains applies the Contains predicate on the "parentHash" field.
func ParentHashContains(v string) predicate.Block {
	return predicate.Block(sql.FieldContains(FieldParentHash, v))
}

// ParentHashHasPrefix applies the HasPrefix predicate on the "parentHash" field.
func ParentHashHasPrefix(v string) predicate.Block {
	return predicate.Block(sql.FieldHasPrefix(FieldParentHash, v))
}

// ParentHashHasSuffix applies the HasSuffix predicate on the "parentHash" field.
func ParentHashHasSuffix(v string) predicate.Block {
	return predicate.Block(sql.FieldHasSuffix(FieldParentHash, v))
}

// ParentHashEqualFold applies the EqualFold predicate on the "parentHash" field.
func ParentHashEqualFold(v string) predicate.Block {
	return predicate.Block(sql.FieldEqualFold(FieldParentHash, v))
}

// ParentHashContainsFold applies the ContainsFold predicate on the "parentHash" field.
func ParentHashContainsFold(v string) predicate.Block {
	return predicate.Block(sql.FieldContainsFold(FieldParentHash, v))
}

// TimestampEQ applies the EQ predicate on the "timestamp" field.
func TimestampEQ(v string) predicate.Block {
	return predicate.Block(sql.FieldEQ(FieldTimestamp, v))
}

// TimestampNEQ applies the NEQ predicate on the "timestamp" field.
func TimestampNEQ(v string) predicate.Block {
	return predicate.Block(sql.FieldNEQ(FieldTimestamp, v))
}

// TimestampIn applies the In predicate on the "timestamp" field.
func TimestampIn(vs ...string) predicate.Block {
	return predicate.Block(sql.FieldIn(FieldTimestamp, vs...))
}

// TimestampNotIn applies the NotIn predicate on the "timestamp" field.
func TimestampNotIn(vs ...string) predicate.Block {
	return predicate.Block(sql.FieldNotIn(FieldTimestamp, vs...))
}

// TimestampGT applies the GT predicate on the "timestamp" field.
func TimestampGT(v string) predicate.Block {
	return predicate.Block(sql.FieldGT(FieldTimestamp, v))
}

// TimestampGTE applies the GTE predicate on the "timestamp" field.
func TimestampGTE(v string) predicate.Block {
	return predicate.Block(sql.FieldGTE(FieldTimestamp, v))
}

// TimestampLT applies the LT predicate on the "timestamp" field.
func TimestampLT(v string) predicate.Block {
	return predicate.Block(sql.FieldLT(FieldTimestamp, v))
}

// TimestampLTE applies the LTE predicate on the "timestamp" field.
func TimestampLTE(v string) predicate.Block {
	return predicate.Block(sql.FieldLTE(FieldTimestamp, v))
}

// TimestampContains applies the Contains predicate on the "timestamp" field.
func TimestampContains(v string) predicate.Block {
	return predicate.Block(sql.FieldContains(FieldTimestamp, v))
}

// TimestampHasPrefix applies the HasPrefix predicate on the "timestamp" field.
func TimestampHasPrefix(v string) predicate.Block {
	return predicate.Block(sql.FieldHasPrefix(FieldTimestamp, v))
}

// TimestampHasSuffix applies the HasSuffix predicate on the "timestamp" field.
func TimestampHasSuffix(v string) predicate.Block {
	return predicate.Block(sql.FieldHasSuffix(FieldTimestamp, v))
}

// TimestampEqualFold applies the EqualFold predicate on the "timestamp" field.
func TimestampEqualFold(v string) predicate.Block {
	return predicate.Block(sql.FieldEqualFold(FieldTimestamp, v))
}

// TimestampContainsFold applies the ContainsFold predicate on the "timestamp" field.
func TimestampContainsFold(v string) predicate.Block {
	return predicate.Block(sql.FieldContainsFold(FieldTimestamp, v))
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Block) predicate.Block {
	return predicate.Block(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Block) predicate.Block {
	return predicate.Block(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Block) predicate.Block {
	return predicate.Block(sql.NotPredicates(p))
}
