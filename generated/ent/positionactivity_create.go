// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/tsisar/starknet-indexer/generated/ent/position"
	"github.com/tsisar/starknet-indexer/generated/ent/positionactivity"
)

// PositionActivityCreate is the builder for creating a PositionActivity entity.
type PositionActivityCreate struct {
	config
	mutation *PositionActivityMutation
	hooks    []Hook
}

// SetActivityState sets the "activityState" field.
func (pac *PositionActivityCreate) SetActivityState(s string) *PositionActivityCreate {
	pac.mutation.SetActivityState(s)
	return pac
}

// SetCollateralAmount sets the "collateralAmount" field.
func (pac *PositionActivityCreate) SetCollateralAmount(s string) *PositionActivityCreate {
	pac.mutation.SetCollateralAmount(s)
	return pac
}

// SetDebtAmount sets the "debtAmount" field.
func (pac *PositionActivityCreate) SetDebtAmount(s string) *PositionActivityCreate {
	pac.mutation.SetDebtAmount(s)
	return pac
}

// SetBlockNumber sets the "blockNumber" field.
func (pac *PositionActivityCreate) SetBlockNumber(s string) *PositionActivityCreate {
	pac.mutation.SetBlockNumber(s)
	return pac
}

// SetBlockTimestamp sets the "blockTimestamp" field.
func (pac *PositionActivityCreate) SetBlockTimestamp(s string) *PositionActivityCreate {
	pac.mutation.SetBlockTimestamp(s)
	return pac
}

// SetTransaction sets the "transaction" field.
func (pac *PositionActivityCreate) SetTransaction(s string) *PositionActivityCreate {
	pac.mutation.SetTransaction(s)
	return pac
}

// SetID sets the "id" field.
func (pac *PositionActivityCreate) SetID(s string) *PositionActivityCreate {
	pac.mutation.SetID(s)
	return pac
}

// SetPositionID sets the "position" edge to the Position entity by ID.
func (pac *PositionActivityCreate) SetPositionID(id string) *PositionActivityCreate {
	pac.mutation.SetPositionID(id)
	return pac
}

// SetNillablePositionID sets the "position" edge to the Position entity by ID if the given value is not nil.
func (pac *PositionActivityCreate) SetNillablePositionID(id *string) *PositionActivityCreate {
	if id != nil {
		pac = pac.SetPositionID(*id)
	}
	return pac
}

// SetPosition sets the "position" edge to the Position entity.
func (pac *PositionActivityCreate) SetPosition(p *Position) *PositionActivityCreate {
	return pac.SetPositionID(p.ID)
}

// Mutation returns the PositionActivityMutation object of the builder.
func (pac *PositionActivityCreate) Mutation() *PositionActivityMutation {
	return pac.mutation
}

// Save creates the PositionActivity in the database.
func (pac *PositionActivityCreate) Save(ctx context.Context) (*PositionActivity, error) {
	return withHooks(ctx, pac.sqlSave, pac.mutation, pac.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (pac *PositionActivityCreate) SaveX(ctx context.Context) *PositionActivity {
	v, err := pac.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (pac *PositionActivityCreate) Exec(ctx context.Context) error {
	_, err := pac.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (pac *PositionActivityCreate) ExecX(ctx context.Context) {
	if err := pac.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (pac *PositionActivityCreate) check() error {
	if _, ok := pac.mutation.ActivityState(); !ok {
		return &ValidationError{Name: "activityState", err: errors.New(`ent: missing required field "PositionActivity.activityState"`)}
	}
	if _, ok := pac.mutation.CollateralAmount(); !ok {
		return &ValidationError{Name: "collateralAmount", err: errors.New(`ent: missing required field "PositionActivity.collateralAmount"`)}
	}
	if _, ok := pac.mutation.DebtAmount(); !ok {
		return &ValidationError{Name: "debtAmount", err: errors.New(`ent: missing required field "PositionActivity.debtAmount"`)}
	}
	if _, ok := pac.mutation.BlockNumber(); !ok {
		return &ValidationError{Name: "blockNumber", err: errors.New(`ent: missing required field "PositionActivity.blockNumber"`)}
	}
	if _, ok := pac.mutation.BlockTimestamp(); !ok {
		return &ValidationError{Name: "blockTimestamp", err: errors.New(`ent: missing required field "PositionActivity.blockTimestamp"`)}
	}
	if _, ok := pac.mutation.Transaction(); !ok {
		return &ValidationError{Name: "transaction", err: errors.New(`ent: missing required field "PositionActivity.transaction"`)}
	}
	return nil
}

func (pac *PositionActivityCreate) sqlSave(ctx context.Context) (*PositionActivity, error) {
	if err := pac.check(); err != nil {
		return nil, err
	}
	_node, _spec := pac.createSpec()
	if err := sqlgraph.CreateNode(ctx, pac.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(string); ok {
			_node.ID = id
		} else {
			return nil, fmt.Errorf("unexpected PositionActivity.ID type: %T", _spec.ID.Value)
		}
	}
	pac.mutation.id = &_node.ID
	pac.mutation.done = true
	return _node, nil
}

func (pac *PositionActivityCreate) createSpec() (*PositionActivity, *sqlgraph.CreateSpec) {
	var (
		_node = &PositionActivity{config: pac.config}
		_spec = sqlgraph.NewCreateSpec(positionactivity.Table, sqlgraph.NewFieldSpec(positionactivity.FieldID, field.TypeString))
	)
	if id, ok := pac.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := pac.mutation.ActivityState(); ok {
		_spec.SetField(positionactivity.FieldActivityState, field.TypeString, value)
		_node.ActivityState = value
	}
	if value, ok := pac.mutation.CollateralAmount(); ok {
		_spec.SetField(positionactivity.FieldCollateralAmount, field.TypeString, value)
		_node.CollateralAmount = value
	}
	if value, ok := pac.mutation.DebtAmount(); ok {
		_spec.SetField(positionactivity.FieldDebtAmount, field.TypeString, value)
		_node.DebtAmount = value
	}
	if value, ok := pac.mutation.BlockNumber(); ok {
		_spec.SetField(positionactivity.FieldBlockNumber, field.TypeString, value)
		_node.BlockNumber = value
	}
	if value, ok := pac.mutation.BlockTimestamp(); ok {
		_spec.SetField(positionactivity.FieldBlockTimestamp, field.TypeString, value)
		_node.BlockTimestamp = value
	}
	if value, ok := pac.mutation.Transaction(); ok {
		_spec.SetField(positionactivity.FieldTransaction, field.TypeString, value)
		_node.Transaction = value
	}
	if nodes := pac.mutation.PositionIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   positionactivity.PositionTable,
			Columns: []string{positionactivity.PositionColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(position.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.position_activity_position = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// PositionActivityCreateBulk is the builder for creating many PositionActivity entities in bulk.
type PositionActivityCreateBulk struct {
	config
	err      error
	builders []*PositionActivityCreate
}

// Save creates the PositionActivity entities in the database.
func (pacb *PositionActivityCreateBulk) Save(ctx context.Context) ([]*PositionActivity, error) {
	if pacb.err != nil {
		return nil, pacb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(pacb.builders))
	nodes := make([]*PositionActivity, len(pacb.builders))
	mutators := make([]Mutator, len(pacb.builders))
	for i := range pacb.builders {
		func(i int, root context.Context) {
			builder := pacb.builders[i]
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*PositionActivityMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, pacb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, pacb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, pacb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (pacb *PositionActivityCreateBulk) SaveX(ctx context.Context) []*PositionActivity {
	v, err := pacb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (pacb *PositionActivityCreateBulk) Exec(ctx context.Context) error {
	_, err := pacb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (pacb *PositionActivityCreateBulk) ExecX(ctx context.Context) {
	if err := pacb.Exec(ctx); err != nil {
		panic(err)
	}
}
