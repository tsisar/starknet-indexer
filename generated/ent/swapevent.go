// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/tsisar/starknet-indexer/generated/ent/swapevent"
)

// SwapEvent is the model entity for the SwapEvent schema.
type SwapEvent struct {
	config `json:"-"`
	// ID of the ent.
	ID string `json:"id,omitempty"`
	// Fee holds the value of the "fee" field.
	Fee string `json:"fee,omitempty"`
	// Owner holds the value of the "owner" field.
	Owner string `json:"owner,omitempty"`
	// Value holds the value of the "value" field.
	Value string `json:"value,omitempty"`
	// IsStablecoinToTokenSwap holds the value of the "isStablecoinToTokenSwap" field.
	IsStablecoinToTokenSwap bool `json:"isStablecoinToTokenSwap,omitempty"`
	// IsTokenToStablecoinSwap holds the value of the "isTokenToStablecoinSwap" field.
	IsTokenToStablecoinSwap bool `json:"isTokenToStablecoinSwap,omitempty"`
	// BlockNumber holds the value of the "blockNumber" field.
	BlockNumber string `json:"blockNumber,omitempty"`
	// BlockTimestamp holds the value of the "blockTimestamp" field.
	BlockTimestamp string `json:"blockTimestamp,omitempty"`
	// Transaction holds the value of the "transaction" field.
	Transaction  string `json:"transaction,omitempty"`
	selectValues sql.SelectValues
}

// scanValues returns the types for scanning values from sql.Rows.
func (*SwapEvent) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case swapevent.FieldIsStablecoinToTokenSwap, swapevent.FieldIsTokenToStablecoinSwap:
			values[i] = new(sql.NullBool)
		case swapevent.FieldID, swapevent.FieldFee, swapevent.FieldOwner, swapevent.FieldValue, swapevent.FieldBlockNumber, swapevent.FieldBlockTimestamp, swapevent.FieldTransaction:
			values[i] = new(sql.NullString)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the SwapEvent fields.
func (se *SwapEvent) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case swapevent.FieldID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value.Valid {
				se.ID = value.String
			}
		case swapevent.FieldFee:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field fee", values[i])
			} else if value.Valid {
				se.Fee = value.String
			}
		case swapevent.FieldOwner:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field owner", values[i])
			} else if value.Valid {
				se.Owner = value.String
			}
		case swapevent.FieldValue:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field value", values[i])
			} else if value.Valid {
				se.Value = value.String
			}
		case swapevent.FieldIsStablecoinToTokenSwap:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field isStablecoinToTokenSwap", values[i])
			} else if value.Valid {
				se.IsStablecoinToTokenSwap = value.Bool
			}
		case swapevent.FieldIsTokenToStablecoinSwap:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field isTokenToStablecoinSwap", values[i])
			} else if value.Valid {
				se.IsTokenToStablecoinSwap = value.Bool
			}
		case swapevent.FieldBlockNumber:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field blockNumber", values[i])
			} else if value.Valid {
				se.BlockNumber = value.String
			}
		case swapevent.FieldBlockTimestamp:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field blockTimestamp", values[i])
			} else if value.Valid {
				se.BlockTimestamp = value.String
			}
		case swapevent.FieldTransaction:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field transaction", values[i])
			} else if value.Valid {
				se.Transaction = value.String
			}
		default:
			se.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// GetValue returns the ent.Value that was dynamically selected and assigned to the SwapEvent.
// This includes values selected through modifiers, order, etc.
func (se *SwapEvent) GetValue(name string) (ent.Value, error) {
	return se.selectValues.Get(name)
}

// Update returns a builder for updating this SwapEvent.
// Note that you need to call SwapEvent.Unwrap() before calling this method if this SwapEvent
// was returned from a transaction, and the transaction was committed or rolled back.
func (se *SwapEvent) Update() *SwapEventUpdateOne {
	return NewSwapEventClient(se.config).UpdateOne(se)
}

// Unwrap unwraps the SwapEvent entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (se *SwapEvent) Unwrap() *SwapEvent {
	_tx, ok := se.config.driver.(*txDriver)
	if !ok {
		panic("ent: SwapEvent is not a transactional entity")
	}
	se.config.driver = _tx.drv
	return se
}

// String implements the fmt.Stringer.
func (se *SwapEvent) String() string {
	var builder strings.Builder
	builder.WriteString("SwapEvent(")
	builder.WriteString(fmt.Sprintf("id=%v, ", se.ID))
	builder.WriteString("fee=")
	builder.WriteString(se.Fee)
	builder.WriteString(", ")
	builder.WriteString("owner=")
	builder.WriteString(se.Owner)
	builder.WriteString(", ")
	builder.WriteString("value=")
	builder.WriteString(se.Value)
	builder.WriteString(", ")
	builder.WriteString("isStablecoinToTokenSwap=")
	builder.WriteString(fmt.Sprintf("%v", se.IsStablecoinToTokenSwap))
	builder.WriteString(", ")
	builder.WriteString("isTokenToStablecoinSwap=")
	builder.WriteString(fmt.Sprintf("%v", se.IsTokenToStablecoinSwap))
	builder.WriteString(", ")
	builder.WriteString("blockNumber=")
	builder.WriteString(se.BlockNumber)
	builder.WriteString(", ")
	builder.WriteString("blockTimestamp=")
	builder.WriteString(se.BlockTimestamp)
	builder.WriteString(", ")
	builder.WriteString("transaction=")
	builder.WriteString(se.Transaction)
	builder.WriteByte(')')
	return builder.String()
}

// SwapEvents is a parsable slice of SwapEvent.
type SwapEvents []*SwapEvent
