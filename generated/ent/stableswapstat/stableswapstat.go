// Code generated by ent, DO NOT EDIT.

package stableswapstat

import (
	"entgo.io/ent/dialect/sql"
)

const (
	// Label holds the string label denoting the stableswapstat type in the database.
	Label = "stable_swap_stat"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldTotalTokenToStablecoinSwapEvents holds the string denoting the totaltokentostablecoinswapevents field in the database.
	FieldTotalTokenToStablecoinSwapEvents = "total_token_to_stablecoin_swap_events"
	// FieldTotalStablecoinToTokenSwapEvents holds the string denoting the totalstablecointotokenswapevents field in the database.
	FieldTotalStablecoinToTokenSwapEvents = "total_stablecoin_to_token_swap_events"
	// FieldRemainingDailySwapAmount holds the string denoting the remainingdailyswapamount field in the database.
	FieldRemainingDailySwapAmount = "remaining_daily_swap_amount"
	// FieldTokenToStablecoinTotalSwapValue holds the string denoting the tokentostablecointotalswapvalue field in the database.
	FieldTokenToStablecoinTotalSwapValue = "token_to_stablecoin_total_swap_value"
	// FieldStablecoinToTokenTotalSwapValue holds the string denoting the stablecointotokentotalswapvalue field in the database.
	FieldStablecoinToTokenTotalSwapValue = "stablecoin_to_token_total_swap_value"
	// Table holds the table name of the stableswapstat in the database.
	Table = "stable_swap_stats"
)

// Columns holds all SQL columns for stableswapstat fields.
var Columns = []string{
	FieldID,
	FieldTotalTokenToStablecoinSwapEvents,
	FieldTotalStablecoinToTokenSwapEvents,
	FieldRemainingDailySwapAmount,
	FieldTokenToStablecoinTotalSwapValue,
	FieldStablecoinToTokenTotalSwapValue,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

// OrderOption defines the ordering options for the StableSwapStat queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByTotalTokenToStablecoinSwapEvents orders the results by the totalTokenToStablecoinSwapEvents field.
func ByTotalTokenToStablecoinSwapEvents(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldTotalTokenToStablecoinSwapEvents, opts...).ToFunc()
}

// ByTotalStablecoinToTokenSwapEvents orders the results by the totalStablecoinToTokenSwapEvents field.
func ByTotalStablecoinToTokenSwapEvents(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldTotalStablecoinToTokenSwapEvents, opts...).ToFunc()
}

// ByRemainingDailySwapAmount orders the results by the remainingDailySwapAmount field.
func ByRemainingDailySwapAmount(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldRemainingDailySwapAmount, opts...).ToFunc()
}

// ByTokenToStablecoinTotalSwapValue orders the results by the tokenToStablecoinTotalSwapValue field.
func ByTokenToStablecoinTotalSwapValue(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldTokenToStablecoinTotalSwapValue, opts...).ToFunc()
}

// ByStablecoinToTokenTotalSwapValue orders the results by the stablecoinToTokenTotalSwapValue field.
func ByStablecoinToTokenTotalSwapValue(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldStablecoinToTokenTotalSwapValue, opts...).ToFunc()
}
