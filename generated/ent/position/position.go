// Code generated by ent, DO NOT EDIT.

package position

import (
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the position type in the database.
	Label = "position"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldPositionAddress holds the string denoting the positionaddress field in the database.
	FieldPositionAddress = "position_address"
	// FieldUserAddress holds the string denoting the useraddress field in the database.
	FieldUserAddress = "user_address"
	// FieldWalletAddress holds the string denoting the walletaddress field in the database.
	FieldWalletAddress = "wallet_address"
	// FieldCollateralPool holds the string denoting the collateralpool field in the database.
	FieldCollateralPool = "collateral_pool"
	// FieldCollateralPoolName holds the string denoting the collateralpoolname field in the database.
	FieldCollateralPoolName = "collateral_pool_name"
	// FieldPositionId holds the string denoting the positionid field in the database.
	FieldPositionId = "position_id"
	// FieldLockedCollateral holds the string denoting the lockedcollateral field in the database.
	FieldLockedCollateral = "locked_collateral"
	// FieldDebtValue holds the string denoting the debtvalue field in the database.
	FieldDebtValue = "debt_value"
	// FieldDebtShare holds the string denoting the debtshare field in the database.
	FieldDebtShare = "debt_share"
	// FieldSafetyBuffer holds the string denoting the safetybuffer field in the database.
	FieldSafetyBuffer = "safety_buffer"
	// FieldSafetyBufferInPercent holds the string denoting the safetybufferinpercent field in the database.
	FieldSafetyBufferInPercent = "safety_buffer_in_percent"
	// FieldTvl holds the string denoting the tvl field in the database.
	FieldTvl = "tvl"
	// FieldPositionStatus holds the string denoting the positionstatus field in the database.
	FieldPositionStatus = "position_status"
	// FieldLiquidationCount holds the string denoting the liquidationcount field in the database.
	FieldLiquidationCount = "liquidation_count"
	// FieldBlockNumber holds the string denoting the blocknumber field in the database.
	FieldBlockNumber = "block_number"
	// FieldBlockTimestamp holds the string denoting the blocktimestamp field in the database.
	FieldBlockTimestamp = "block_timestamp"
	// FieldTransaction holds the string denoting the transaction field in the database.
	FieldTransaction = "transaction"
	// EdgePool holds the string denoting the pool edge name in mutations.
	EdgePool = "pool"
	// EdgeActivity holds the string denoting the activity edge name in mutations.
	EdgeActivity = "activity"
	// Table holds the table name of the position in the database.
	Table = "positions"
	// PoolTable is the table that holds the pool relation/edge.
	PoolTable = "positions"
	// PoolInverseTable is the table name for the Pool entity.
	// It exists in this package in order to avoid circular dependency with the "pool" package.
	PoolInverseTable = "pools"
	// PoolColumn is the table column denoting the pool relation/edge.
	PoolColumn = "position_pool"
	// ActivityTable is the table that holds the activity relation/edge.
	ActivityTable = "position_activities"
	// ActivityInverseTable is the table name for the PositionActivity entity.
	// It exists in this package in order to avoid circular dependency with the "positionactivity" package.
	ActivityInverseTable = "position_activities"
	// ActivityColumn is the table column denoting the activity relation/edge.
	ActivityColumn = "position_activity"
)

// Columns holds all SQL columns for position fields.
var Columns = []string{
	FieldID,
	FieldPositionAddress,
	FieldUserAddress,
	FieldWalletAddress,
	FieldCollateralPool,
	FieldCollateralPoolName,
	FieldPositionId,
	FieldLockedCollateral,
	FieldDebtValue,
	FieldDebtShare,
	FieldSafetyBuffer,
	FieldSafetyBufferInPercent,
	FieldTvl,
	FieldPositionStatus,
	FieldLiquidationCount,
	FieldBlockNumber,
	FieldBlockTimestamp,
	FieldTransaction,
}

// ForeignKeys holds the SQL foreign-keys that are owned by the "positions"
// table and are not defined as standalone fields in the schema.
var ForeignKeys = []string{
	"pool_positions",
	"position_pool",
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	for i := range ForeignKeys {
		if column == ForeignKeys[i] {
			return true
		}
	}
	return false
}

// OrderOption defines the ordering options for the Position queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByPositionAddress orders the results by the positionAddress field.
func ByPositionAddress(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldPositionAddress, opts...).ToFunc()
}

// ByUserAddress orders the results by the userAddress field.
func ByUserAddress(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUserAddress, opts...).ToFunc()
}

// ByWalletAddress orders the results by the walletAddress field.
func ByWalletAddress(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldWalletAddress, opts...).ToFunc()
}

// ByCollateralPool orders the results by the collateralPool field.
func ByCollateralPool(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCollateralPool, opts...).ToFunc()
}

// ByCollateralPoolName orders the results by the collateralPoolName field.
func ByCollateralPoolName(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCollateralPoolName, opts...).ToFunc()
}

// ByPositionId orders the results by the positionId field.
func ByPositionId(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldPositionId, opts...).ToFunc()
}

// ByLockedCollateral orders the results by the lockedCollateral field.
func ByLockedCollateral(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldLockedCollateral, opts...).ToFunc()
}

// ByDebtValue orders the results by the debtValue field.
func ByDebtValue(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDebtValue, opts...).ToFunc()
}

// ByDebtShare orders the results by the debtShare field.
func ByDebtShare(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDebtShare, opts...).ToFunc()
}

// BySafetyBuffer orders the results by the safetyBuffer field.
func BySafetyBuffer(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldSafetyBuffer, opts...).ToFunc()
}

// BySafetyBufferInPercent orders the results by the safetyBufferInPercent field.
func BySafetyBufferInPercent(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldSafetyBufferInPercent, opts...).ToFunc()
}

// ByTvl orders the results by the tvl field.
func ByTvl(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldTvl, opts...).ToFunc()
}

// ByPositionStatus orders the results by the positionStatus field.
func ByPositionStatus(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldPositionStatus, opts...).ToFunc()
}

// ByLiquidationCount orders the results by the liquidationCount field.
func ByLiquidationCount(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldLiquidationCount, opts...).ToFunc()
}

// ByBlockNumber orders the results by the blockNumber field.
func ByBlockNumber(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldBlockNumber, opts...).ToFunc()
}

// ByBlockTimestamp orders the results by the blockTimestamp field.
func ByBlockTimestamp(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldBlockTimestamp, opts...).ToFunc()
}

// ByTransaction orders the results by the transaction field.
func ByTransaction(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldTransaction, opts...).ToFunc()
}

// ByPoolField orders the results by pool field.
func ByPoolField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newPoolStep(), sql.OrderByField(field, opts...))
	}
}

// ByActivityCount orders the results by activity count.
func ByActivityCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newActivityStep(), opts...)
	}
}

// ByActivity orders the results by activity terms.
func ByActivity(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newActivityStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}
func newPoolStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(PoolInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, false, PoolTable, PoolColumn),
	)
}
func newActivityStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(ActivityInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, ActivityTable, ActivityColumn),
	)
}
