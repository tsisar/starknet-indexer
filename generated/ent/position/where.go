// Code generated by ent, DO NOT EDIT.

package position

import (
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/Tsisar/starknet-indexer/generated/ent/predicate"
)

// ID filters vertices based on their ID field.
func ID(id string) predicate.Position {
	return predicate.Position(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id string) predicate.Position {
	return predicate.Position(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id string) predicate.Position {
	return predicate.Position(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...string) predicate.Position {
	return predicate.Position(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...string) predicate.Position {
	return predicate.Position(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id string) predicate.Position {
	return predicate.Position(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id string) predicate.Position {
	return predicate.Position(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id string) predicate.Position {
	return predicate.Position(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id string) predicate.Position {
	return predicate.Position(sql.FieldLTE(FieldID, id))
}

// IDEqualFold applies the EqualFold predicate on the ID field.
func IDEqualFold(id string) predicate.Position {
	return predicate.Position(sql.FieldEqualFold(FieldID, id))
}

// IDContainsFold applies the ContainsFold predicate on the ID field.
func IDContainsFold(id string) predicate.Position {
	return predicate.Position(sql.FieldContainsFold(FieldID, id))
}

// PositionAddress applies equality check predicate on the "positionAddress" field. It's identical to PositionAddressEQ.
func PositionAddress(v string) predicate.Position {
	return predicate.Position(sql.FieldEQ(FieldPositionAddress, v))
}

// UserAddress applies equality check predicate on the "userAddress" field. It's identical to UserAddressEQ.
func UserAddress(v string) predicate.Position {
	return predicate.Position(sql.FieldEQ(FieldUserAddress, v))
}

// WalletAddress applies equality check predicate on the "walletAddress" field. It's identical to WalletAddressEQ.
func WalletAddress(v string) predicate.Position {
	return predicate.Position(sql.FieldEQ(FieldWalletAddress, v))
}

// CollateralPool applies equality check predicate on the "collateralPool" field. It's identical to CollateralPoolEQ.
func CollateralPool(v string) predicate.Position {
	return predicate.Position(sql.FieldEQ(FieldCollateralPool, v))
}

// CollateralPoolName applies equality check predicate on the "collateralPoolName" field. It's identical to CollateralPoolNameEQ.
func CollateralPoolName(v string) predicate.Position {
	return predicate.Position(sql.FieldEQ(FieldCollateralPoolName, v))
}

// PositionId applies equality check predicate on the "positionId" field. It's identical to PositionIdEQ.
func PositionId(v string) predicate.Position {
	return predicate.Position(sql.FieldEQ(FieldPositionId, v))
}

// LockedCollateral applies equality check predicate on the "lockedCollateral" field. It's identical to LockedCollateralEQ.
func LockedCollateral(v string) predicate.Position {
	return predicate.Position(sql.FieldEQ(FieldLockedCollateral, v))
}

// DebtValue applies equality check predicate on the "debtValue" field. It's identical to DebtValueEQ.
func DebtValue(v string) predicate.Position {
	return predicate.Position(sql.FieldEQ(FieldDebtValue, v))
}

// DebtShare applies equality check predicate on the "debtShare" field. It's identical to DebtShareEQ.
func DebtShare(v string) predicate.Position {
	return predicate.Position(sql.FieldEQ(FieldDebtShare, v))
}

// SafetyBuffer applies equality check predicate on the "safetyBuffer" field. It's identical to SafetyBufferEQ.
func SafetyBuffer(v string) predicate.Position {
	return predicate.Position(sql.FieldEQ(FieldSafetyBuffer, v))
}

// SafetyBufferInPercent applies equality check predicate on the "safetyBufferInPercent" field. It's identical to SafetyBufferInPercentEQ.
func SafetyBufferInPercent(v string) predicate.Position {
	return predicate.Position(sql.FieldEQ(FieldSafetyBufferInPercent, v))
}

// Tvl applies equality check predicate on the "tvl" field. It's identical to TvlEQ.
func Tvl(v string) predicate.Position {
	return predicate.Position(sql.FieldEQ(FieldTvl, v))
}

// PositionStatus applies equality check predicate on the "positionStatus" field. It's identical to PositionStatusEQ.
func PositionStatus(v string) predicate.Position {
	return predicate.Position(sql.FieldEQ(FieldPositionStatus, v))
}

// LiquidationCount applies equality check predicate on the "liquidationCount" field. It's identical to LiquidationCountEQ.
func LiquidationCount(v string) predicate.Position {
	return predicate.Position(sql.FieldEQ(FieldLiquidationCount, v))
}

// BlockNumber applies equality check predicate on the "blockNumber" field. It's identical to BlockNumberEQ.
func BlockNumber(v string) predicate.Position {
	return predicate.Position(sql.FieldEQ(FieldBlockNumber, v))
}

// BlockTimestamp applies equality check predicate on the "blockTimestamp" field. It's identical to BlockTimestampEQ.
func BlockTimestamp(v string) predicate.Position {
	return predicate.Position(sql.FieldEQ(FieldBlockTimestamp, v))
}

// Transaction applies equality check predicate on the "transaction" field. It's identical to TransactionEQ.
func Transaction(v string) predicate.Position {
	return predicate.Position(sql.FieldEQ(FieldTransaction, v))
}

// PositionAddressEQ applies the EQ predicate on the "positionAddress" field.
func PositionAddressEQ(v string) predicate.Position {
	return predicate.Position(sql.FieldEQ(FieldPositionAddress, v))
}

// PositionAddressNEQ applies the NEQ predicate on the "positionAddress" field.
func PositionAddressNEQ(v string) predicate.Position {
	return predicate.Position(sql.FieldNEQ(FieldPositionAddress, v))
}

// PositionAddressIn applies the In predicate on the "positionAddress" field.
func PositionAddressIn(vs ...string) predicate.Position {
	return predicate.Position(sql.FieldIn(FieldPositionAddress, vs...))
}

// PositionAddressNotIn applies the NotIn predicate on the "positionAddress" field.
func PositionAddressNotIn(vs ...string) predicate.Position {
	return predicate.Position(sql.FieldNotIn(FieldPositionAddress, vs...))
}

// PositionAddressGT applies the GT predicate on the "positionAddress" field.
func PositionAddressGT(v string) predicate.Position {
	return predicate.Position(sql.FieldGT(FieldPositionAddress, v))
}

// PositionAddressGTE applies the GTE predicate on the "positionAddress" field.
func PositionAddressGTE(v string) predicate.Position {
	return predicate.Position(sql.FieldGTE(FieldPositionAddress, v))
}

// PositionAddressLT applies the LT predicate on the "positionAddress" field.
func PositionAddressLT(v string) predicate.Position {
	return predicate.Position(sql.FieldLT(FieldPositionAddress, v))
}

// PositionAddressLTE applies the LTE predicate on the "positionAddress" field.
func PositionAddressLTE(v string) predicate.Position {
	return predicate.Position(sql.FieldLTE(FieldPositionAddress, v))
}

// PositionAddressContains applies the Contains predicate on the "positionAddress" field.
func PositionAddressContains(v string) predicate.Position {
	return predicate.Position(sql.FieldContains(FieldPositionAddress, v))
}

// PositionAddressHasPrefix applies the HasPrefix predicate on the "positionAddress" field.
func PositionAddressHasPrefix(v string) predicate.Position {
	return predicate.Position(sql.FieldHasPrefix(FieldPositionAddress, v))
}

// PositionAddressHasSuffix applies the HasSuffix predicate on the "positionAddress" field.
func PositionAddressHasSuffix(v string) predicate.Position {
	return predicate.Position(sql.FieldHasSuffix(FieldPositionAddress, v))
}

// PositionAddressEqualFold applies the EqualFold predicate on the "positionAddress" field.
func PositionAddressEqualFold(v string) predicate.Position {
	return predicate.Position(sql.FieldEqualFold(FieldPositionAddress, v))
}

// PositionAddressContainsFold applies the ContainsFold predicate on the "positionAddress" field.
func PositionAddressContainsFold(v string) predicate.Position {
	return predicate.Position(sql.FieldContainsFold(FieldPositionAddress, v))
}

// UserAddressEQ applies the EQ predicate on the "userAddress" field.
func UserAddressEQ(v string) predicate.Position {
	return predicate.Position(sql.FieldEQ(FieldUserAddress, v))
}

// UserAddressNEQ applies the NEQ predicate on the "userAddress" field.
func UserAddressNEQ(v string) predicate.Position {
	return predicate.Position(sql.FieldNEQ(FieldUserAddress, v))
}

// UserAddressIn applies the In predicate on the "userAddress" field.
func UserAddressIn(vs ...string) predicate.Position {
	return predicate.Position(sql.FieldIn(FieldUserAddress, vs...))
}

// UserAddressNotIn applies the NotIn predicate on the "userAddress" field.
func UserAddressNotIn(vs ...string) predicate.Position {
	return predicate.Position(sql.FieldNotIn(FieldUserAddress, vs...))
}

// UserAddressGT applies the GT predicate on the "userAddress" field.
func UserAddressGT(v string) predicate.Position {
	return predicate.Position(sql.FieldGT(FieldUserAddress, v))
}

// UserAddressGTE applies the GTE predicate on the "userAddress" field.
func UserAddressGTE(v string) predicate.Position {
	return predicate.Position(sql.FieldGTE(FieldUserAddress, v))
}

// UserAddressLT applies the LT predicate on the "userAddress" field.
func UserAddressLT(v string) predicate.Position {
	return predicate.Position(sql.FieldLT(FieldUserAddress, v))
}

// UserAddressLTE applies the LTE predicate on the "userAddress" field.
func UserAddressLTE(v string) predicate.Position {
	return predicate.Position(sql.FieldLTE(FieldUserAddress, v))
}

// UserAddressContains applies the Contains predicate on the "userAddress" field.
func UserAddressContains(v string) predicate.Position {
	return predicate.Position(sql.FieldContains(FieldUserAddress, v))
}

// UserAddressHasPrefix applies the HasPrefix predicate on the "userAddress" field.
func UserAddressHasPrefix(v string) predicate.Position {
	return predicate.Position(sql.FieldHasPrefix(FieldUserAddress, v))
}

// UserAddressHasSuffix applies the HasSuffix predicate on the "userAddress" field.
func UserAddressHasSuffix(v string) predicate.Position {
	return predicate.Position(sql.FieldHasSuffix(FieldUserAddress, v))
}

// UserAddressEqualFold applies the EqualFold predicate on the "userAddress" field.
func UserAddressEqualFold(v string) predicate.Position {
	return predicate.Position(sql.FieldEqualFold(FieldUserAddress, v))
}

// UserAddressContainsFold applies the ContainsFold predicate on the "userAddress" field.
func UserAddressContainsFold(v string) predicate.Position {
	return predicate.Position(sql.FieldContainsFold(FieldUserAddress, v))
}

// WalletAddressEQ applies the EQ predicate on the "walletAddress" field.
func WalletAddressEQ(v string) predicate.Position {
	return predicate.Position(sql.FieldEQ(FieldWalletAddress, v))
}

// WalletAddressNEQ applies the NEQ predicate on the "walletAddress" field.
func WalletAddressNEQ(v string) predicate.Position {
	return predicate.Position(sql.FieldNEQ(FieldWalletAddress, v))
}

// WalletAddressIn applies the In predicate on the "walletAddress" field.
func WalletAddressIn(vs ...string) predicate.Position {
	return predicate.Position(sql.FieldIn(FieldWalletAddress, vs...))
}

// WalletAddressNotIn applies the NotIn predicate on the "walletAddress" field.
func WalletAddressNotIn(vs ...string) predicate.Position {
	return predicate.Position(sql.FieldNotIn(FieldWalletAddress, vs...))
}

// WalletAddressGT applies the GT predicate on the "walletAddress" field.
func WalletAddressGT(v string) predicate.Position {
	return predicate.Position(sql.FieldGT(FieldWalletAddress, v))
}

// WalletAddressGTE applies the GTE predicate on the "walletAddress" field.
func WalletAddressGTE(v string) predicate.Position {
	return predicate.Position(sql.FieldGTE(FieldWalletAddress, v))
}

// WalletAddressLT applies the LT predicate on the "walletAddress" field.
func WalletAddressLT(v string) predicate.Position {
	return predicate.Position(sql.FieldLT(FieldWalletAddress, v))
}

// WalletAddressLTE applies the LTE predicate on the "walletAddress" field.
func WalletAddressLTE(v string) predicate.Position {
	return predicate.Position(sql.FieldLTE(FieldWalletAddress, v))
}

// WalletAddressContains applies the Contains predicate on the "walletAddress" field.
func WalletAddressContains(v string) predicate.Position {
	return predicate.Position(sql.FieldContains(FieldWalletAddress, v))
}

// WalletAddressHasPrefix applies the HasPrefix predicate on the "walletAddress" field.
func WalletAddressHasPrefix(v string) predicate.Position {
	return predicate.Position(sql.FieldHasPrefix(FieldWalletAddress, v))
}

// WalletAddressHasSuffix applies the HasSuffix predicate on the "walletAddress" field.
func WalletAddressHasSuffix(v string) predicate.Position {
	return predicate.Position(sql.FieldHasSuffix(FieldWalletAddress, v))
}

// WalletAddressEqualFold applies the EqualFold predicate on the "walletAddress" field.
func WalletAddressEqualFold(v string) predicate.Position {
	return predicate.Position(sql.FieldEqualFold(FieldWalletAddress, v))
}

// WalletAddressContainsFold applies the ContainsFold predicate on the "walletAddress" field.
func WalletAddressContainsFold(v string) predicate.Position {
	return predicate.Position(sql.FieldContainsFold(FieldWalletAddress, v))
}

// CollateralPoolEQ applies the EQ predicate on the "collateralPool" field.
func CollateralPoolEQ(v string) predicate.Position {
	return predicate.Position(sql.FieldEQ(FieldCollateralPool, v))
}

// CollateralPoolNEQ applies the NEQ predicate on the "collateralPool" field.
func CollateralPoolNEQ(v string) predicate.Position {
	return predicate.Position(sql.FieldNEQ(FieldCollateralPool, v))
}

// CollateralPoolIn applies the In predicate on the "collateralPool" field.
func CollateralPoolIn(vs ...string) predicate.Position {
	return predicate.Position(sql.FieldIn(FieldCollateralPool, vs...))
}

// CollateralPoolNotIn applies the NotIn predicate on the "collateralPool" field.
func CollateralPoolNotIn(vs ...string) predicate.Position {
	return predicate.Position(sql.FieldNotIn(FieldCollateralPool, vs...))
}

// CollateralPoolGT applies the GT predicate on the "collateralPool" field.
func CollateralPoolGT(v string) predicate.Position {
	return predicate.Position(sql.FieldGT(FieldCollateralPool, v))
}

// CollateralPoolGTE applies the GTE predicate on the "collateralPool" field.
func CollateralPoolGTE(v string) predicate.Position {
	return predicate.Position(sql.FieldGTE(FieldCollateralPool, v))
}

// CollateralPoolLT applies the LT predicate on the "collateralPool" field.
func CollateralPoolLT(v string) predicate.Position {
	return predicate.Position(sql.FieldLT(FieldCollateralPool, v))
}

// CollateralPoolLTE applies the LTE predicate on the "collateralPool" field.
func CollateralPoolLTE(v string) predicate.Position {
	return predicate.Position(sql.FieldLTE(FieldCollateralPool, v))
}

// CollateralPoolContains applies the Contains predicate on the "collateralPool" field.
func CollateralPoolContains(v string) predicate.Position {
	return predicate.Position(sql.FieldContains(FieldCollateralPool, v))
}

// CollateralPoolHasPrefix applies the HasPrefix predicate on the "collateralPool" field.
func CollateralPoolHasPrefix(v string) predicate.Position {
	return predicate.Position(sql.FieldHasPrefix(FieldCollateralPool, v))
}

// CollateralPoolHasSuffix applies the HasSuffix predicate on the "collateralPool" field.
func CollateralPoolHasSuffix(v string) predicate.Position {
	return predicate.Position(sql.FieldHasSuffix(FieldCollateralPool, v))
}

// CollateralPoolEqualFold applies the EqualFold predicate on the "collateralPool" field.
func CollateralPoolEqualFold(v string) predicate.Position {
	return predicate.Position(sql.FieldEqualFold(FieldCollateralPool, v))
}

// CollateralPoolContainsFold applies the ContainsFold predicate on the "collateralPool" field.
func CollateralPoolContainsFold(v string) predicate.Position {
	return predicate.Position(sql.FieldContainsFold(FieldCollateralPool, v))
}

// CollateralPoolNameEQ applies the EQ predicate on the "collateralPoolName" field.
func CollateralPoolNameEQ(v string) predicate.Position {
	return predicate.Position(sql.FieldEQ(FieldCollateralPoolName, v))
}

// CollateralPoolNameNEQ applies the NEQ predicate on the "collateralPoolName" field.
func CollateralPoolNameNEQ(v string) predicate.Position {
	return predicate.Position(sql.FieldNEQ(FieldCollateralPoolName, v))
}

// CollateralPoolNameIn applies the In predicate on the "collateralPoolName" field.
func CollateralPoolNameIn(vs ...string) predicate.Position {
	return predicate.Position(sql.FieldIn(FieldCollateralPoolName, vs...))
}

// CollateralPoolNameNotIn applies the NotIn predicate on the "collateralPoolName" field.
func CollateralPoolNameNotIn(vs ...string) predicate.Position {
	return predicate.Position(sql.FieldNotIn(FieldCollateralPoolName, vs...))
}

// CollateralPoolNameGT applies the GT predicate on the "collateralPoolName" field.
func CollateralPoolNameGT(v string) predicate.Position {
	return predicate.Position(sql.FieldGT(FieldCollateralPoolName, v))
}

// CollateralPoolNameGTE applies the GTE predicate on the "collateralPoolName" field.
func CollateralPoolNameGTE(v string) predicate.Position {
	return predicate.Position(sql.FieldGTE(FieldCollateralPoolName, v))
}

// CollateralPoolNameLT applies the LT predicate on the "collateralPoolName" field.
func CollateralPoolNameLT(v string) predicate.Position {
	return predicate.Position(sql.FieldLT(FieldCollateralPoolName, v))
}

// CollateralPoolNameLTE applies the LTE predicate on the "collateralPoolName" field.
func CollateralPoolNameLTE(v string) predicate.Position {
	return predicate.Position(sql.FieldLTE(FieldCollateralPoolName, v))
}

// CollateralPoolNameContains applies the Contains predicate on the "collateralPoolName" field.
func CollateralPoolNameContains(v string) predicate.Position {
	return predicate.Position(sql.FieldContains(FieldCollateralPoolName, v))
}

// CollateralPoolNameHasPrefix applies the HasPrefix predicate on the "collateralPoolName" field.
func CollateralPoolNameHasPrefix(v string) predicate.Position {
	return predicate.Position(sql.FieldHasPrefix(FieldCollateralPoolName, v))
}

// CollateralPoolNameHasSuffix applies the HasSuffix predicate on the "collateralPoolName" field.
func CollateralPoolNameHasSuffix(v string) predicate.Position {
	return predicate.Position(sql.FieldHasSuffix(FieldCollateralPoolName, v))
}

// CollateralPoolNameEqualFold applies the EqualFold predicate on the "collateralPoolName" field.
func CollateralPoolNameEqualFold(v string) predicate.Position {
	return predicate.Position(sql.FieldEqualFold(FieldCollateralPoolName, v))
}

// CollateralPoolNameContainsFold applies the ContainsFold predicate on the "collateralPoolName" field.
func CollateralPoolNameContainsFold(v string) predicate.Position {
	return predicate.Position(sql.FieldContainsFold(FieldCollateralPoolName, v))
}

// PositionIdEQ applies the EQ predicate on the "positionId" field.
func PositionIdEQ(v string) predicate.Position {
	return predicate.Position(sql.FieldEQ(FieldPositionId, v))
}

// PositionIdNEQ applies the NEQ predicate on the "positionId" field.
func PositionIdNEQ(v string) predicate.Position {
	return predicate.Position(sql.FieldNEQ(FieldPositionId, v))
}

// PositionIdIn applies the In predicate on the "positionId" field.
func PositionIdIn(vs ...string) predicate.Position {
	return predicate.Position(sql.FieldIn(FieldPositionId, vs...))
}

// PositionIdNotIn applies the NotIn predicate on the "positionId" field.
func PositionIdNotIn(vs ...string) predicate.Position {
	return predicate.Position(sql.FieldNotIn(FieldPositionId, vs...))
}

// PositionIdGT applies the GT predicate on the "positionId" field.
func PositionIdGT(v string) predicate.Position {
	return predicate.Position(sql.FieldGT(FieldPositionId, v))
}

// PositionIdGTE applies the GTE predicate on the "positionId" field.
func PositionIdGTE(v string) predicate.Position {
	return predicate.Position(sql.FieldGTE(FieldPositionId, v))
}

// PositionIdLT applies the LT predicate on the "positionId" field.
func PositionIdLT(v string) predicate.Position {
	return predicate.Position(sql.FieldLT(FieldPositionId, v))
}

// PositionIdLTE applies the LTE predicate on the "positionId" field.
func PositionIdLTE(v string) predicate.Position {
	return predicate.Position(sql.FieldLTE(FieldPositionId, v))
}

// PositionIdContains applies the Contains predicate on the "positionId" field.
func PositionIdContains(v string) predicate.Position {
	return predicate.Position(sql.FieldContains(FieldPositionId, v))
}

// PositionIdHasPrefix applies the HasPrefix predicate on the "positionId" field.
func PositionIdHasPrefix(v string) predicate.Position {
	return predicate.Position(sql.FieldHasPrefix(FieldPositionId, v))
}

// PositionIdHasSuffix applies the HasSuffix predicate on the "positionId" field.
func PositionIdHasSuffix(v string) predicate.Position {
	return predicate.Position(sql.FieldHasSuffix(FieldPositionId, v))
}

// PositionIdEqualFold applies the EqualFold predicate on the "positionId" field.
func PositionIdEqualFold(v string) predicate.Position {
	return predicate.Position(sql.FieldEqualFold(FieldPositionId, v))
}

// PositionIdContainsFold applies the ContainsFold predicate on the "positionId" field.
func PositionIdContainsFold(v string) predicate.Position {
	return predicate.Position(sql.FieldContainsFold(FieldPositionId, v))
}

// LockedCollateralEQ applies the EQ predicate on the "lockedCollateral" field.
func LockedCollateralEQ(v string) predicate.Position {
	return predicate.Position(sql.FieldEQ(FieldLockedCollateral, v))
}

// LockedCollateralNEQ applies the NEQ predicate on the "lockedCollateral" field.
func LockedCollateralNEQ(v string) predicate.Position {
	return predicate.Position(sql.FieldNEQ(FieldLockedCollateral, v))
}

// LockedCollateralIn applies the In predicate on the "lockedCollateral" field.
func LockedCollateralIn(vs ...string) predicate.Position {
	return predicate.Position(sql.FieldIn(FieldLockedCollateral, vs...))
}

// LockedCollateralNotIn applies the NotIn predicate on the "lockedCollateral" field.
func LockedCollateralNotIn(vs ...string) predicate.Position {
	return predicate.Position(sql.FieldNotIn(FieldLockedCollateral, vs...))
}

// LockedCollateralGT applies the GT predicate on the "lockedCollateral" field.
func LockedCollateralGT(v string) predicate.Position {
	return predicate.Position(sql.FieldGT(FieldLockedCollateral, v))
}

// LockedCollateralGTE applies the GTE predicate on the "lockedCollateral" field.
func LockedCollateralGTE(v string) predicate.Position {
	return predicate.Position(sql.FieldGTE(FieldLockedCollateral, v))
}

// LockedCollateralLT applies the LT predicate on the "lockedCollateral" field.
func LockedCollateralLT(v string) predicate.Position {
	return predicate.Position(sql.FieldLT(FieldLockedCollateral, v))
}

// LockedCollateralLTE applies the LTE predicate on the "lockedCollateral" field.
func LockedCollateralLTE(v string) predicate.Position {
	return predicate.Position(sql.FieldLTE(FieldLockedCollateral, v))
}

// LockedCollateralContains applies the Contains predicate on the "lockedCollateral" field.
func LockedCollateralContains(v string) predicate.Position {
	return predicate.Position(sql.FieldContains(FieldLockedCollateral, v))
}

// LockedCollateralHasPrefix applies the HasPrefix predicate on the "lockedCollateral" field.
func LockedCollateralHasPrefix(v string) predicate.Position {
	return predicate.Position(sql.FieldHasPrefix(FieldLockedCollateral, v))
}

// LockedCollateralHasSuffix applies the HasSuffix predicate on the "lockedCollateral" field.
func LockedCollateralHasSuffix(v string) predicate.Position {
	return predicate.Position(sql.FieldHasSuffix(FieldLockedCollateral, v))
}

// LockedCollateralEqualFold applies the EqualFold predicate on the "lockedCollateral" field.
func LockedCollateralEqualFold(v string) predicate.Position {
	return predicate.Position(sql.FieldEqualFold(FieldLockedCollateral, v))
}

// LockedCollateralContainsFold applies the ContainsFold predicate on the "lockedCollateral" field.
func LockedCollateralContainsFold(v string) predicate.Position {
	return predicate.Position(sql.FieldContainsFold(FieldLockedCollateral, v))
}

// DebtValueEQ applies the EQ predicate on the "debtValue" field.
func DebtValueEQ(v string) predicate.Position {
	return predicate.Position(sql.FieldEQ(FieldDebtValue, v))
}

// DebtValueNEQ applies the NEQ predicate on the "debtValue" field.
func DebtValueNEQ(v string) predicate.Position {
	return predicate.Position(sql.FieldNEQ(FieldDebtValue, v))
}

// DebtValueIn applies the In predicate on the "debtValue" field.
func DebtValueIn(vs ...string) predicate.Position {
	return predicate.Position(sql.FieldIn(FieldDebtValue, vs...))
}

// DebtValueNotIn applies the NotIn predicate on the "debtValue" field.
func DebtValueNotIn(vs ...string) predicate.Position {
	return predicate.Position(sql.FieldNotIn(FieldDebtValue, vs...))
}

// DebtValueGT applies the GT predicate on the "debtValue" field.
func DebtValueGT(v string) predicate.Position {
	return predicate.Position(sql.FieldGT(FieldDebtValue, v))
}

// DebtValueGTE applies the GTE predicate on the "debtValue" field.
func DebtValueGTE(v string) predicate.Position {
	return predicate.Position(sql.FieldGTE(FieldDebtValue, v))
}

// DebtValueLT applies the LT predicate on the "debtValue" field.
func DebtValueLT(v string) predicate.Position {
	return predicate.Position(sql.FieldLT(FieldDebtValue, v))
}

// DebtValueLTE applies the LTE predicate on the "debtValue" field.
func DebtValueLTE(v string) predicate.Position {
	return predicate.Position(sql.FieldLTE(FieldDebtValue, v))
}

// DebtValueContains applies the Contains predicate on the "debtValue" field.
func DebtValueContains(v string) predicate.Position {
	return predicate.Position(sql.FieldContains(FieldDebtValue, v))
}

// DebtValueHasPrefix applies the HasPrefix predicate on the "debtValue" field.
func DebtValueHasPrefix(v string) predicate.Position {
	return predicate.Position(sql.FieldHasPrefix(FieldDebtValue, v))
}

// DebtValueHasSuffix applies the HasSuffix predicate on the "debtValue" field.
func DebtValueHasSuffix(v string) predicate.Position {
	return predicate.Position(sql.FieldHasSuffix(FieldDebtValue, v))
}

// DebtValueEqualFold applies the EqualFold predicate on the "debtValue" field.
func DebtValueEqualFold(v string) predicate.Position {
	return predicate.Position(sql.FieldEqualFold(FieldDebtValue, v))
}

// DebtValueContainsFold applies the ContainsFold predicate on the "debtValue" field.
func DebtValueContainsFold(v string) predicate.Position {
	return predicate.Position(sql.FieldContainsFold(FieldDebtValue, v))
}

// DebtShareEQ applies the EQ predicate on the "debtShare" field.
func DebtShareEQ(v string) predicate.Position {
	return predicate.Position(sql.FieldEQ(FieldDebtShare, v))
}

// DebtShareNEQ applies the NEQ predicate on the "debtShare" field.
func DebtShareNEQ(v string) predicate.Position {
	return predicate.Position(sql.FieldNEQ(FieldDebtShare, v))
}

// DebtShareIn applies the In predicate on the "debtShare" field.
func DebtShareIn(vs ...string) predicate.Position {
	return predicate.Position(sql.FieldIn(FieldDebtShare, vs...))
}

// DebtShareNotIn applies the NotIn predicate on the "debtShare" field.
func DebtShareNotIn(vs ...string) predicate.Position {
	return predicate.Position(sql.FieldNotIn(FieldDebtShare, vs...))
}

// DebtShareGT applies the GT predicate on the "debtShare" field.
func DebtShareGT(v string) predicate.Position {
	return predicate.Position(sql.FieldGT(FieldDebtShare, v))
}

// DebtShareGTE applies the GTE predicate on the "debtShare" field.
func DebtShareGTE(v string) predicate.Position {
	return predicate.Position(sql.FieldGTE(FieldDebtShare, v))
}

// DebtShareLT applies the LT predicate on the "debtShare" field.
func DebtShareLT(v string) predicate.Position {
	return predicate.Position(sql.FieldLT(FieldDebtShare, v))
}

// DebtShareLTE applies the LTE predicate on the "debtShare" field.
func DebtShareLTE(v string) predicate.Position {
	return predicate.Position(sql.FieldLTE(FieldDebtShare, v))
}

// DebtShareContains applies the Contains predicate on the "debtShare" field.
func DebtShareContains(v string) predicate.Position {
	return predicate.Position(sql.FieldContains(FieldDebtShare, v))
}

// DebtShareHasPrefix applies the HasPrefix predicate on the "debtShare" field.
func DebtShareHasPrefix(v string) predicate.Position {
	return predicate.Position(sql.FieldHasPrefix(FieldDebtShare, v))
}

// DebtShareHasSuffix applies the HasSuffix predicate on the "debtShare" field.
func DebtShareHasSuffix(v string) predicate.Position {
	return predicate.Position(sql.FieldHasSuffix(FieldDebtShare, v))
}

// DebtShareEqualFold applies the EqualFold predicate on the "debtShare" field.
func DebtShareEqualFold(v string) predicate.Position {
	return predicate.Position(sql.FieldEqualFold(FieldDebtShare, v))
}

// DebtShareContainsFold applies the ContainsFold predicate on the "debtShare" field.
func DebtShareContainsFold(v string) predicate.Position {
	return predicate.Position(sql.FieldContainsFold(FieldDebtShare, v))
}

// SafetyBufferEQ applies the EQ predicate on the "safetyBuffer" field.
func SafetyBufferEQ(v string) predicate.Position {
	return predicate.Position(sql.FieldEQ(FieldSafetyBuffer, v))
}

// SafetyBufferNEQ applies the NEQ predicate on the "safetyBuffer" field.
func SafetyBufferNEQ(v string) predicate.Position {
	return predicate.Position(sql.FieldNEQ(FieldSafetyBuffer, v))
}

// SafetyBufferIn applies the In predicate on the "safetyBuffer" field.
func SafetyBufferIn(vs ...string) predicate.Position {
	return predicate.Position(sql.FieldIn(FieldSafetyBuffer, vs...))
}

// SafetyBufferNotIn applies the NotIn predicate on the "safetyBuffer" field.
func SafetyBufferNotIn(vs ...string) predicate.Position {
	return predicate.Position(sql.FieldNotIn(FieldSafetyBuffer, vs...))
}

// SafetyBufferGT applies the GT predicate on the "safetyBuffer" field.
func SafetyBufferGT(v string) predicate.Position {
	return predicate.Position(sql.FieldGT(FieldSafetyBuffer, v))
}

// SafetyBufferGTE applies the GTE predicate on the "safetyBuffer" field.
func SafetyBufferGTE(v string) predicate.Position {
	return predicate.Position(sql.FieldGTE(FieldSafetyBuffer, v))
}

// SafetyBufferLT applies the LT predicate on the "safetyBuffer" field.
func SafetyBufferLT(v string) predicate.Position {
	return predicate.Position(sql.FieldLT(FieldSafetyBuffer, v))
}

// SafetyBufferLTE applies the LTE predicate on the "safetyBuffer" field.
func SafetyBufferLTE(v string) predicate.Position {
	return predicate.Position(sql.FieldLTE(FieldSafetyBuffer, v))
}

// SafetyBufferContains applies the Contains predicate on the "safetyBuffer" field.
func SafetyBufferContains(v string) predicate.Position {
	return predicate.Position(sql.FieldContains(FieldSafetyBuffer, v))
}

// SafetyBufferHasPrefix applies the HasPrefix predicate on the "safetyBuffer" field.
func SafetyBufferHasPrefix(v string) predicate.Position {
	return predicate.Position(sql.FieldHasPrefix(FieldSafetyBuffer, v))
}

// SafetyBufferHasSuffix applies the HasSuffix predicate on the "safetyBuffer" field.
func SafetyBufferHasSuffix(v string) predicate.Position {
	return predicate.Position(sql.FieldHasSuffix(FieldSafetyBuffer, v))
}

// SafetyBufferEqualFold applies the EqualFold predicate on the "safetyBuffer" field.
func SafetyBufferEqualFold(v string) predicate.Position {
	return predicate.Position(sql.FieldEqualFold(FieldSafetyBuffer, v))
}

// SafetyBufferContainsFold applies the ContainsFold predicate on the "safetyBuffer" field.
func SafetyBufferContainsFold(v string) predicate.Position {
	return predicate.Position(sql.FieldContainsFold(FieldSafetyBuffer, v))
}

// SafetyBufferInPercentEQ applies the EQ predicate on the "safetyBufferInPercent" field.
func SafetyBufferInPercentEQ(v string) predicate.Position {
	return predicate.Position(sql.FieldEQ(FieldSafetyBufferInPercent, v))
}

// SafetyBufferInPercentNEQ applies the NEQ predicate on the "safetyBufferInPercent" field.
func SafetyBufferInPercentNEQ(v string) predicate.Position {
	return predicate.Position(sql.FieldNEQ(FieldSafetyBufferInPercent, v))
}

// SafetyBufferInPercentIn applies the In predicate on the "safetyBufferInPercent" field.
func SafetyBufferInPercentIn(vs ...string) predicate.Position {
	return predicate.Position(sql.FieldIn(FieldSafetyBufferInPercent, vs...))
}

// SafetyBufferInPercentNotIn applies the NotIn predicate on the "safetyBufferInPercent" field.
func SafetyBufferInPercentNotIn(vs ...string) predicate.Position {
	return predicate.Position(sql.FieldNotIn(FieldSafetyBufferInPercent, vs...))
}

// SafetyBufferInPercentGT applies the GT predicate on the "safetyBufferInPercent" field.
func SafetyBufferInPercentGT(v string) predicate.Position {
	return predicate.Position(sql.FieldGT(FieldSafetyBufferInPercent, v))
}

// SafetyBufferInPercentGTE applies the GTE predicate on the "safetyBufferInPercent" field.
func SafetyBufferInPercentGTE(v string) predicate.Position {
	return predicate.Position(sql.FieldGTE(FieldSafetyBufferInPercent, v))
}

// SafetyBufferInPercentLT applies the LT predicate on the "safetyBufferInPercent" field.
func SafetyBufferInPercentLT(v string) predicate.Position {
	return predicate.Position(sql.FieldLT(FieldSafetyBufferInPercent, v))
}

// SafetyBufferInPercentLTE applies the LTE predicate on the "safetyBufferInPercent" field.
func SafetyBufferInPercentLTE(v string) predicate.Position {
	return predicate.Position(sql.FieldLTE(FieldSafetyBufferInPercent, v))
}

// SafetyBufferInPercentContains applies the Contains predicate on the "safetyBufferInPercent" field.
func SafetyBufferInPercentContains(v string) predicate.Position {
	return predicate.Position(sql.FieldContains(FieldSafetyBufferInPercent, v))
}

// SafetyBufferInPercentHasPrefix applies the HasPrefix predicate on the "safetyBufferInPercent" field.
func SafetyBufferInPercentHasPrefix(v string) predicate.Position {
	return predicate.Position(sql.FieldHasPrefix(FieldSafetyBufferInPercent, v))
}

// SafetyBufferInPercentHasSuffix applies the HasSuffix predicate on the "safetyBufferInPercent" field.
func SafetyBufferInPercentHasSuffix(v string) predicate.Position {
	return predicate.Position(sql.FieldHasSuffix(FieldSafetyBufferInPercent, v))
}

// SafetyBufferInPercentEqualFold applies the EqualFold predicate on the "safetyBufferInPercent" field.
func SafetyBufferInPercentEqualFold(v string) predicate.Position {
	return predicate.Position(sql.FieldEqualFold(FieldSafetyBufferInPercent, v))
}

// SafetyBufferInPercentContainsFold applies the ContainsFold predicate on the "safetyBufferInPercent" field.
func SafetyBufferInPercentContainsFold(v string) predicate.Position {
	return predicate.Position(sql.FieldContainsFold(FieldSafetyBufferInPercent, v))
}

// TvlEQ applies the EQ predicate on the "tvl" field.
func TvlEQ(v string) predicate.Position {
	return predicate.Position(sql.FieldEQ(FieldTvl, v))
}

// TvlNEQ applies the NEQ predicate on the "tvl" field.
func TvlNEQ(v string) predicate.Position {
	return predicate.Position(sql.FieldNEQ(FieldTvl, v))
}

// TvlIn applies the In predicate on the "tvl" field.
func TvlIn(vs ...string) predicate.Position {
	return predicate.Position(sql.FieldIn(FieldTvl, vs...))
}

// TvlNotIn applies the NotIn predicate on the "tvl" field.
func TvlNotIn(vs ...string) predicate.Position {
	return predicate.Position(sql.FieldNotIn(FieldTvl, vs...))
}

// TvlGT applies the GT predicate on the "tvl" field.
func TvlGT(v string) predicate.Position {
	return predicate.Position(sql.FieldGT(FieldTvl, v))
}

// TvlGTE applies the GTE predicate on the "tvl" field.
func TvlGTE(v string) predicate.Position {
	return predicate.Position(sql.FieldGTE(FieldTvl, v))
}

// TvlLT applies the LT predicate on the "tvl" field.
func TvlLT(v string) predicate.Position {
	return predicate.Position(sql.FieldLT(FieldTvl, v))
}

// TvlLTE applies the LTE predicate on the "tvl" field.
func TvlLTE(v string) predicate.Position {
	return predicate.Position(sql.FieldLTE(FieldTvl, v))
}

// TvlContains applies the Contains predicate on the "tvl" field.
func TvlContains(v string) predicate.Position {
	return predicate.Position(sql.FieldContains(FieldTvl, v))
}

// TvlHasPrefix applies the HasPrefix predicate on the "tvl" field.
func TvlHasPrefix(v string) predicate.Position {
	return predicate.Position(sql.FieldHasPrefix(FieldTvl, v))
}

// TvlHasSuffix applies the HasSuffix predicate on the "tvl" field.
func TvlHasSuffix(v string) predicate.Position {
	return predicate.Position(sql.FieldHasSuffix(FieldTvl, v))
}

// TvlEqualFold applies the EqualFold predicate on the "tvl" field.
func TvlEqualFold(v string) predicate.Position {
	return predicate.Position(sql.FieldEqualFold(FieldTvl, v))
}

// TvlContainsFold applies the ContainsFold predicate on the "tvl" field.
func TvlContainsFold(v string) predicate.Position {
	return predicate.Position(sql.FieldContainsFold(FieldTvl, v))
}

// PositionStatusEQ applies the EQ predicate on the "positionStatus" field.
func PositionStatusEQ(v string) predicate.Position {
	return predicate.Position(sql.FieldEQ(FieldPositionStatus, v))
}

// PositionStatusNEQ applies the NEQ predicate on the "positionStatus" field.
func PositionStatusNEQ(v string) predicate.Position {
	return predicate.Position(sql.FieldNEQ(FieldPositionStatus, v))
}

// PositionStatusIn applies the In predicate on the "positionStatus" field.
func PositionStatusIn(vs ...string) predicate.Position {
	return predicate.Position(sql.FieldIn(FieldPositionStatus, vs...))
}

// PositionStatusNotIn applies the NotIn predicate on the "positionStatus" field.
func PositionStatusNotIn(vs ...string) predicate.Position {
	return predicate.Position(sql.FieldNotIn(FieldPositionStatus, vs...))
}

// PositionStatusGT applies the GT predicate on the "positionStatus" field.
func PositionStatusGT(v string) predicate.Position {
	return predicate.Position(sql.FieldGT(FieldPositionStatus, v))
}

// PositionStatusGTE applies the GTE predicate on the "positionStatus" field.
func PositionStatusGTE(v string) predicate.Position {
	return predicate.Position(sql.FieldGTE(FieldPositionStatus, v))
}

// PositionStatusLT applies the LT predicate on the "positionStatus" field.
func PositionStatusLT(v string) predicate.Position {
	return predicate.Position(sql.FieldLT(FieldPositionStatus, v))
}

// PositionStatusLTE applies the LTE predicate on the "positionStatus" field.
func PositionStatusLTE(v string) predicate.Position {
	return predicate.Position(sql.FieldLTE(FieldPositionStatus, v))
}

// PositionStatusContains applies the Contains predicate on the "positionStatus" field.
func PositionStatusContains(v string) predicate.Position {
	return predicate.Position(sql.FieldContains(FieldPositionStatus, v))
}

// PositionStatusHasPrefix applies the HasPrefix predicate on the "positionStatus" field.
func PositionStatusHasPrefix(v string) predicate.Position {
	return predicate.Position(sql.FieldHasPrefix(FieldPositionStatus, v))
}

// PositionStatusHasSuffix applies the HasSuffix predicate on the "positionStatus" field.
func PositionStatusHasSuffix(v string) predicate.Position {
	return predicate.Position(sql.FieldHasSuffix(FieldPositionStatus, v))
}

// PositionStatusEqualFold applies the EqualFold predicate on the "positionStatus" field.
func PositionStatusEqualFold(v string) predicate.Position {
	return predicate.Position(sql.FieldEqualFold(FieldPositionStatus, v))
}

// PositionStatusContainsFold applies the ContainsFold predicate on the "positionStatus" field.
func PositionStatusContainsFold(v string) predicate.Position {
	return predicate.Position(sql.FieldContainsFold(FieldPositionStatus, v))
}

// LiquidationCountEQ applies the EQ predicate on the "liquidationCount" field.
func LiquidationCountEQ(v string) predicate.Position {
	return predicate.Position(sql.FieldEQ(FieldLiquidationCount, v))
}

// LiquidationCountNEQ applies the NEQ predicate on the "liquidationCount" field.
func LiquidationCountNEQ(v string) predicate.Position {
	return predicate.Position(sql.FieldNEQ(FieldLiquidationCount, v))
}

// LiquidationCountIn applies the In predicate on the "liquidationCount" field.
func LiquidationCountIn(vs ...string) predicate.Position {
	return predicate.Position(sql.FieldIn(FieldLiquidationCount, vs...))
}

// LiquidationCountNotIn applies the NotIn predicate on the "liquidationCount" field.
func LiquidationCountNotIn(vs ...string) predicate.Position {
	return predicate.Position(sql.FieldNotIn(FieldLiquidationCount, vs...))
}

// LiquidationCountGT applies the GT predicate on the "liquidationCount" field.
func LiquidationCountGT(v string) predicate.Position {
	return predicate.Position(sql.FieldGT(FieldLiquidationCount, v))
}

// LiquidationCountGTE applies the GTE predicate on the "liquidationCount" field.
func LiquidationCountGTE(v string) predicate.Position {
	return predicate.Position(sql.FieldGTE(FieldLiquidationCount, v))
}

// LiquidationCountLT applies the LT predicate on the "liquidationCount" field.
func LiquidationCountLT(v string) predicate.Position {
	return predicate.Position(sql.FieldLT(FieldLiquidationCount, v))
}

// LiquidationCountLTE applies the LTE predicate on the "liquidationCount" field.
func LiquidationCountLTE(v string) predicate.Position {
	return predicate.Position(sql.FieldLTE(FieldLiquidationCount, v))
}

// LiquidationCountContains applies the Contains predicate on the "liquidationCount" field.
func LiquidationCountContains(v string) predicate.Position {
	return predicate.Position(sql.FieldContains(FieldLiquidationCount, v))
}

// LiquidationCountHasPrefix applies the HasPrefix predicate on the "liquidationCount" field.
func LiquidationCountHasPrefix(v string) predicate.Position {
	return predicate.Position(sql.FieldHasPrefix(FieldLiquidationCount, v))
}

// LiquidationCountHasSuffix applies the HasSuffix predicate on the "liquidationCount" field.
func LiquidationCountHasSuffix(v string) predicate.Position {
	return predicate.Position(sql.FieldHasSuffix(FieldLiquidationCount, v))
}

// LiquidationCountEqualFold applies the EqualFold predicate on the "liquidationCount" field.
func LiquidationCountEqualFold(v string) predicate.Position {
	return predicate.Position(sql.FieldEqualFold(FieldLiquidationCount, v))
}

// LiquidationCountContainsFold applies the ContainsFold predicate on the "liquidationCount" field.
func LiquidationCountContainsFold(v string) predicate.Position {
	return predicate.Position(sql.FieldContainsFold(FieldLiquidationCount, v))
}

// BlockNumberEQ applies the EQ predicate on the "blockNumber" field.
func BlockNumberEQ(v string) predicate.Position {
	return predicate.Position(sql.FieldEQ(FieldBlockNumber, v))
}

// BlockNumberNEQ applies the NEQ predicate on the "blockNumber" field.
func BlockNumberNEQ(v string) predicate.Position {
	return predicate.Position(sql.FieldNEQ(FieldBlockNumber, v))
}

// BlockNumberIn applies the In predicate on the "blockNumber" field.
func BlockNumberIn(vs ...string) predicate.Position {
	return predicate.Position(sql.FieldIn(FieldBlockNumber, vs...))
}

// BlockNumberNotIn applies the NotIn predicate on the "blockNumber" field.
func BlockNumberNotIn(vs ...string) predicate.Position {
	return predicate.Position(sql.FieldNotIn(FieldBlockNumber, vs...))
}

// BlockNumberGT applies the GT predicate on the "blockNumber" field.
func BlockNumberGT(v string) predicate.Position {
	return predicate.Position(sql.FieldGT(FieldBlockNumber, v))
}

// BlockNumberGTE applies the GTE predicate on the "blockNumber" field.
func BlockNumberGTE(v string) predicate.Position {
	return predicate.Position(sql.FieldGTE(FieldBlockNumber, v))
}

// BlockNumberLT applies the LT predicate on the "blockNumber" field.
func BlockNumberLT(v string) predicate.Position {
	return predicate.Position(sql.FieldLT(FieldBlockNumber, v))
}

// BlockNumberLTE applies the LTE predicate on the "blockNumber" field.
func BlockNumberLTE(v string) predicate.Position {
	return predicate.Position(sql.FieldLTE(FieldBlockNumber, v))
}

// BlockNumberContains applies the Contains predicate on the "blockNumber" field.
func BlockNumberContains(v string) predicate.Position {
	return predicate.Position(sql.FieldContains(FieldBlockNumber, v))
}

// BlockNumberHasPrefix applies the HasPrefix predicate on the "blockNumber" field.
func BlockNumberHasPrefix(v string) predicate.Position {
	return predicate.Position(sql.FieldHasPrefix(FieldBlockNumber, v))
}

// BlockNumberHasSuffix applies the HasSuffix predicate on the "blockNumber" field.
func BlockNumberHasSuffix(v string) predicate.Position {
	return predicate.Position(sql.FieldHasSuffix(FieldBlockNumber, v))
}

// BlockNumberEqualFold applies the EqualFold predicate on the "blockNumber" field.
func BlockNumberEqualFold(v string) predicate.Position {
	return predicate.Position(sql.FieldEqualFold(FieldBlockNumber, v))
}

// BlockNumberContainsFold applies the ContainsFold predicate on the "blockNumber" field.
func BlockNumberContainsFold(v string) predicate.Position {
	return predicate.Position(sql.FieldContainsFold(FieldBlockNumber, v))
}

// BlockTimestampEQ applies the EQ predicate on the "blockTimestamp" field.
func BlockTimestampEQ(v string) predicate.Position {
	return predicate.Position(sql.FieldEQ(FieldBlockTimestamp, v))
}

// BlockTimestampNEQ applies the NEQ predicate on the "blockTimestamp" field.
func BlockTimestampNEQ(v string) predicate.Position {
	return predicate.Position(sql.FieldNEQ(FieldBlockTimestamp, v))
}

// BlockTimestampIn applies the In predicate on the "blockTimestamp" field.
func BlockTimestampIn(vs ...string) predicate.Position {
	return predicate.Position(sql.FieldIn(FieldBlockTimestamp, vs...))
}

// BlockTimestampNotIn applies the NotIn predicate on the "blockTimestamp" field.
func BlockTimestampNotIn(vs ...string) predicate.Position {
	return predicate.Position(sql.FieldNotIn(FieldBlockTimestamp, vs...))
}

// BlockTimestampGT applies the GT predicate on the "blockTimestamp" field.
func BlockTimestampGT(v string) predicate.Position {
	return predicate.Position(sql.FieldGT(FieldBlockTimestamp, v))
}

// BlockTimestampGTE applies the GTE predicate on the "blockTimestamp" field.
func BlockTimestampGTE(v string) predicate.Position {
	return predicate.Position(sql.FieldGTE(FieldBlockTimestamp, v))
}

// BlockTimestampLT applies the LT predicate on the "blockTimestamp" field.
func BlockTimestampLT(v string) predicate.Position {
	return predicate.Position(sql.FieldLT(FieldBlockTimestamp, v))
}

// BlockTimestampLTE applies the LTE predicate on the "blockTimestamp" field.
func BlockTimestampLTE(v string) predicate.Position {
	return predicate.Position(sql.FieldLTE(FieldBlockTimestamp, v))
}

// BlockTimestampContains applies the Contains predicate on the "blockTimestamp" field.
func BlockTimestampContains(v string) predicate.Position {
	return predicate.Position(sql.FieldContains(FieldBlockTimestamp, v))
}

// BlockTimestampHasPrefix applies the HasPrefix predicate on the "blockTimestamp" field.
func BlockTimestampHasPrefix(v string) predicate.Position {
	return predicate.Position(sql.FieldHasPrefix(FieldBlockTimestamp, v))
}

// BlockTimestampHasSuffix applies the HasSuffix predicate on the "blockTimestamp" field.
func BlockTimestampHasSuffix(v string) predicate.Position {
	return predicate.Position(sql.FieldHasSuffix(FieldBlockTimestamp, v))
}

// BlockTimestampEqualFold applies the EqualFold predicate on the "blockTimestamp" field.
func BlockTimestampEqualFold(v string) predicate.Position {
	return predicate.Position(sql.FieldEqualFold(FieldBlockTimestamp, v))
}

// BlockTimestampContainsFold applies the ContainsFold predicate on the "blockTimestamp" field.
func BlockTimestampContainsFold(v string) predicate.Position {
	return predicate.Position(sql.FieldContainsFold(FieldBlockTimestamp, v))
}

// TransactionEQ applies the EQ predicate on the "transaction" field.
func TransactionEQ(v string) predicate.Position {
	return predicate.Position(sql.FieldEQ(FieldTransaction, v))
}

// TransactionNEQ applies the NEQ predicate on the "transaction" field.
func TransactionNEQ(v string) predicate.Position {
	return predicate.Position(sql.FieldNEQ(FieldTransaction, v))
}

// TransactionIn applies the In predicate on the "transaction" field.
func TransactionIn(vs ...string) predicate.Position {
	return predicate.Position(sql.FieldIn(FieldTransaction, vs...))
}

// TransactionNotIn applies the NotIn predicate on the "transaction" field.
func TransactionNotIn(vs ...string) predicate.Position {
	return predicate.Position(sql.FieldNotIn(FieldTransaction, vs...))
}

// TransactionGT applies the GT predicate on the "transaction" field.
func TransactionGT(v string) predicate.Position {
	return predicate.Position(sql.FieldGT(FieldTransaction, v))
}

// TransactionGTE applies the GTE predicate on the "transaction" field.
func TransactionGTE(v string) predicate.Position {
	return predicate.Position(sql.FieldGTE(FieldTransaction, v))
}

// TransactionLT applies the LT predicate on the "transaction" field.
func TransactionLT(v string) predicate.Position {
	return predicate.Position(sql.FieldLT(FieldTransaction, v))
}

// TransactionLTE applies the LTE predicate on the "transaction" field.
func TransactionLTE(v string) predicate.Position {
	return predicate.Position(sql.FieldLTE(FieldTransaction, v))
}

// TransactionContains applies the Contains predicate on the "transaction" field.
func TransactionContains(v string) predicate.Position {
	return predicate.Position(sql.FieldContains(FieldTransaction, v))
}

// TransactionHasPrefix applies the HasPrefix predicate on the "transaction" field.
func TransactionHasPrefix(v string) predicate.Position {
	return predicate.Position(sql.FieldHasPrefix(FieldTransaction, v))
}

// TransactionHasSuffix applies the HasSuffix predicate on the "transaction" field.
func TransactionHasSuffix(v string) predicate.Position {
	return predicate.Position(sql.FieldHasSuffix(FieldTransaction, v))
}

// TransactionEqualFold applies the EqualFold predicate on the "transaction" field.
func TransactionEqualFold(v string) predicate.Position {
	return predicate.Position(sql.FieldEqualFold(FieldTransaction, v))
}

// TransactionContainsFold applies the ContainsFold predicate on the "transaction" field.
func TransactionContainsFold(v string) predicate.Position {
	return predicate.Position(sql.FieldContainsFold(FieldTransaction, v))
}

// HasPool applies the HasEdge predicate on the "pool" edge.
func HasPool() predicate.Position {
	return predicate.Position(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, PoolTable, PoolColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasPoolWith applies the HasEdge predicate on the "pool" edge with a given conditions (other predicates).
func HasPoolWith(preds ...predicate.Pool) predicate.Position {
	return predicate.Position(func(s *sql.Selector) {
		step := newPoolStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasActivity applies the HasEdge predicate on the "activity" edge.
func HasActivity() predicate.Position {
	return predicate.Position(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, ActivityTable, ActivityColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasActivityWith applies the HasEdge predicate on the "activity" edge with a given conditions (other predicates).
func HasActivityWith(preds ...predicate.PositionActivity) predicate.Position {
	return predicate.Position(func(s *sql.Selector) {
		step := newActivityStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Position) predicate.Position {
	return predicate.Position(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Position) predicate.Position {
	return predicate.Position(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Position) predicate.Position {
	return predicate.Position(sql.NotPredicates(p))
}
