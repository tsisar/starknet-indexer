// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/tsisar/starknet-indexer/generated/ent/block"
	"github.com/tsisar/starknet-indexer/generated/ent/meta"
	"github.com/tsisar/starknet-indexer/generated/ent/predicate"
)

// MetaUpdate is the builder for updating Meta entities.
type MetaUpdate struct {
	config
	hooks    []Hook
	mutation *MetaMutation
}

// Where appends a list predicates to the MetaUpdate builder.
func (mu *MetaUpdate) Where(ps ...predicate.Meta) *MetaUpdate {
	mu.mutation.Where(ps...)
	return mu
}

// SetDeployment sets the "deployment" field.
func (mu *MetaUpdate) SetDeployment(s string) *MetaUpdate {
	mu.mutation.SetDeployment(s)
	return mu
}

// SetNillableDeployment sets the "deployment" field if the given value is not nil.
func (mu *MetaUpdate) SetNillableDeployment(s *string) *MetaUpdate {
	if s != nil {
		mu.SetDeployment(*s)
	}
	return mu
}

// SetHasIndexingErrors sets the "hasIndexingErrors" field.
func (mu *MetaUpdate) SetHasIndexingErrors(s string) *MetaUpdate {
	mu.mutation.SetHasIndexingErrors(s)
	return mu
}

// SetNillableHasIndexingErrors sets the "hasIndexingErrors" field if the given value is not nil.
func (mu *MetaUpdate) SetNillableHasIndexingErrors(s *string) *MetaUpdate {
	if s != nil {
		mu.SetHasIndexingErrors(*s)
	}
	return mu
}

// SetBlockID sets the "block" edge to the Block entity by ID.
func (mu *MetaUpdate) SetBlockID(id int) *MetaUpdate {
	mu.mutation.SetBlockID(id)
	return mu
}

// SetNillableBlockID sets the "block" edge to the Block entity by ID if the given value is not nil.
func (mu *MetaUpdate) SetNillableBlockID(id *int) *MetaUpdate {
	if id != nil {
		mu = mu.SetBlockID(*id)
	}
	return mu
}

// SetBlock sets the "block" edge to the Block entity.
func (mu *MetaUpdate) SetBlock(b *Block) *MetaUpdate {
	return mu.SetBlockID(b.ID)
}

// Mutation returns the MetaMutation object of the builder.
func (mu *MetaUpdate) Mutation() *MetaMutation {
	return mu.mutation
}

// ClearBlock clears the "block" edge to the Block entity.
func (mu *MetaUpdate) ClearBlock() *MetaUpdate {
	mu.mutation.ClearBlock()
	return mu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (mu *MetaUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, mu.sqlSave, mu.mutation, mu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (mu *MetaUpdate) SaveX(ctx context.Context) int {
	affected, err := mu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (mu *MetaUpdate) Exec(ctx context.Context) error {
	_, err := mu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (mu *MetaUpdate) ExecX(ctx context.Context) {
	if err := mu.Exec(ctx); err != nil {
		panic(err)
	}
}

func (mu *MetaUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(meta.Table, meta.Columns, sqlgraph.NewFieldSpec(meta.FieldID, field.TypeInt))
	if ps := mu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := mu.mutation.Deployment(); ok {
		_spec.SetField(meta.FieldDeployment, field.TypeString, value)
	}
	if value, ok := mu.mutation.HasIndexingErrors(); ok {
		_spec.SetField(meta.FieldHasIndexingErrors, field.TypeString, value)
	}
	if mu.mutation.BlockCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   meta.BlockTable,
			Columns: []string{meta.BlockColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(block.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := mu.mutation.BlockIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   meta.BlockTable,
			Columns: []string{meta.BlockColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(block.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, mu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{meta.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	mu.mutation.done = true
	return n, nil
}

// MetaUpdateOne is the builder for updating a single Meta entity.
type MetaUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *MetaMutation
}

// SetDeployment sets the "deployment" field.
func (muo *MetaUpdateOne) SetDeployment(s string) *MetaUpdateOne {
	muo.mutation.SetDeployment(s)
	return muo
}

// SetNillableDeployment sets the "deployment" field if the given value is not nil.
func (muo *MetaUpdateOne) SetNillableDeployment(s *string) *MetaUpdateOne {
	if s != nil {
		muo.SetDeployment(*s)
	}
	return muo
}

// SetHasIndexingErrors sets the "hasIndexingErrors" field.
func (muo *MetaUpdateOne) SetHasIndexingErrors(s string) *MetaUpdateOne {
	muo.mutation.SetHasIndexingErrors(s)
	return muo
}

// SetNillableHasIndexingErrors sets the "hasIndexingErrors" field if the given value is not nil.
func (muo *MetaUpdateOne) SetNillableHasIndexingErrors(s *string) *MetaUpdateOne {
	if s != nil {
		muo.SetHasIndexingErrors(*s)
	}
	return muo
}

// SetBlockID sets the "block" edge to the Block entity by ID.
func (muo *MetaUpdateOne) SetBlockID(id int) *MetaUpdateOne {
	muo.mutation.SetBlockID(id)
	return muo
}

// SetNillableBlockID sets the "block" edge to the Block entity by ID if the given value is not nil.
func (muo *MetaUpdateOne) SetNillableBlockID(id *int) *MetaUpdateOne {
	if id != nil {
		muo = muo.SetBlockID(*id)
	}
	return muo
}

// SetBlock sets the "block" edge to the Block entity.
func (muo *MetaUpdateOne) SetBlock(b *Block) *MetaUpdateOne {
	return muo.SetBlockID(b.ID)
}

// Mutation returns the MetaMutation object of the builder.
func (muo *MetaUpdateOne) Mutation() *MetaMutation {
	return muo.mutation
}

// ClearBlock clears the "block" edge to the Block entity.
func (muo *MetaUpdateOne) ClearBlock() *MetaUpdateOne {
	muo.mutation.ClearBlock()
	return muo
}

// Where appends a list predicates to the MetaUpdate builder.
func (muo *MetaUpdateOne) Where(ps ...predicate.Meta) *MetaUpdateOne {
	muo.mutation.Where(ps...)
	return muo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (muo *MetaUpdateOne) Select(field string, fields ...string) *MetaUpdateOne {
	muo.fields = append([]string{field}, fields...)
	return muo
}

// Save executes the query and returns the updated Meta entity.
func (muo *MetaUpdateOne) Save(ctx context.Context) (*Meta, error) {
	return withHooks(ctx, muo.sqlSave, muo.mutation, muo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (muo *MetaUpdateOne) SaveX(ctx context.Context) *Meta {
	node, err := muo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (muo *MetaUpdateOne) Exec(ctx context.Context) error {
	_, err := muo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (muo *MetaUpdateOne) ExecX(ctx context.Context) {
	if err := muo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (muo *MetaUpdateOne) sqlSave(ctx context.Context) (_node *Meta, err error) {
	_spec := sqlgraph.NewUpdateSpec(meta.Table, meta.Columns, sqlgraph.NewFieldSpec(meta.FieldID, field.TypeInt))
	id, ok := muo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Meta.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := muo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, meta.FieldID)
		for _, f := range fields {
			if !meta.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != meta.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := muo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := muo.mutation.Deployment(); ok {
		_spec.SetField(meta.FieldDeployment, field.TypeString, value)
	}
	if value, ok := muo.mutation.HasIndexingErrors(); ok {
		_spec.SetField(meta.FieldHasIndexingErrors, field.TypeString, value)
	}
	if muo.mutation.BlockCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   meta.BlockTable,
			Columns: []string{meta.BlockColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(block.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := muo.mutation.BlockIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   meta.BlockTable,
			Columns: []string{meta.BlockColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(block.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Meta{config: muo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, muo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{meta.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	muo.mutation.done = true
	return _node, nil
}
