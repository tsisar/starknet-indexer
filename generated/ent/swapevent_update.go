// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/tsisar/starknet-indexer/generated/ent/predicate"
	"github.com/tsisar/starknet-indexer/generated/ent/swapevent"
)

// SwapEventUpdate is the builder for updating SwapEvent entities.
type SwapEventUpdate struct {
	config
	hooks    []Hook
	mutation *SwapEventMutation
}

// Where appends a list predicates to the SwapEventUpdate builder.
func (seu *SwapEventUpdate) Where(ps ...predicate.SwapEvent) *SwapEventUpdate {
	seu.mutation.Where(ps...)
	return seu
}

// SetFee sets the "fee" field.
func (seu *SwapEventUpdate) SetFee(s string) *SwapEventUpdate {
	seu.mutation.SetFee(s)
	return seu
}

// SetNillableFee sets the "fee" field if the given value is not nil.
func (seu *SwapEventUpdate) SetNillableFee(s *string) *SwapEventUpdate {
	if s != nil {
		seu.SetFee(*s)
	}
	return seu
}

// SetOwner sets the "owner" field.
func (seu *SwapEventUpdate) SetOwner(s string) *SwapEventUpdate {
	seu.mutation.SetOwner(s)
	return seu
}

// SetNillableOwner sets the "owner" field if the given value is not nil.
func (seu *SwapEventUpdate) SetNillableOwner(s *string) *SwapEventUpdate {
	if s != nil {
		seu.SetOwner(*s)
	}
	return seu
}

// SetValue sets the "value" field.
func (seu *SwapEventUpdate) SetValue(s string) *SwapEventUpdate {
	seu.mutation.SetValue(s)
	return seu
}

// SetNillableValue sets the "value" field if the given value is not nil.
func (seu *SwapEventUpdate) SetNillableValue(s *string) *SwapEventUpdate {
	if s != nil {
		seu.SetValue(*s)
	}
	return seu
}

// SetIsStablecoinToTokenSwap sets the "isStablecoinToTokenSwap" field.
func (seu *SwapEventUpdate) SetIsStablecoinToTokenSwap(b bool) *SwapEventUpdate {
	seu.mutation.SetIsStablecoinToTokenSwap(b)
	return seu
}

// SetNillableIsStablecoinToTokenSwap sets the "isStablecoinToTokenSwap" field if the given value is not nil.
func (seu *SwapEventUpdate) SetNillableIsStablecoinToTokenSwap(b *bool) *SwapEventUpdate {
	if b != nil {
		seu.SetIsStablecoinToTokenSwap(*b)
	}
	return seu
}

// SetIsTokenToStablecoinSwap sets the "isTokenToStablecoinSwap" field.
func (seu *SwapEventUpdate) SetIsTokenToStablecoinSwap(b bool) *SwapEventUpdate {
	seu.mutation.SetIsTokenToStablecoinSwap(b)
	return seu
}

// SetNillableIsTokenToStablecoinSwap sets the "isTokenToStablecoinSwap" field if the given value is not nil.
func (seu *SwapEventUpdate) SetNillableIsTokenToStablecoinSwap(b *bool) *SwapEventUpdate {
	if b != nil {
		seu.SetIsTokenToStablecoinSwap(*b)
	}
	return seu
}

// SetBlockNumber sets the "blockNumber" field.
func (seu *SwapEventUpdate) SetBlockNumber(s string) *SwapEventUpdate {
	seu.mutation.SetBlockNumber(s)
	return seu
}

// SetNillableBlockNumber sets the "blockNumber" field if the given value is not nil.
func (seu *SwapEventUpdate) SetNillableBlockNumber(s *string) *SwapEventUpdate {
	if s != nil {
		seu.SetBlockNumber(*s)
	}
	return seu
}

// SetBlockTimestamp sets the "blockTimestamp" field.
func (seu *SwapEventUpdate) SetBlockTimestamp(s string) *SwapEventUpdate {
	seu.mutation.SetBlockTimestamp(s)
	return seu
}

// SetNillableBlockTimestamp sets the "blockTimestamp" field if the given value is not nil.
func (seu *SwapEventUpdate) SetNillableBlockTimestamp(s *string) *SwapEventUpdate {
	if s != nil {
		seu.SetBlockTimestamp(*s)
	}
	return seu
}

// SetTransaction sets the "transaction" field.
func (seu *SwapEventUpdate) SetTransaction(s string) *SwapEventUpdate {
	seu.mutation.SetTransaction(s)
	return seu
}

// SetNillableTransaction sets the "transaction" field if the given value is not nil.
func (seu *SwapEventUpdate) SetNillableTransaction(s *string) *SwapEventUpdate {
	if s != nil {
		seu.SetTransaction(*s)
	}
	return seu
}

// Mutation returns the SwapEventMutation object of the builder.
func (seu *SwapEventUpdate) Mutation() *SwapEventMutation {
	return seu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (seu *SwapEventUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, seu.sqlSave, seu.mutation, seu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (seu *SwapEventUpdate) SaveX(ctx context.Context) int {
	affected, err := seu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (seu *SwapEventUpdate) Exec(ctx context.Context) error {
	_, err := seu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (seu *SwapEventUpdate) ExecX(ctx context.Context) {
	if err := seu.Exec(ctx); err != nil {
		panic(err)
	}
}

func (seu *SwapEventUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(swapevent.Table, swapevent.Columns, sqlgraph.NewFieldSpec(swapevent.FieldID, field.TypeString))
	if ps := seu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := seu.mutation.Fee(); ok {
		_spec.SetField(swapevent.FieldFee, field.TypeString, value)
	}
	if value, ok := seu.mutation.Owner(); ok {
		_spec.SetField(swapevent.FieldOwner, field.TypeString, value)
	}
	if value, ok := seu.mutation.Value(); ok {
		_spec.SetField(swapevent.FieldValue, field.TypeString, value)
	}
	if value, ok := seu.mutation.IsStablecoinToTokenSwap(); ok {
		_spec.SetField(swapevent.FieldIsStablecoinToTokenSwap, field.TypeBool, value)
	}
	if value, ok := seu.mutation.IsTokenToStablecoinSwap(); ok {
		_spec.SetField(swapevent.FieldIsTokenToStablecoinSwap, field.TypeBool, value)
	}
	if value, ok := seu.mutation.BlockNumber(); ok {
		_spec.SetField(swapevent.FieldBlockNumber, field.TypeString, value)
	}
	if value, ok := seu.mutation.BlockTimestamp(); ok {
		_spec.SetField(swapevent.FieldBlockTimestamp, field.TypeString, value)
	}
	if value, ok := seu.mutation.Transaction(); ok {
		_spec.SetField(swapevent.FieldTransaction, field.TypeString, value)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, seu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{swapevent.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	seu.mutation.done = true
	return n, nil
}

// SwapEventUpdateOne is the builder for updating a single SwapEvent entity.
type SwapEventUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *SwapEventMutation
}

// SetFee sets the "fee" field.
func (seuo *SwapEventUpdateOne) SetFee(s string) *SwapEventUpdateOne {
	seuo.mutation.SetFee(s)
	return seuo
}

// SetNillableFee sets the "fee" field if the given value is not nil.
func (seuo *SwapEventUpdateOne) SetNillableFee(s *string) *SwapEventUpdateOne {
	if s != nil {
		seuo.SetFee(*s)
	}
	return seuo
}

// SetOwner sets the "owner" field.
func (seuo *SwapEventUpdateOne) SetOwner(s string) *SwapEventUpdateOne {
	seuo.mutation.SetOwner(s)
	return seuo
}

// SetNillableOwner sets the "owner" field if the given value is not nil.
func (seuo *SwapEventUpdateOne) SetNillableOwner(s *string) *SwapEventUpdateOne {
	if s != nil {
		seuo.SetOwner(*s)
	}
	return seuo
}

// SetValue sets the "value" field.
func (seuo *SwapEventUpdateOne) SetValue(s string) *SwapEventUpdateOne {
	seuo.mutation.SetValue(s)
	return seuo
}

// SetNillableValue sets the "value" field if the given value is not nil.
func (seuo *SwapEventUpdateOne) SetNillableValue(s *string) *SwapEventUpdateOne {
	if s != nil {
		seuo.SetValue(*s)
	}
	return seuo
}

// SetIsStablecoinToTokenSwap sets the "isStablecoinToTokenSwap" field.
func (seuo *SwapEventUpdateOne) SetIsStablecoinToTokenSwap(b bool) *SwapEventUpdateOne {
	seuo.mutation.SetIsStablecoinToTokenSwap(b)
	return seuo
}

// SetNillableIsStablecoinToTokenSwap sets the "isStablecoinToTokenSwap" field if the given value is not nil.
func (seuo *SwapEventUpdateOne) SetNillableIsStablecoinToTokenSwap(b *bool) *SwapEventUpdateOne {
	if b != nil {
		seuo.SetIsStablecoinToTokenSwap(*b)
	}
	return seuo
}

// SetIsTokenToStablecoinSwap sets the "isTokenToStablecoinSwap" field.
func (seuo *SwapEventUpdateOne) SetIsTokenToStablecoinSwap(b bool) *SwapEventUpdateOne {
	seuo.mutation.SetIsTokenToStablecoinSwap(b)
	return seuo
}

// SetNillableIsTokenToStablecoinSwap sets the "isTokenToStablecoinSwap" field if the given value is not nil.
func (seuo *SwapEventUpdateOne) SetNillableIsTokenToStablecoinSwap(b *bool) *SwapEventUpdateOne {
	if b != nil {
		seuo.SetIsTokenToStablecoinSwap(*b)
	}
	return seuo
}

// SetBlockNumber sets the "blockNumber" field.
func (seuo *SwapEventUpdateOne) SetBlockNumber(s string) *SwapEventUpdateOne {
	seuo.mutation.SetBlockNumber(s)
	return seuo
}

// SetNillableBlockNumber sets the "blockNumber" field if the given value is not nil.
func (seuo *SwapEventUpdateOne) SetNillableBlockNumber(s *string) *SwapEventUpdateOne {
	if s != nil {
		seuo.SetBlockNumber(*s)
	}
	return seuo
}

// SetBlockTimestamp sets the "blockTimestamp" field.
func (seuo *SwapEventUpdateOne) SetBlockTimestamp(s string) *SwapEventUpdateOne {
	seuo.mutation.SetBlockTimestamp(s)
	return seuo
}

// SetNillableBlockTimestamp sets the "blockTimestamp" field if the given value is not nil.
func (seuo *SwapEventUpdateOne) SetNillableBlockTimestamp(s *string) *SwapEventUpdateOne {
	if s != nil {
		seuo.SetBlockTimestamp(*s)
	}
	return seuo
}

// SetTransaction sets the "transaction" field.
func (seuo *SwapEventUpdateOne) SetTransaction(s string) *SwapEventUpdateOne {
	seuo.mutation.SetTransaction(s)
	return seuo
}

// SetNillableTransaction sets the "transaction" field if the given value is not nil.
func (seuo *SwapEventUpdateOne) SetNillableTransaction(s *string) *SwapEventUpdateOne {
	if s != nil {
		seuo.SetTransaction(*s)
	}
	return seuo
}

// Mutation returns the SwapEventMutation object of the builder.
func (seuo *SwapEventUpdateOne) Mutation() *SwapEventMutation {
	return seuo.mutation
}

// Where appends a list predicates to the SwapEventUpdate builder.
func (seuo *SwapEventUpdateOne) Where(ps ...predicate.SwapEvent) *SwapEventUpdateOne {
	seuo.mutation.Where(ps...)
	return seuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (seuo *SwapEventUpdateOne) Select(field string, fields ...string) *SwapEventUpdateOne {
	seuo.fields = append([]string{field}, fields...)
	return seuo
}

// Save executes the query and returns the updated SwapEvent entity.
func (seuo *SwapEventUpdateOne) Save(ctx context.Context) (*SwapEvent, error) {
	return withHooks(ctx, seuo.sqlSave, seuo.mutation, seuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (seuo *SwapEventUpdateOne) SaveX(ctx context.Context) *SwapEvent {
	node, err := seuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (seuo *SwapEventUpdateOne) Exec(ctx context.Context) error {
	_, err := seuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (seuo *SwapEventUpdateOne) ExecX(ctx context.Context) {
	if err := seuo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (seuo *SwapEventUpdateOne) sqlSave(ctx context.Context) (_node *SwapEvent, err error) {
	_spec := sqlgraph.NewUpdateSpec(swapevent.Table, swapevent.Columns, sqlgraph.NewFieldSpec(swapevent.FieldID, field.TypeString))
	id, ok := seuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "SwapEvent.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := seuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, swapevent.FieldID)
		for _, f := range fields {
			if !swapevent.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != swapevent.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := seuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := seuo.mutation.Fee(); ok {
		_spec.SetField(swapevent.FieldFee, field.TypeString, value)
	}
	if value, ok := seuo.mutation.Owner(); ok {
		_spec.SetField(swapevent.FieldOwner, field.TypeString, value)
	}
	if value, ok := seuo.mutation.Value(); ok {
		_spec.SetField(swapevent.FieldValue, field.TypeString, value)
	}
	if value, ok := seuo.mutation.IsStablecoinToTokenSwap(); ok {
		_spec.SetField(swapevent.FieldIsStablecoinToTokenSwap, field.TypeBool, value)
	}
	if value, ok := seuo.mutation.IsTokenToStablecoinSwap(); ok {
		_spec.SetField(swapevent.FieldIsTokenToStablecoinSwap, field.TypeBool, value)
	}
	if value, ok := seuo.mutation.BlockNumber(); ok {
		_spec.SetField(swapevent.FieldBlockNumber, field.TypeString, value)
	}
	if value, ok := seuo.mutation.BlockTimestamp(); ok {
		_spec.SetField(swapevent.FieldBlockTimestamp, field.TypeString, value)
	}
	if value, ok := seuo.mutation.Transaction(); ok {
		_spec.SetField(swapevent.FieldTransaction, field.TypeString, value)
	}
	_node = &SwapEvent{config: seuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, seuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{swapevent.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	seuo.mutation.done = true
	return _node, nil
}
