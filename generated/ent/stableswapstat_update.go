// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/tsisar/starknet-indexer/generated/ent/predicate"
	"github.com/tsisar/starknet-indexer/generated/ent/stableswapstat"
)

// StableSwapStatUpdate is the builder for updating StableSwapStat entities.
type StableSwapStatUpdate struct {
	config
	hooks    []Hook
	mutation *StableSwapStatMutation
}

// Where appends a list predicates to the StableSwapStatUpdate builder.
func (sssu *StableSwapStatUpdate) Where(ps ...predicate.StableSwapStat) *StableSwapStatUpdate {
	sssu.mutation.Where(ps...)
	return sssu
}

// SetTotalTokenToStablecoinSwapEvents sets the "totalTokenToStablecoinSwapEvents" field.
func (sssu *StableSwapStatUpdate) SetTotalTokenToStablecoinSwapEvents(s string) *StableSwapStatUpdate {
	sssu.mutation.SetTotalTokenToStablecoinSwapEvents(s)
	return sssu
}

// SetNillableTotalTokenToStablecoinSwapEvents sets the "totalTokenToStablecoinSwapEvents" field if the given value is not nil.
func (sssu *StableSwapStatUpdate) SetNillableTotalTokenToStablecoinSwapEvents(s *string) *StableSwapStatUpdate {
	if s != nil {
		sssu.SetTotalTokenToStablecoinSwapEvents(*s)
	}
	return sssu
}

// SetTotalStablecoinToTokenSwapEvents sets the "totalStablecoinToTokenSwapEvents" field.
func (sssu *StableSwapStatUpdate) SetTotalStablecoinToTokenSwapEvents(s string) *StableSwapStatUpdate {
	sssu.mutation.SetTotalStablecoinToTokenSwapEvents(s)
	return sssu
}

// SetNillableTotalStablecoinToTokenSwapEvents sets the "totalStablecoinToTokenSwapEvents" field if the given value is not nil.
func (sssu *StableSwapStatUpdate) SetNillableTotalStablecoinToTokenSwapEvents(s *string) *StableSwapStatUpdate {
	if s != nil {
		sssu.SetTotalStablecoinToTokenSwapEvents(*s)
	}
	return sssu
}

// SetRemainingDailySwapAmount sets the "remainingDailySwapAmount" field.
func (sssu *StableSwapStatUpdate) SetRemainingDailySwapAmount(s string) *StableSwapStatUpdate {
	sssu.mutation.SetRemainingDailySwapAmount(s)
	return sssu
}

// SetNillableRemainingDailySwapAmount sets the "remainingDailySwapAmount" field if the given value is not nil.
func (sssu *StableSwapStatUpdate) SetNillableRemainingDailySwapAmount(s *string) *StableSwapStatUpdate {
	if s != nil {
		sssu.SetRemainingDailySwapAmount(*s)
	}
	return sssu
}

// SetTokenToStablecoinTotalSwapValue sets the "tokenToStablecoinTotalSwapValue" field.
func (sssu *StableSwapStatUpdate) SetTokenToStablecoinTotalSwapValue(s string) *StableSwapStatUpdate {
	sssu.mutation.SetTokenToStablecoinTotalSwapValue(s)
	return sssu
}

// SetNillableTokenToStablecoinTotalSwapValue sets the "tokenToStablecoinTotalSwapValue" field if the given value is not nil.
func (sssu *StableSwapStatUpdate) SetNillableTokenToStablecoinTotalSwapValue(s *string) *StableSwapStatUpdate {
	if s != nil {
		sssu.SetTokenToStablecoinTotalSwapValue(*s)
	}
	return sssu
}

// SetStablecoinToTokenTotalSwapValue sets the "stablecoinToTokenTotalSwapValue" field.
func (sssu *StableSwapStatUpdate) SetStablecoinToTokenTotalSwapValue(s string) *StableSwapStatUpdate {
	sssu.mutation.SetStablecoinToTokenTotalSwapValue(s)
	return sssu
}

// SetNillableStablecoinToTokenTotalSwapValue sets the "stablecoinToTokenTotalSwapValue" field if the given value is not nil.
func (sssu *StableSwapStatUpdate) SetNillableStablecoinToTokenTotalSwapValue(s *string) *StableSwapStatUpdate {
	if s != nil {
		sssu.SetStablecoinToTokenTotalSwapValue(*s)
	}
	return sssu
}

// Mutation returns the StableSwapStatMutation object of the builder.
func (sssu *StableSwapStatUpdate) Mutation() *StableSwapStatMutation {
	return sssu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (sssu *StableSwapStatUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, sssu.sqlSave, sssu.mutation, sssu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (sssu *StableSwapStatUpdate) SaveX(ctx context.Context) int {
	affected, err := sssu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (sssu *StableSwapStatUpdate) Exec(ctx context.Context) error {
	_, err := sssu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (sssu *StableSwapStatUpdate) ExecX(ctx context.Context) {
	if err := sssu.Exec(ctx); err != nil {
		panic(err)
	}
}

func (sssu *StableSwapStatUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(stableswapstat.Table, stableswapstat.Columns, sqlgraph.NewFieldSpec(stableswapstat.FieldID, field.TypeString))
	if ps := sssu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := sssu.mutation.TotalTokenToStablecoinSwapEvents(); ok {
		_spec.SetField(stableswapstat.FieldTotalTokenToStablecoinSwapEvents, field.TypeString, value)
	}
	if value, ok := sssu.mutation.TotalStablecoinToTokenSwapEvents(); ok {
		_spec.SetField(stableswapstat.FieldTotalStablecoinToTokenSwapEvents, field.TypeString, value)
	}
	if value, ok := sssu.mutation.RemainingDailySwapAmount(); ok {
		_spec.SetField(stableswapstat.FieldRemainingDailySwapAmount, field.TypeString, value)
	}
	if value, ok := sssu.mutation.TokenToStablecoinTotalSwapValue(); ok {
		_spec.SetField(stableswapstat.FieldTokenToStablecoinTotalSwapValue, field.TypeString, value)
	}
	if value, ok := sssu.mutation.StablecoinToTokenTotalSwapValue(); ok {
		_spec.SetField(stableswapstat.FieldStablecoinToTokenTotalSwapValue, field.TypeString, value)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, sssu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{stableswapstat.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	sssu.mutation.done = true
	return n, nil
}

// StableSwapStatUpdateOne is the builder for updating a single StableSwapStat entity.
type StableSwapStatUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *StableSwapStatMutation
}

// SetTotalTokenToStablecoinSwapEvents sets the "totalTokenToStablecoinSwapEvents" field.
func (sssuo *StableSwapStatUpdateOne) SetTotalTokenToStablecoinSwapEvents(s string) *StableSwapStatUpdateOne {
	sssuo.mutation.SetTotalTokenToStablecoinSwapEvents(s)
	return sssuo
}

// SetNillableTotalTokenToStablecoinSwapEvents sets the "totalTokenToStablecoinSwapEvents" field if the given value is not nil.
func (sssuo *StableSwapStatUpdateOne) SetNillableTotalTokenToStablecoinSwapEvents(s *string) *StableSwapStatUpdateOne {
	if s != nil {
		sssuo.SetTotalTokenToStablecoinSwapEvents(*s)
	}
	return sssuo
}

// SetTotalStablecoinToTokenSwapEvents sets the "totalStablecoinToTokenSwapEvents" field.
func (sssuo *StableSwapStatUpdateOne) SetTotalStablecoinToTokenSwapEvents(s string) *StableSwapStatUpdateOne {
	sssuo.mutation.SetTotalStablecoinToTokenSwapEvents(s)
	return sssuo
}

// SetNillableTotalStablecoinToTokenSwapEvents sets the "totalStablecoinToTokenSwapEvents" field if the given value is not nil.
func (sssuo *StableSwapStatUpdateOne) SetNillableTotalStablecoinToTokenSwapEvents(s *string) *StableSwapStatUpdateOne {
	if s != nil {
		sssuo.SetTotalStablecoinToTokenSwapEvents(*s)
	}
	return sssuo
}

// SetRemainingDailySwapAmount sets the "remainingDailySwapAmount" field.
func (sssuo *StableSwapStatUpdateOne) SetRemainingDailySwapAmount(s string) *StableSwapStatUpdateOne {
	sssuo.mutation.SetRemainingDailySwapAmount(s)
	return sssuo
}

// SetNillableRemainingDailySwapAmount sets the "remainingDailySwapAmount" field if the given value is not nil.
func (sssuo *StableSwapStatUpdateOne) SetNillableRemainingDailySwapAmount(s *string) *StableSwapStatUpdateOne {
	if s != nil {
		sssuo.SetRemainingDailySwapAmount(*s)
	}
	return sssuo
}

// SetTokenToStablecoinTotalSwapValue sets the "tokenToStablecoinTotalSwapValue" field.
func (sssuo *StableSwapStatUpdateOne) SetTokenToStablecoinTotalSwapValue(s string) *StableSwapStatUpdateOne {
	sssuo.mutation.SetTokenToStablecoinTotalSwapValue(s)
	return sssuo
}

// SetNillableTokenToStablecoinTotalSwapValue sets the "tokenToStablecoinTotalSwapValue" field if the given value is not nil.
func (sssuo *StableSwapStatUpdateOne) SetNillableTokenToStablecoinTotalSwapValue(s *string) *StableSwapStatUpdateOne {
	if s != nil {
		sssuo.SetTokenToStablecoinTotalSwapValue(*s)
	}
	return sssuo
}

// SetStablecoinToTokenTotalSwapValue sets the "stablecoinToTokenTotalSwapValue" field.
func (sssuo *StableSwapStatUpdateOne) SetStablecoinToTokenTotalSwapValue(s string) *StableSwapStatUpdateOne {
	sssuo.mutation.SetStablecoinToTokenTotalSwapValue(s)
	return sssuo
}

// SetNillableStablecoinToTokenTotalSwapValue sets the "stablecoinToTokenTotalSwapValue" field if the given value is not nil.
func (sssuo *StableSwapStatUpdateOne) SetNillableStablecoinToTokenTotalSwapValue(s *string) *StableSwapStatUpdateOne {
	if s != nil {
		sssuo.SetStablecoinToTokenTotalSwapValue(*s)
	}
	return sssuo
}

// Mutation returns the StableSwapStatMutation object of the builder.
func (sssuo *StableSwapStatUpdateOne) Mutation() *StableSwapStatMutation {
	return sssuo.mutation
}

// Where appends a list predicates to the StableSwapStatUpdate builder.
func (sssuo *StableSwapStatUpdateOne) Where(ps ...predicate.StableSwapStat) *StableSwapStatUpdateOne {
	sssuo.mutation.Where(ps...)
	return sssuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (sssuo *StableSwapStatUpdateOne) Select(field string, fields ...string) *StableSwapStatUpdateOne {
	sssuo.fields = append([]string{field}, fields...)
	return sssuo
}

// Save executes the query and returns the updated StableSwapStat entity.
func (sssuo *StableSwapStatUpdateOne) Save(ctx context.Context) (*StableSwapStat, error) {
	return withHooks(ctx, sssuo.sqlSave, sssuo.mutation, sssuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (sssuo *StableSwapStatUpdateOne) SaveX(ctx context.Context) *StableSwapStat {
	node, err := sssuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (sssuo *StableSwapStatUpdateOne) Exec(ctx context.Context) error {
	_, err := sssuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (sssuo *StableSwapStatUpdateOne) ExecX(ctx context.Context) {
	if err := sssuo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (sssuo *StableSwapStatUpdateOne) sqlSave(ctx context.Context) (_node *StableSwapStat, err error) {
	_spec := sqlgraph.NewUpdateSpec(stableswapstat.Table, stableswapstat.Columns, sqlgraph.NewFieldSpec(stableswapstat.FieldID, field.TypeString))
	id, ok := sssuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "StableSwapStat.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := sssuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, stableswapstat.FieldID)
		for _, f := range fields {
			if !stableswapstat.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != stableswapstat.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := sssuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := sssuo.mutation.TotalTokenToStablecoinSwapEvents(); ok {
		_spec.SetField(stableswapstat.FieldTotalTokenToStablecoinSwapEvents, field.TypeString, value)
	}
	if value, ok := sssuo.mutation.TotalStablecoinToTokenSwapEvents(); ok {
		_spec.SetField(stableswapstat.FieldTotalStablecoinToTokenSwapEvents, field.TypeString, value)
	}
	if value, ok := sssuo.mutation.RemainingDailySwapAmount(); ok {
		_spec.SetField(stableswapstat.FieldRemainingDailySwapAmount, field.TypeString, value)
	}
	if value, ok := sssuo.mutation.TokenToStablecoinTotalSwapValue(); ok {
		_spec.SetField(stableswapstat.FieldTokenToStablecoinTotalSwapValue, field.TypeString, value)
	}
	if value, ok := sssuo.mutation.StablecoinToTokenTotalSwapValue(); ok {
		_spec.SetField(stableswapstat.FieldStablecoinToTokenTotalSwapValue, field.TypeString, value)
	}
	_node = &StableSwapStat{config: sssuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, sssuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{stableswapstat.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	sssuo.mutation.done = true
	return _node, nil
}
