// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"log"
	"reflect"

	"github.com/tsisar/starknet-indexer/generated/ent/migrate"

	"entgo.io/ent"
	"entgo.io/ent/dialect"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/tsisar/starknet-indexer/generated/ent/block"
	"github.com/tsisar/starknet-indexer/generated/ent/meta"
	"github.com/tsisar/starknet-indexer/generated/ent/pool"
	"github.com/tsisar/starknet-indexer/generated/ent/position"
	"github.com/tsisar/starknet-indexer/generated/ent/positionactivity"
	"github.com/tsisar/starknet-indexer/generated/ent/protocolstat"
	"github.com/tsisar/starknet-indexer/generated/ent/stableswapstat"
	"github.com/tsisar/starknet-indexer/generated/ent/swapevent"
	"github.com/tsisar/starknet-indexer/generated/ent/user"
)

// Client is the client that holds all ent builders.
type Client struct {
	config
	// Schema is the client for creating, migrating and dropping schema.
	Schema *migrate.Schema
	// Block is the client for interacting with the Block builders.
	Block *BlockClient
	// Meta is the client for interacting with the Meta builders.
	Meta *MetaClient
	// Pool is the client for interacting with the Pool builders.
	Pool *PoolClient
	// Position is the client for interacting with the Position builders.
	Position *PositionClient
	// PositionActivity is the client for interacting with the PositionActivity builders.
	PositionActivity *PositionActivityClient
	// ProtocolStat is the client for interacting with the ProtocolStat builders.
	ProtocolStat *ProtocolStatClient
	// StableSwapStat is the client for interacting with the StableSwapStat builders.
	StableSwapStat *StableSwapStatClient
	// SwapEvent is the client for interacting with the SwapEvent builders.
	SwapEvent *SwapEventClient
	// User is the client for interacting with the User builders.
	User *UserClient
}

// NewClient creates a new client configured with the given options.
func NewClient(opts ...Option) *Client {
	client := &Client{config: newConfig(opts...)}
	client.init()
	return client
}

func (c *Client) init() {
	c.Schema = migrate.NewSchema(c.driver)
	c.Block = NewBlockClient(c.config)
	c.Meta = NewMetaClient(c.config)
	c.Pool = NewPoolClient(c.config)
	c.Position = NewPositionClient(c.config)
	c.PositionActivity = NewPositionActivityClient(c.config)
	c.ProtocolStat = NewProtocolStatClient(c.config)
	c.StableSwapStat = NewStableSwapStatClient(c.config)
	c.SwapEvent = NewSwapEventClient(c.config)
	c.User = NewUserClient(c.config)
}

type (
	// config is the configuration for the client and its builder.
	config struct {
		// driver used for executing database requests.
		driver dialect.Driver
		// debug enable a debug logging.
		debug bool
		// log used for logging on debug mode.
		log func(...any)
		// hooks to execute on mutations.
		hooks *hooks
		// interceptors to execute on queries.
		inters *inters
	}
	// Option function to configure the client.
	Option func(*config)
)

// newConfig creates a new config for the client.
func newConfig(opts ...Option) config {
	cfg := config{log: log.Println, hooks: &hooks{}, inters: &inters{}}
	cfg.options(opts...)
	return cfg
}

// options applies the options on the config object.
func (c *config) options(opts ...Option) {
	for _, opt := range opts {
		opt(c)
	}
	if c.debug {
		c.driver = dialect.Debug(c.driver, c.log)
	}
}

// Debug enables debug logging on the ent.Driver.
func Debug() Option {
	return func(c *config) {
		c.debug = true
	}
}

// Log sets the logging function for debug mode.
func Log(fn func(...any)) Option {
	return func(c *config) {
		c.log = fn
	}
}

// Driver configures the client driver.
func Driver(driver dialect.Driver) Option {
	return func(c *config) {
		c.driver = driver
	}
}

// Open opens a database/sql.DB specified by the driver name and
// the data source name, and returns a new client attached to it.
// Optional parameters can be added for configuring the client.
func Open(driverName, dataSourceName string, options ...Option) (*Client, error) {
	switch driverName {
	case dialect.MySQL, dialect.Postgres, dialect.SQLite:
		drv, err := sql.Open(driverName, dataSourceName)
		if err != nil {
			return nil, err
		}
		return NewClient(append(options, Driver(drv))...), nil
	default:
		return nil, fmt.Errorf("unsupported driver: %q", driverName)
	}
}

// ErrTxStarted is returned when trying to start a new transaction from a transactional client.
var ErrTxStarted = errors.New("ent: cannot start a transaction within a transaction")

// Tx returns a new transactional client. The provided context
// is used until the transaction is committed or rolled back.
func (c *Client) Tx(ctx context.Context) (*Tx, error) {
	if _, ok := c.driver.(*txDriver); ok {
		return nil, ErrTxStarted
	}
	tx, err := newTx(ctx, c.driver)
	if err != nil {
		return nil, fmt.Errorf("ent: starting a transaction: %w", err)
	}
	cfg := c.config
	cfg.driver = tx
	return &Tx{
		ctx:              ctx,
		config:           cfg,
		Block:            NewBlockClient(cfg),
		Meta:             NewMetaClient(cfg),
		Pool:             NewPoolClient(cfg),
		Position:         NewPositionClient(cfg),
		PositionActivity: NewPositionActivityClient(cfg),
		ProtocolStat:     NewProtocolStatClient(cfg),
		StableSwapStat:   NewStableSwapStatClient(cfg),
		SwapEvent:        NewSwapEventClient(cfg),
		User:             NewUserClient(cfg),
	}, nil
}

// BeginTx returns a transactional client with specified options.
func (c *Client) BeginTx(ctx context.Context, opts *sql.TxOptions) (*Tx, error) {
	if _, ok := c.driver.(*txDriver); ok {
		return nil, errors.New("ent: cannot start a transaction within a transaction")
	}
	tx, err := c.driver.(interface {
		BeginTx(context.Context, *sql.TxOptions) (dialect.Tx, error)
	}).BeginTx(ctx, opts)
	if err != nil {
		return nil, fmt.Errorf("ent: starting a transaction: %w", err)
	}
	cfg := c.config
	cfg.driver = &txDriver{tx: tx, drv: c.driver}
	return &Tx{
		ctx:              ctx,
		config:           cfg,
		Block:            NewBlockClient(cfg),
		Meta:             NewMetaClient(cfg),
		Pool:             NewPoolClient(cfg),
		Position:         NewPositionClient(cfg),
		PositionActivity: NewPositionActivityClient(cfg),
		ProtocolStat:     NewProtocolStatClient(cfg),
		StableSwapStat:   NewStableSwapStatClient(cfg),
		SwapEvent:        NewSwapEventClient(cfg),
		User:             NewUserClient(cfg),
	}, nil
}

// Debug returns a new debug-client. It's used to get verbose logging on specific operations.
//
//	client.Debug().
//		Block.
//		Query().
//		Count(ctx)
func (c *Client) Debug() *Client {
	if c.debug {
		return c
	}
	cfg := c.config
	cfg.driver = dialect.Debug(c.driver, c.log)
	client := &Client{config: cfg}
	client.init()
	return client
}

// Close closes the database connection and prevents new queries from starting.
func (c *Client) Close() error {
	return c.driver.Close()
}

// Use adds the mutation hooks to all the entity clients.
// In order to add hooks to a specific client, call: `client.Node.Use(...)`.
func (c *Client) Use(hooks ...Hook) {
	for _, n := range []interface{ Use(...Hook) }{
		c.Block, c.Meta, c.Pool, c.Position, c.PositionActivity, c.ProtocolStat,
		c.StableSwapStat, c.SwapEvent, c.User,
	} {
		n.Use(hooks...)
	}
}

// Intercept adds the query interceptors to all the entity clients.
// In order to add interceptors to a specific client, call: `client.Node.Intercept(...)`.
func (c *Client) Intercept(interceptors ...Interceptor) {
	for _, n := range []interface{ Intercept(...Interceptor) }{
		c.Block, c.Meta, c.Pool, c.Position, c.PositionActivity, c.ProtocolStat,
		c.StableSwapStat, c.SwapEvent, c.User,
	} {
		n.Intercept(interceptors...)
	}
}

// Mutate implements the ent.Mutator interface.
func (c *Client) Mutate(ctx context.Context, m Mutation) (Value, error) {
	switch m := m.(type) {
	case *BlockMutation:
		return c.Block.mutate(ctx, m)
	case *MetaMutation:
		return c.Meta.mutate(ctx, m)
	case *PoolMutation:
		return c.Pool.mutate(ctx, m)
	case *PositionMutation:
		return c.Position.mutate(ctx, m)
	case *PositionActivityMutation:
		return c.PositionActivity.mutate(ctx, m)
	case *ProtocolStatMutation:
		return c.ProtocolStat.mutate(ctx, m)
	case *StableSwapStatMutation:
		return c.StableSwapStat.mutate(ctx, m)
	case *SwapEventMutation:
		return c.SwapEvent.mutate(ctx, m)
	case *UserMutation:
		return c.User.mutate(ctx, m)
	default:
		return nil, fmt.Errorf("ent: unknown mutation type %T", m)
	}
}

// BlockClient is a client for the Block schema.
type BlockClient struct {
	config
}

// NewBlockClient returns a client for the Block from the given config.
func NewBlockClient(c config) *BlockClient {
	return &BlockClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `block.Hooks(f(g(h())))`.
func (c *BlockClient) Use(hooks ...Hook) {
	c.hooks.Block = append(c.hooks.Block, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `block.Intercept(f(g(h())))`.
func (c *BlockClient) Intercept(interceptors ...Interceptor) {
	c.inters.Block = append(c.inters.Block, interceptors...)
}

// Create returns a builder for creating a Block entity.
func (c *BlockClient) Create() *BlockCreate {
	mutation := newBlockMutation(c.config, OpCreate)
	return &BlockCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Block entities.
func (c *BlockClient) CreateBulk(builders ...*BlockCreate) *BlockCreateBulk {
	return &BlockCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *BlockClient) MapCreateBulk(slice any, setFunc func(*BlockCreate, int)) *BlockCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &BlockCreateBulk{err: fmt.Errorf("calling to BlockClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*BlockCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &BlockCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Block.
func (c *BlockClient) Update() *BlockUpdate {
	mutation := newBlockMutation(c.config, OpUpdate)
	return &BlockUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *BlockClient) UpdateOne(b *Block) *BlockUpdateOne {
	mutation := newBlockMutation(c.config, OpUpdateOne, withBlock(b))
	return &BlockUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *BlockClient) UpdateOneID(id int) *BlockUpdateOne {
	mutation := newBlockMutation(c.config, OpUpdateOne, withBlockID(id))
	return &BlockUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Block.
func (c *BlockClient) Delete() *BlockDelete {
	mutation := newBlockMutation(c.config, OpDelete)
	return &BlockDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *BlockClient) DeleteOne(b *Block) *BlockDeleteOne {
	return c.DeleteOneID(b.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *BlockClient) DeleteOneID(id int) *BlockDeleteOne {
	builder := c.Delete().Where(block.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &BlockDeleteOne{builder}
}

// Query returns a query builder for Block.
func (c *BlockClient) Query() *BlockQuery {
	return &BlockQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeBlock},
		inters: c.Interceptors(),
	}
}

// Get returns a Block entity by its id.
func (c *BlockClient) Get(ctx context.Context, id int) (*Block, error) {
	return c.Query().Where(block.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *BlockClient) GetX(ctx context.Context, id int) *Block {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *BlockClient) Hooks() []Hook {
	return c.hooks.Block
}

// Interceptors returns the client interceptors.
func (c *BlockClient) Interceptors() []Interceptor {
	return c.inters.Block
}

func (c *BlockClient) mutate(ctx context.Context, m *BlockMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&BlockCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&BlockUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&BlockUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&BlockDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown Block mutation op: %q", m.Op())
	}
}

// MetaClient is a client for the Meta schema.
type MetaClient struct {
	config
}

// NewMetaClient returns a client for the Meta from the given config.
func NewMetaClient(c config) *MetaClient {
	return &MetaClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `meta.Hooks(f(g(h())))`.
func (c *MetaClient) Use(hooks ...Hook) {
	c.hooks.Meta = append(c.hooks.Meta, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `meta.Intercept(f(g(h())))`.
func (c *MetaClient) Intercept(interceptors ...Interceptor) {
	c.inters.Meta = append(c.inters.Meta, interceptors...)
}

// Create returns a builder for creating a Meta entity.
func (c *MetaClient) Create() *MetaCreate {
	mutation := newMetaMutation(c.config, OpCreate)
	return &MetaCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Meta entities.
func (c *MetaClient) CreateBulk(builders ...*MetaCreate) *MetaCreateBulk {
	return &MetaCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *MetaClient) MapCreateBulk(slice any, setFunc func(*MetaCreate, int)) *MetaCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &MetaCreateBulk{err: fmt.Errorf("calling to MetaClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*MetaCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &MetaCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Meta.
func (c *MetaClient) Update() *MetaUpdate {
	mutation := newMetaMutation(c.config, OpUpdate)
	return &MetaUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *MetaClient) UpdateOne(m *Meta) *MetaUpdateOne {
	mutation := newMetaMutation(c.config, OpUpdateOne, withMeta(m))
	return &MetaUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *MetaClient) UpdateOneID(id int) *MetaUpdateOne {
	mutation := newMetaMutation(c.config, OpUpdateOne, withMetaID(id))
	return &MetaUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Meta.
func (c *MetaClient) Delete() *MetaDelete {
	mutation := newMetaMutation(c.config, OpDelete)
	return &MetaDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *MetaClient) DeleteOne(m *Meta) *MetaDeleteOne {
	return c.DeleteOneID(m.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *MetaClient) DeleteOneID(id int) *MetaDeleteOne {
	builder := c.Delete().Where(meta.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &MetaDeleteOne{builder}
}

// Query returns a query builder for Meta.
func (c *MetaClient) Query() *MetaQuery {
	return &MetaQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeMeta},
		inters: c.Interceptors(),
	}
}

// Get returns a Meta entity by its id.
func (c *MetaClient) Get(ctx context.Context, id int) (*Meta, error) {
	return c.Query().Where(meta.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *MetaClient) GetX(ctx context.Context, id int) *Meta {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryBlock queries the block edge of a Meta.
func (c *MetaClient) QueryBlock(m *Meta) *BlockQuery {
	query := (&BlockClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := m.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(meta.Table, meta.FieldID, id),
			sqlgraph.To(block.Table, block.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, meta.BlockTable, meta.BlockColumn),
		)
		fromV = sqlgraph.Neighbors(m.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *MetaClient) Hooks() []Hook {
	return c.hooks.Meta
}

// Interceptors returns the client interceptors.
func (c *MetaClient) Interceptors() []Interceptor {
	return c.inters.Meta
}

func (c *MetaClient) mutate(ctx context.Context, m *MetaMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&MetaCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&MetaUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&MetaUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&MetaDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown Meta mutation op: %q", m.Op())
	}
}

// PoolClient is a client for the Pool schema.
type PoolClient struct {
	config
}

// NewPoolClient returns a client for the Pool from the given config.
func NewPoolClient(c config) *PoolClient {
	return &PoolClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `pool.Hooks(f(g(h())))`.
func (c *PoolClient) Use(hooks ...Hook) {
	c.hooks.Pool = append(c.hooks.Pool, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `pool.Intercept(f(g(h())))`.
func (c *PoolClient) Intercept(interceptors ...Interceptor) {
	c.inters.Pool = append(c.inters.Pool, interceptors...)
}

// Create returns a builder for creating a Pool entity.
func (c *PoolClient) Create() *PoolCreate {
	mutation := newPoolMutation(c.config, OpCreate)
	return &PoolCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Pool entities.
func (c *PoolClient) CreateBulk(builders ...*PoolCreate) *PoolCreateBulk {
	return &PoolCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *PoolClient) MapCreateBulk(slice any, setFunc func(*PoolCreate, int)) *PoolCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &PoolCreateBulk{err: fmt.Errorf("calling to PoolClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*PoolCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &PoolCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Pool.
func (c *PoolClient) Update() *PoolUpdate {
	mutation := newPoolMutation(c.config, OpUpdate)
	return &PoolUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *PoolClient) UpdateOne(po *Pool) *PoolUpdateOne {
	mutation := newPoolMutation(c.config, OpUpdateOne, withPool(po))
	return &PoolUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *PoolClient) UpdateOneID(id string) *PoolUpdateOne {
	mutation := newPoolMutation(c.config, OpUpdateOne, withPoolID(id))
	return &PoolUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Pool.
func (c *PoolClient) Delete() *PoolDelete {
	mutation := newPoolMutation(c.config, OpDelete)
	return &PoolDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *PoolClient) DeleteOne(po *Pool) *PoolDeleteOne {
	return c.DeleteOneID(po.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *PoolClient) DeleteOneID(id string) *PoolDeleteOne {
	builder := c.Delete().Where(pool.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &PoolDeleteOne{builder}
}

// Query returns a query builder for Pool.
func (c *PoolClient) Query() *PoolQuery {
	return &PoolQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypePool},
		inters: c.Interceptors(),
	}
}

// Get returns a Pool entity by its id.
func (c *PoolClient) Get(ctx context.Context, id string) (*Pool, error) {
	return c.Query().Where(pool.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *PoolClient) GetX(ctx context.Context, id string) *Pool {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryPositions queries the positions edge of a Pool.
func (c *PoolClient) QueryPositions(po *Pool) *PositionQuery {
	query := (&PositionClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := po.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(pool.Table, pool.FieldID, id),
			sqlgraph.To(position.Table, position.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, pool.PositionsTable, pool.PositionsColumn),
		)
		fromV = sqlgraph.Neighbors(po.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *PoolClient) Hooks() []Hook {
	return c.hooks.Pool
}

// Interceptors returns the client interceptors.
func (c *PoolClient) Interceptors() []Interceptor {
	return c.inters.Pool
}

func (c *PoolClient) mutate(ctx context.Context, m *PoolMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&PoolCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&PoolUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&PoolUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&PoolDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown Pool mutation op: %q", m.Op())
	}
}

// PositionClient is a client for the Position schema.
type PositionClient struct {
	config
}

// NewPositionClient returns a client for the Position from the given config.
func NewPositionClient(c config) *PositionClient {
	return &PositionClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `position.Hooks(f(g(h())))`.
func (c *PositionClient) Use(hooks ...Hook) {
	c.hooks.Position = append(c.hooks.Position, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `position.Intercept(f(g(h())))`.
func (c *PositionClient) Intercept(interceptors ...Interceptor) {
	c.inters.Position = append(c.inters.Position, interceptors...)
}

// Create returns a builder for creating a Position entity.
func (c *PositionClient) Create() *PositionCreate {
	mutation := newPositionMutation(c.config, OpCreate)
	return &PositionCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Position entities.
func (c *PositionClient) CreateBulk(builders ...*PositionCreate) *PositionCreateBulk {
	return &PositionCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *PositionClient) MapCreateBulk(slice any, setFunc func(*PositionCreate, int)) *PositionCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &PositionCreateBulk{err: fmt.Errorf("calling to PositionClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*PositionCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &PositionCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Position.
func (c *PositionClient) Update() *PositionUpdate {
	mutation := newPositionMutation(c.config, OpUpdate)
	return &PositionUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *PositionClient) UpdateOne(po *Position) *PositionUpdateOne {
	mutation := newPositionMutation(c.config, OpUpdateOne, withPosition(po))
	return &PositionUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *PositionClient) UpdateOneID(id string) *PositionUpdateOne {
	mutation := newPositionMutation(c.config, OpUpdateOne, withPositionID(id))
	return &PositionUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Position.
func (c *PositionClient) Delete() *PositionDelete {
	mutation := newPositionMutation(c.config, OpDelete)
	return &PositionDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *PositionClient) DeleteOne(po *Position) *PositionDeleteOne {
	return c.DeleteOneID(po.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *PositionClient) DeleteOneID(id string) *PositionDeleteOne {
	builder := c.Delete().Where(position.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &PositionDeleteOne{builder}
}

// Query returns a query builder for Position.
func (c *PositionClient) Query() *PositionQuery {
	return &PositionQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypePosition},
		inters: c.Interceptors(),
	}
}

// Get returns a Position entity by its id.
func (c *PositionClient) Get(ctx context.Context, id string) (*Position, error) {
	return c.Query().Where(position.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *PositionClient) GetX(ctx context.Context, id string) *Position {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryPool queries the pool edge of a Position.
func (c *PositionClient) QueryPool(po *Position) *PoolQuery {
	query := (&PoolClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := po.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(position.Table, position.FieldID, id),
			sqlgraph.To(pool.Table, pool.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, position.PoolTable, position.PoolColumn),
		)
		fromV = sqlgraph.Neighbors(po.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryActivity queries the activity edge of a Position.
func (c *PositionClient) QueryActivity(po *Position) *PositionActivityQuery {
	query := (&PositionActivityClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := po.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(position.Table, position.FieldID, id),
			sqlgraph.To(positionactivity.Table, positionactivity.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, position.ActivityTable, position.ActivityColumn),
		)
		fromV = sqlgraph.Neighbors(po.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *PositionClient) Hooks() []Hook {
	return c.hooks.Position
}

// Interceptors returns the client interceptors.
func (c *PositionClient) Interceptors() []Interceptor {
	return c.inters.Position
}

func (c *PositionClient) mutate(ctx context.Context, m *PositionMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&PositionCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&PositionUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&PositionUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&PositionDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown Position mutation op: %q", m.Op())
	}
}

// PositionActivityClient is a client for the PositionActivity schema.
type PositionActivityClient struct {
	config
}

// NewPositionActivityClient returns a client for the PositionActivity from the given config.
func NewPositionActivityClient(c config) *PositionActivityClient {
	return &PositionActivityClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `positionactivity.Hooks(f(g(h())))`.
func (c *PositionActivityClient) Use(hooks ...Hook) {
	c.hooks.PositionActivity = append(c.hooks.PositionActivity, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `positionactivity.Intercept(f(g(h())))`.
func (c *PositionActivityClient) Intercept(interceptors ...Interceptor) {
	c.inters.PositionActivity = append(c.inters.PositionActivity, interceptors...)
}

// Create returns a builder for creating a PositionActivity entity.
func (c *PositionActivityClient) Create() *PositionActivityCreate {
	mutation := newPositionActivityMutation(c.config, OpCreate)
	return &PositionActivityCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of PositionActivity entities.
func (c *PositionActivityClient) CreateBulk(builders ...*PositionActivityCreate) *PositionActivityCreateBulk {
	return &PositionActivityCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *PositionActivityClient) MapCreateBulk(slice any, setFunc func(*PositionActivityCreate, int)) *PositionActivityCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &PositionActivityCreateBulk{err: fmt.Errorf("calling to PositionActivityClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*PositionActivityCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &PositionActivityCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for PositionActivity.
func (c *PositionActivityClient) Update() *PositionActivityUpdate {
	mutation := newPositionActivityMutation(c.config, OpUpdate)
	return &PositionActivityUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *PositionActivityClient) UpdateOne(pa *PositionActivity) *PositionActivityUpdateOne {
	mutation := newPositionActivityMutation(c.config, OpUpdateOne, withPositionActivity(pa))
	return &PositionActivityUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *PositionActivityClient) UpdateOneID(id string) *PositionActivityUpdateOne {
	mutation := newPositionActivityMutation(c.config, OpUpdateOne, withPositionActivityID(id))
	return &PositionActivityUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for PositionActivity.
func (c *PositionActivityClient) Delete() *PositionActivityDelete {
	mutation := newPositionActivityMutation(c.config, OpDelete)
	return &PositionActivityDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *PositionActivityClient) DeleteOne(pa *PositionActivity) *PositionActivityDeleteOne {
	return c.DeleteOneID(pa.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *PositionActivityClient) DeleteOneID(id string) *PositionActivityDeleteOne {
	builder := c.Delete().Where(positionactivity.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &PositionActivityDeleteOne{builder}
}

// Query returns a query builder for PositionActivity.
func (c *PositionActivityClient) Query() *PositionActivityQuery {
	return &PositionActivityQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypePositionActivity},
		inters: c.Interceptors(),
	}
}

// Get returns a PositionActivity entity by its id.
func (c *PositionActivityClient) Get(ctx context.Context, id string) (*PositionActivity, error) {
	return c.Query().Where(positionactivity.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *PositionActivityClient) GetX(ctx context.Context, id string) *PositionActivity {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryPosition queries the position edge of a PositionActivity.
func (c *PositionActivityClient) QueryPosition(pa *PositionActivity) *PositionQuery {
	query := (&PositionClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := pa.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(positionactivity.Table, positionactivity.FieldID, id),
			sqlgraph.To(position.Table, position.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, positionactivity.PositionTable, positionactivity.PositionColumn),
		)
		fromV = sqlgraph.Neighbors(pa.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *PositionActivityClient) Hooks() []Hook {
	return c.hooks.PositionActivity
}

// Interceptors returns the client interceptors.
func (c *PositionActivityClient) Interceptors() []Interceptor {
	return c.inters.PositionActivity
}

func (c *PositionActivityClient) mutate(ctx context.Context, m *PositionActivityMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&PositionActivityCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&PositionActivityUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&PositionActivityUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&PositionActivityDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown PositionActivity mutation op: %q", m.Op())
	}
}

// ProtocolStatClient is a client for the ProtocolStat schema.
type ProtocolStatClient struct {
	config
}

// NewProtocolStatClient returns a client for the ProtocolStat from the given config.
func NewProtocolStatClient(c config) *ProtocolStatClient {
	return &ProtocolStatClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `protocolstat.Hooks(f(g(h())))`.
func (c *ProtocolStatClient) Use(hooks ...Hook) {
	c.hooks.ProtocolStat = append(c.hooks.ProtocolStat, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `protocolstat.Intercept(f(g(h())))`.
func (c *ProtocolStatClient) Intercept(interceptors ...Interceptor) {
	c.inters.ProtocolStat = append(c.inters.ProtocolStat, interceptors...)
}

// Create returns a builder for creating a ProtocolStat entity.
func (c *ProtocolStatClient) Create() *ProtocolStatCreate {
	mutation := newProtocolStatMutation(c.config, OpCreate)
	return &ProtocolStatCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of ProtocolStat entities.
func (c *ProtocolStatClient) CreateBulk(builders ...*ProtocolStatCreate) *ProtocolStatCreateBulk {
	return &ProtocolStatCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *ProtocolStatClient) MapCreateBulk(slice any, setFunc func(*ProtocolStatCreate, int)) *ProtocolStatCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &ProtocolStatCreateBulk{err: fmt.Errorf("calling to ProtocolStatClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*ProtocolStatCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &ProtocolStatCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for ProtocolStat.
func (c *ProtocolStatClient) Update() *ProtocolStatUpdate {
	mutation := newProtocolStatMutation(c.config, OpUpdate)
	return &ProtocolStatUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *ProtocolStatClient) UpdateOne(ps *ProtocolStat) *ProtocolStatUpdateOne {
	mutation := newProtocolStatMutation(c.config, OpUpdateOne, withProtocolStat(ps))
	return &ProtocolStatUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *ProtocolStatClient) UpdateOneID(id string) *ProtocolStatUpdateOne {
	mutation := newProtocolStatMutation(c.config, OpUpdateOne, withProtocolStatID(id))
	return &ProtocolStatUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for ProtocolStat.
func (c *ProtocolStatClient) Delete() *ProtocolStatDelete {
	mutation := newProtocolStatMutation(c.config, OpDelete)
	return &ProtocolStatDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *ProtocolStatClient) DeleteOne(ps *ProtocolStat) *ProtocolStatDeleteOne {
	return c.DeleteOneID(ps.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *ProtocolStatClient) DeleteOneID(id string) *ProtocolStatDeleteOne {
	builder := c.Delete().Where(protocolstat.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &ProtocolStatDeleteOne{builder}
}

// Query returns a query builder for ProtocolStat.
func (c *ProtocolStatClient) Query() *ProtocolStatQuery {
	return &ProtocolStatQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeProtocolStat},
		inters: c.Interceptors(),
	}
}

// Get returns a ProtocolStat entity by its id.
func (c *ProtocolStatClient) Get(ctx context.Context, id string) (*ProtocolStat, error) {
	return c.Query().Where(protocolstat.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *ProtocolStatClient) GetX(ctx context.Context, id string) *ProtocolStat {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *ProtocolStatClient) Hooks() []Hook {
	return c.hooks.ProtocolStat
}

// Interceptors returns the client interceptors.
func (c *ProtocolStatClient) Interceptors() []Interceptor {
	return c.inters.ProtocolStat
}

func (c *ProtocolStatClient) mutate(ctx context.Context, m *ProtocolStatMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&ProtocolStatCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&ProtocolStatUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&ProtocolStatUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&ProtocolStatDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown ProtocolStat mutation op: %q", m.Op())
	}
}

// StableSwapStatClient is a client for the StableSwapStat schema.
type StableSwapStatClient struct {
	config
}

// NewStableSwapStatClient returns a client for the StableSwapStat from the given config.
func NewStableSwapStatClient(c config) *StableSwapStatClient {
	return &StableSwapStatClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `stableswapstat.Hooks(f(g(h())))`.
func (c *StableSwapStatClient) Use(hooks ...Hook) {
	c.hooks.StableSwapStat = append(c.hooks.StableSwapStat, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `stableswapstat.Intercept(f(g(h())))`.
func (c *StableSwapStatClient) Intercept(interceptors ...Interceptor) {
	c.inters.StableSwapStat = append(c.inters.StableSwapStat, interceptors...)
}

// Create returns a builder for creating a StableSwapStat entity.
func (c *StableSwapStatClient) Create() *StableSwapStatCreate {
	mutation := newStableSwapStatMutation(c.config, OpCreate)
	return &StableSwapStatCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of StableSwapStat entities.
func (c *StableSwapStatClient) CreateBulk(builders ...*StableSwapStatCreate) *StableSwapStatCreateBulk {
	return &StableSwapStatCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *StableSwapStatClient) MapCreateBulk(slice any, setFunc func(*StableSwapStatCreate, int)) *StableSwapStatCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &StableSwapStatCreateBulk{err: fmt.Errorf("calling to StableSwapStatClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*StableSwapStatCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &StableSwapStatCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for StableSwapStat.
func (c *StableSwapStatClient) Update() *StableSwapStatUpdate {
	mutation := newStableSwapStatMutation(c.config, OpUpdate)
	return &StableSwapStatUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *StableSwapStatClient) UpdateOne(sss *StableSwapStat) *StableSwapStatUpdateOne {
	mutation := newStableSwapStatMutation(c.config, OpUpdateOne, withStableSwapStat(sss))
	return &StableSwapStatUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *StableSwapStatClient) UpdateOneID(id string) *StableSwapStatUpdateOne {
	mutation := newStableSwapStatMutation(c.config, OpUpdateOne, withStableSwapStatID(id))
	return &StableSwapStatUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for StableSwapStat.
func (c *StableSwapStatClient) Delete() *StableSwapStatDelete {
	mutation := newStableSwapStatMutation(c.config, OpDelete)
	return &StableSwapStatDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *StableSwapStatClient) DeleteOne(sss *StableSwapStat) *StableSwapStatDeleteOne {
	return c.DeleteOneID(sss.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *StableSwapStatClient) DeleteOneID(id string) *StableSwapStatDeleteOne {
	builder := c.Delete().Where(stableswapstat.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &StableSwapStatDeleteOne{builder}
}

// Query returns a query builder for StableSwapStat.
func (c *StableSwapStatClient) Query() *StableSwapStatQuery {
	return &StableSwapStatQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeStableSwapStat},
		inters: c.Interceptors(),
	}
}

// Get returns a StableSwapStat entity by its id.
func (c *StableSwapStatClient) Get(ctx context.Context, id string) (*StableSwapStat, error) {
	return c.Query().Where(stableswapstat.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *StableSwapStatClient) GetX(ctx context.Context, id string) *StableSwapStat {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *StableSwapStatClient) Hooks() []Hook {
	return c.hooks.StableSwapStat
}

// Interceptors returns the client interceptors.
func (c *StableSwapStatClient) Interceptors() []Interceptor {
	return c.inters.StableSwapStat
}

func (c *StableSwapStatClient) mutate(ctx context.Context, m *StableSwapStatMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&StableSwapStatCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&StableSwapStatUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&StableSwapStatUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&StableSwapStatDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown StableSwapStat mutation op: %q", m.Op())
	}
}

// SwapEventClient is a client for the SwapEvent schema.
type SwapEventClient struct {
	config
}

// NewSwapEventClient returns a client for the SwapEvent from the given config.
func NewSwapEventClient(c config) *SwapEventClient {
	return &SwapEventClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `swapevent.Hooks(f(g(h())))`.
func (c *SwapEventClient) Use(hooks ...Hook) {
	c.hooks.SwapEvent = append(c.hooks.SwapEvent, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `swapevent.Intercept(f(g(h())))`.
func (c *SwapEventClient) Intercept(interceptors ...Interceptor) {
	c.inters.SwapEvent = append(c.inters.SwapEvent, interceptors...)
}

// Create returns a builder for creating a SwapEvent entity.
func (c *SwapEventClient) Create() *SwapEventCreate {
	mutation := newSwapEventMutation(c.config, OpCreate)
	return &SwapEventCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of SwapEvent entities.
func (c *SwapEventClient) CreateBulk(builders ...*SwapEventCreate) *SwapEventCreateBulk {
	return &SwapEventCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *SwapEventClient) MapCreateBulk(slice any, setFunc func(*SwapEventCreate, int)) *SwapEventCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &SwapEventCreateBulk{err: fmt.Errorf("calling to SwapEventClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*SwapEventCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &SwapEventCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for SwapEvent.
func (c *SwapEventClient) Update() *SwapEventUpdate {
	mutation := newSwapEventMutation(c.config, OpUpdate)
	return &SwapEventUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *SwapEventClient) UpdateOne(se *SwapEvent) *SwapEventUpdateOne {
	mutation := newSwapEventMutation(c.config, OpUpdateOne, withSwapEvent(se))
	return &SwapEventUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *SwapEventClient) UpdateOneID(id string) *SwapEventUpdateOne {
	mutation := newSwapEventMutation(c.config, OpUpdateOne, withSwapEventID(id))
	return &SwapEventUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for SwapEvent.
func (c *SwapEventClient) Delete() *SwapEventDelete {
	mutation := newSwapEventMutation(c.config, OpDelete)
	return &SwapEventDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *SwapEventClient) DeleteOne(se *SwapEvent) *SwapEventDeleteOne {
	return c.DeleteOneID(se.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *SwapEventClient) DeleteOneID(id string) *SwapEventDeleteOne {
	builder := c.Delete().Where(swapevent.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &SwapEventDeleteOne{builder}
}

// Query returns a query builder for SwapEvent.
func (c *SwapEventClient) Query() *SwapEventQuery {
	return &SwapEventQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeSwapEvent},
		inters: c.Interceptors(),
	}
}

// Get returns a SwapEvent entity by its id.
func (c *SwapEventClient) Get(ctx context.Context, id string) (*SwapEvent, error) {
	return c.Query().Where(swapevent.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *SwapEventClient) GetX(ctx context.Context, id string) *SwapEvent {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *SwapEventClient) Hooks() []Hook {
	return c.hooks.SwapEvent
}

// Interceptors returns the client interceptors.
func (c *SwapEventClient) Interceptors() []Interceptor {
	return c.inters.SwapEvent
}

func (c *SwapEventClient) mutate(ctx context.Context, m *SwapEventMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&SwapEventCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&SwapEventUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&SwapEventUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&SwapEventDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown SwapEvent mutation op: %q", m.Op())
	}
}

// UserClient is a client for the User schema.
type UserClient struct {
	config
}

// NewUserClient returns a client for the User from the given config.
func NewUserClient(c config) *UserClient {
	return &UserClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `user.Hooks(f(g(h())))`.
func (c *UserClient) Use(hooks ...Hook) {
	c.hooks.User = append(c.hooks.User, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `user.Intercept(f(g(h())))`.
func (c *UserClient) Intercept(interceptors ...Interceptor) {
	c.inters.User = append(c.inters.User, interceptors...)
}

// Create returns a builder for creating a User entity.
func (c *UserClient) Create() *UserCreate {
	mutation := newUserMutation(c.config, OpCreate)
	return &UserCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of User entities.
func (c *UserClient) CreateBulk(builders ...*UserCreate) *UserCreateBulk {
	return &UserCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *UserClient) MapCreateBulk(slice any, setFunc func(*UserCreate, int)) *UserCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &UserCreateBulk{err: fmt.Errorf("calling to UserClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*UserCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &UserCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for User.
func (c *UserClient) Update() *UserUpdate {
	mutation := newUserMutation(c.config, OpUpdate)
	return &UserUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *UserClient) UpdateOne(u *User) *UserUpdateOne {
	mutation := newUserMutation(c.config, OpUpdateOne, withUser(u))
	return &UserUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *UserClient) UpdateOneID(id string) *UserUpdateOne {
	mutation := newUserMutation(c.config, OpUpdateOne, withUserID(id))
	return &UserUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for User.
func (c *UserClient) Delete() *UserDelete {
	mutation := newUserMutation(c.config, OpDelete)
	return &UserDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *UserClient) DeleteOne(u *User) *UserDeleteOne {
	return c.DeleteOneID(u.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *UserClient) DeleteOneID(id string) *UserDeleteOne {
	builder := c.Delete().Where(user.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &UserDeleteOne{builder}
}

// Query returns a query builder for User.
func (c *UserClient) Query() *UserQuery {
	return &UserQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeUser},
		inters: c.Interceptors(),
	}
}

// Get returns a User entity by its id.
func (c *UserClient) Get(ctx context.Context, id string) (*User, error) {
	return c.Query().Where(user.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *UserClient) GetX(ctx context.Context, id string) *User {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *UserClient) Hooks() []Hook {
	return c.hooks.User
}

// Interceptors returns the client interceptors.
func (c *UserClient) Interceptors() []Interceptor {
	return c.inters.User
}

func (c *UserClient) mutate(ctx context.Context, m *UserMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&UserCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&UserUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&UserUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&UserDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown User mutation op: %q", m.Op())
	}
}

// hooks and interceptors per client, for fast access.
type (
	hooks struct {
		Block, Meta, Pool, Position, PositionActivity, ProtocolStat, StableSwapStat,
		SwapEvent, User []ent.Hook
	}
	inters struct {
		Block, Meta, Pool, Position, PositionActivity, ProtocolStat, StableSwapStat,
		SwapEvent, User []ent.Interceptor
	}
)
