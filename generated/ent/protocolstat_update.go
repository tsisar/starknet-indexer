// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/Tsisar/starknet-indexer/generated/ent/predicate"
	"github.com/Tsisar/starknet-indexer/generated/ent/protocolstat"
)

// ProtocolStatUpdate is the builder for updating ProtocolStat entities.
type ProtocolStatUpdate struct {
	config
	hooks    []Hook
	mutation *ProtocolStatMutation
}

// Where appends a list predicates to the ProtocolStatUpdate builder.
func (psu *ProtocolStatUpdate) Where(ps ...predicate.ProtocolStat) *ProtocolStatUpdate {
	psu.mutation.Where(ps...)
	return psu
}

// SetTotalSupply sets the "totalSupply" field.
func (psu *ProtocolStatUpdate) SetTotalSupply(s string) *ProtocolStatUpdate {
	psu.mutation.SetTotalSupply(s)
	return psu
}

// SetNillableTotalSupply sets the "totalSupply" field if the given value is not nil.
func (psu *ProtocolStatUpdate) SetNillableTotalSupply(s *string) *ProtocolStatUpdate {
	if s != nil {
		psu.SetTotalSupply(*s)
	}
	return psu
}

// SetTvl sets the "tvl" field.
func (psu *ProtocolStatUpdate) SetTvl(s string) *ProtocolStatUpdate {
	psu.mutation.SetTvl(s)
	return psu
}

// SetNillableTvl sets the "tvl" field if the given value is not nil.
func (psu *ProtocolStatUpdate) SetNillableTvl(s *string) *ProtocolStatUpdate {
	if s != nil {
		psu.SetTvl(*s)
	}
	return psu
}

// SetPools sets the "pools" field.
func (psu *ProtocolStatUpdate) SetPools(s string) *ProtocolStatUpdate {
	psu.mutation.SetPools(s)
	return psu
}

// SetNillablePools sets the "pools" field if the given value is not nil.
func (psu *ProtocolStatUpdate) SetNillablePools(s *string) *ProtocolStatUpdate {
	if s != nil {
		psu.SetPools(*s)
	}
	return psu
}

// Mutation returns the ProtocolStatMutation object of the builder.
func (psu *ProtocolStatUpdate) Mutation() *ProtocolStatMutation {
	return psu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (psu *ProtocolStatUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, psu.sqlSave, psu.mutation, psu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (psu *ProtocolStatUpdate) SaveX(ctx context.Context) int {
	affected, err := psu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (psu *ProtocolStatUpdate) Exec(ctx context.Context) error {
	_, err := psu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (psu *ProtocolStatUpdate) ExecX(ctx context.Context) {
	if err := psu.Exec(ctx); err != nil {
		panic(err)
	}
}

func (psu *ProtocolStatUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(protocolstat.Table, protocolstat.Columns, sqlgraph.NewFieldSpec(protocolstat.FieldID, field.TypeString))
	if ps := psu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := psu.mutation.TotalSupply(); ok {
		_spec.SetField(protocolstat.FieldTotalSupply, field.TypeString, value)
	}
	if value, ok := psu.mutation.Tvl(); ok {
		_spec.SetField(protocolstat.FieldTvl, field.TypeString, value)
	}
	if value, ok := psu.mutation.Pools(); ok {
		_spec.SetField(protocolstat.FieldPools, field.TypeString, value)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, psu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{protocolstat.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	psu.mutation.done = true
	return n, nil
}

// ProtocolStatUpdateOne is the builder for updating a single ProtocolStat entity.
type ProtocolStatUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *ProtocolStatMutation
}

// SetTotalSupply sets the "totalSupply" field.
func (psuo *ProtocolStatUpdateOne) SetTotalSupply(s string) *ProtocolStatUpdateOne {
	psuo.mutation.SetTotalSupply(s)
	return psuo
}

// SetNillableTotalSupply sets the "totalSupply" field if the given value is not nil.
func (psuo *ProtocolStatUpdateOne) SetNillableTotalSupply(s *string) *ProtocolStatUpdateOne {
	if s != nil {
		psuo.SetTotalSupply(*s)
	}
	return psuo
}

// SetTvl sets the "tvl" field.
func (psuo *ProtocolStatUpdateOne) SetTvl(s string) *ProtocolStatUpdateOne {
	psuo.mutation.SetTvl(s)
	return psuo
}

// SetNillableTvl sets the "tvl" field if the given value is not nil.
func (psuo *ProtocolStatUpdateOne) SetNillableTvl(s *string) *ProtocolStatUpdateOne {
	if s != nil {
		psuo.SetTvl(*s)
	}
	return psuo
}

// SetPools sets the "pools" field.
func (psuo *ProtocolStatUpdateOne) SetPools(s string) *ProtocolStatUpdateOne {
	psuo.mutation.SetPools(s)
	return psuo
}

// SetNillablePools sets the "pools" field if the given value is not nil.
func (psuo *ProtocolStatUpdateOne) SetNillablePools(s *string) *ProtocolStatUpdateOne {
	if s != nil {
		psuo.SetPools(*s)
	}
	return psuo
}

// Mutation returns the ProtocolStatMutation object of the builder.
func (psuo *ProtocolStatUpdateOne) Mutation() *ProtocolStatMutation {
	return psuo.mutation
}

// Where appends a list predicates to the ProtocolStatUpdate builder.
func (psuo *ProtocolStatUpdateOne) Where(ps ...predicate.ProtocolStat) *ProtocolStatUpdateOne {
	psuo.mutation.Where(ps...)
	return psuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (psuo *ProtocolStatUpdateOne) Select(field string, fields ...string) *ProtocolStatUpdateOne {
	psuo.fields = append([]string{field}, fields...)
	return psuo
}

// Save executes the query and returns the updated ProtocolStat entity.
func (psuo *ProtocolStatUpdateOne) Save(ctx context.Context) (*ProtocolStat, error) {
	return withHooks(ctx, psuo.sqlSave, psuo.mutation, psuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (psuo *ProtocolStatUpdateOne) SaveX(ctx context.Context) *ProtocolStat {
	node, err := psuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (psuo *ProtocolStatUpdateOne) Exec(ctx context.Context) error {
	_, err := psuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (psuo *ProtocolStatUpdateOne) ExecX(ctx context.Context) {
	if err := psuo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (psuo *ProtocolStatUpdateOne) sqlSave(ctx context.Context) (_node *ProtocolStat, err error) {
	_spec := sqlgraph.NewUpdateSpec(protocolstat.Table, protocolstat.Columns, sqlgraph.NewFieldSpec(protocolstat.FieldID, field.TypeString))
	id, ok := psuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "ProtocolStat.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := psuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, protocolstat.FieldID)
		for _, f := range fields {
			if !protocolstat.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != protocolstat.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := psuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := psuo.mutation.TotalSupply(); ok {
		_spec.SetField(protocolstat.FieldTotalSupply, field.TypeString, value)
	}
	if value, ok := psuo.mutation.Tvl(); ok {
		_spec.SetField(protocolstat.FieldTvl, field.TypeString, value)
	}
	if value, ok := psuo.mutation.Pools(); ok {
		_spec.SetField(protocolstat.FieldPools, field.TypeString, value)
	}
	_node = &ProtocolStat{config: psuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, psuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{protocolstat.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	psuo.mutation.done = true
	return _node, nil
}
