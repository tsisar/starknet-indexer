// Code generated by ent, DO NOT EDIT.

package swapevent

import (
	"entgo.io/ent/dialect/sql"
	"github.com/Tsisar/starknet-indexer/generated/ent/predicate"
)

// ID filters vertices based on their ID field.
func ID(id string) predicate.SwapEvent {
	return predicate.SwapEvent(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id string) predicate.SwapEvent {
	return predicate.SwapEvent(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id string) predicate.SwapEvent {
	return predicate.SwapEvent(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...string) predicate.SwapEvent {
	return predicate.SwapEvent(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...string) predicate.SwapEvent {
	return predicate.SwapEvent(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id string) predicate.SwapEvent {
	return predicate.SwapEvent(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id string) predicate.SwapEvent {
	return predicate.SwapEvent(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id string) predicate.SwapEvent {
	return predicate.SwapEvent(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id string) predicate.SwapEvent {
	return predicate.SwapEvent(sql.FieldLTE(FieldID, id))
}

// IDEqualFold applies the EqualFold predicate on the ID field.
func IDEqualFold(id string) predicate.SwapEvent {
	return predicate.SwapEvent(sql.FieldEqualFold(FieldID, id))
}

// IDContainsFold applies the ContainsFold predicate on the ID field.
func IDContainsFold(id string) predicate.SwapEvent {
	return predicate.SwapEvent(sql.FieldContainsFold(FieldID, id))
}

// Fee applies equality check predicate on the "fee" field. It's identical to FeeEQ.
func Fee(v string) predicate.SwapEvent {
	return predicate.SwapEvent(sql.FieldEQ(FieldFee, v))
}

// Owner applies equality check predicate on the "owner" field. It's identical to OwnerEQ.
func Owner(v string) predicate.SwapEvent {
	return predicate.SwapEvent(sql.FieldEQ(FieldOwner, v))
}

// Value applies equality check predicate on the "value" field. It's identical to ValueEQ.
func Value(v string) predicate.SwapEvent {
	return predicate.SwapEvent(sql.FieldEQ(FieldValue, v))
}

// IsStablecoinToTokenSwap applies equality check predicate on the "isStablecoinToTokenSwap" field. It's identical to IsStablecoinToTokenSwapEQ.
func IsStablecoinToTokenSwap(v bool) predicate.SwapEvent {
	return predicate.SwapEvent(sql.FieldEQ(FieldIsStablecoinToTokenSwap, v))
}

// IsTokenToStablecoinSwap applies equality check predicate on the "isTokenToStablecoinSwap" field. It's identical to IsTokenToStablecoinSwapEQ.
func IsTokenToStablecoinSwap(v bool) predicate.SwapEvent {
	return predicate.SwapEvent(sql.FieldEQ(FieldIsTokenToStablecoinSwap, v))
}

// BlockNumber applies equality check predicate on the "blockNumber" field. It's identical to BlockNumberEQ.
func BlockNumber(v string) predicate.SwapEvent {
	return predicate.SwapEvent(sql.FieldEQ(FieldBlockNumber, v))
}

// BlockTimestamp applies equality check predicate on the "blockTimestamp" field. It's identical to BlockTimestampEQ.
func BlockTimestamp(v string) predicate.SwapEvent {
	return predicate.SwapEvent(sql.FieldEQ(FieldBlockTimestamp, v))
}

// Transaction applies equality check predicate on the "transaction" field. It's identical to TransactionEQ.
func Transaction(v string) predicate.SwapEvent {
	return predicate.SwapEvent(sql.FieldEQ(FieldTransaction, v))
}

// FeeEQ applies the EQ predicate on the "fee" field.
func FeeEQ(v string) predicate.SwapEvent {
	return predicate.SwapEvent(sql.FieldEQ(FieldFee, v))
}

// FeeNEQ applies the NEQ predicate on the "fee" field.
func FeeNEQ(v string) predicate.SwapEvent {
	return predicate.SwapEvent(sql.FieldNEQ(FieldFee, v))
}

// FeeIn applies the In predicate on the "fee" field.
func FeeIn(vs ...string) predicate.SwapEvent {
	return predicate.SwapEvent(sql.FieldIn(FieldFee, vs...))
}

// FeeNotIn applies the NotIn predicate on the "fee" field.
func FeeNotIn(vs ...string) predicate.SwapEvent {
	return predicate.SwapEvent(sql.FieldNotIn(FieldFee, vs...))
}

// FeeGT applies the GT predicate on the "fee" field.
func FeeGT(v string) predicate.SwapEvent {
	return predicate.SwapEvent(sql.FieldGT(FieldFee, v))
}

// FeeGTE applies the GTE predicate on the "fee" field.
func FeeGTE(v string) predicate.SwapEvent {
	return predicate.SwapEvent(sql.FieldGTE(FieldFee, v))
}

// FeeLT applies the LT predicate on the "fee" field.
func FeeLT(v string) predicate.SwapEvent {
	return predicate.SwapEvent(sql.FieldLT(FieldFee, v))
}

// FeeLTE applies the LTE predicate on the "fee" field.
func FeeLTE(v string) predicate.SwapEvent {
	return predicate.SwapEvent(sql.FieldLTE(FieldFee, v))
}

// FeeContains applies the Contains predicate on the "fee" field.
func FeeContains(v string) predicate.SwapEvent {
	return predicate.SwapEvent(sql.FieldContains(FieldFee, v))
}

// FeeHasPrefix applies the HasPrefix predicate on the "fee" field.
func FeeHasPrefix(v string) predicate.SwapEvent {
	return predicate.SwapEvent(sql.FieldHasPrefix(FieldFee, v))
}

// FeeHasSuffix applies the HasSuffix predicate on the "fee" field.
func FeeHasSuffix(v string) predicate.SwapEvent {
	return predicate.SwapEvent(sql.FieldHasSuffix(FieldFee, v))
}

// FeeEqualFold applies the EqualFold predicate on the "fee" field.
func FeeEqualFold(v string) predicate.SwapEvent {
	return predicate.SwapEvent(sql.FieldEqualFold(FieldFee, v))
}

// FeeContainsFold applies the ContainsFold predicate on the "fee" field.
func FeeContainsFold(v string) predicate.SwapEvent {
	return predicate.SwapEvent(sql.FieldContainsFold(FieldFee, v))
}

// OwnerEQ applies the EQ predicate on the "owner" field.
func OwnerEQ(v string) predicate.SwapEvent {
	return predicate.SwapEvent(sql.FieldEQ(FieldOwner, v))
}

// OwnerNEQ applies the NEQ predicate on the "owner" field.
func OwnerNEQ(v string) predicate.SwapEvent {
	return predicate.SwapEvent(sql.FieldNEQ(FieldOwner, v))
}

// OwnerIn applies the In predicate on the "owner" field.
func OwnerIn(vs ...string) predicate.SwapEvent {
	return predicate.SwapEvent(sql.FieldIn(FieldOwner, vs...))
}

// OwnerNotIn applies the NotIn predicate on the "owner" field.
func OwnerNotIn(vs ...string) predicate.SwapEvent {
	return predicate.SwapEvent(sql.FieldNotIn(FieldOwner, vs...))
}

// OwnerGT applies the GT predicate on the "owner" field.
func OwnerGT(v string) predicate.SwapEvent {
	return predicate.SwapEvent(sql.FieldGT(FieldOwner, v))
}

// OwnerGTE applies the GTE predicate on the "owner" field.
func OwnerGTE(v string) predicate.SwapEvent {
	return predicate.SwapEvent(sql.FieldGTE(FieldOwner, v))
}

// OwnerLT applies the LT predicate on the "owner" field.
func OwnerLT(v string) predicate.SwapEvent {
	return predicate.SwapEvent(sql.FieldLT(FieldOwner, v))
}

// OwnerLTE applies the LTE predicate on the "owner" field.
func OwnerLTE(v string) predicate.SwapEvent {
	return predicate.SwapEvent(sql.FieldLTE(FieldOwner, v))
}

// OwnerContains applies the Contains predicate on the "owner" field.
func OwnerContains(v string) predicate.SwapEvent {
	return predicate.SwapEvent(sql.FieldContains(FieldOwner, v))
}

// OwnerHasPrefix applies the HasPrefix predicate on the "owner" field.
func OwnerHasPrefix(v string) predicate.SwapEvent {
	return predicate.SwapEvent(sql.FieldHasPrefix(FieldOwner, v))
}

// OwnerHasSuffix applies the HasSuffix predicate on the "owner" field.
func OwnerHasSuffix(v string) predicate.SwapEvent {
	return predicate.SwapEvent(sql.FieldHasSuffix(FieldOwner, v))
}

// OwnerEqualFold applies the EqualFold predicate on the "owner" field.
func OwnerEqualFold(v string) predicate.SwapEvent {
	return predicate.SwapEvent(sql.FieldEqualFold(FieldOwner, v))
}

// OwnerContainsFold applies the ContainsFold predicate on the "owner" field.
func OwnerContainsFold(v string) predicate.SwapEvent {
	return predicate.SwapEvent(sql.FieldContainsFold(FieldOwner, v))
}

// ValueEQ applies the EQ predicate on the "value" field.
func ValueEQ(v string) predicate.SwapEvent {
	return predicate.SwapEvent(sql.FieldEQ(FieldValue, v))
}

// ValueNEQ applies the NEQ predicate on the "value" field.
func ValueNEQ(v string) predicate.SwapEvent {
	return predicate.SwapEvent(sql.FieldNEQ(FieldValue, v))
}

// ValueIn applies the In predicate on the "value" field.
func ValueIn(vs ...string) predicate.SwapEvent {
	return predicate.SwapEvent(sql.FieldIn(FieldValue, vs...))
}

// ValueNotIn applies the NotIn predicate on the "value" field.
func ValueNotIn(vs ...string) predicate.SwapEvent {
	return predicate.SwapEvent(sql.FieldNotIn(FieldValue, vs...))
}

// ValueGT applies the GT predicate on the "value" field.
func ValueGT(v string) predicate.SwapEvent {
	return predicate.SwapEvent(sql.FieldGT(FieldValue, v))
}

// ValueGTE applies the GTE predicate on the "value" field.
func ValueGTE(v string) predicate.SwapEvent {
	return predicate.SwapEvent(sql.FieldGTE(FieldValue, v))
}

// ValueLT applies the LT predicate on the "value" field.
func ValueLT(v string) predicate.SwapEvent {
	return predicate.SwapEvent(sql.FieldLT(FieldValue, v))
}

// ValueLTE applies the LTE predicate on the "value" field.
func ValueLTE(v string) predicate.SwapEvent {
	return predicate.SwapEvent(sql.FieldLTE(FieldValue, v))
}

// ValueContains applies the Contains predicate on the "value" field.
func ValueContains(v string) predicate.SwapEvent {
	return predicate.SwapEvent(sql.FieldContains(FieldValue, v))
}

// ValueHasPrefix applies the HasPrefix predicate on the "value" field.
func ValueHasPrefix(v string) predicate.SwapEvent {
	return predicate.SwapEvent(sql.FieldHasPrefix(FieldValue, v))
}

// ValueHasSuffix applies the HasSuffix predicate on the "value" field.
func ValueHasSuffix(v string) predicate.SwapEvent {
	return predicate.SwapEvent(sql.FieldHasSuffix(FieldValue, v))
}

// ValueEqualFold applies the EqualFold predicate on the "value" field.
func ValueEqualFold(v string) predicate.SwapEvent {
	return predicate.SwapEvent(sql.FieldEqualFold(FieldValue, v))
}

// ValueContainsFold applies the ContainsFold predicate on the "value" field.
func ValueContainsFold(v string) predicate.SwapEvent {
	return predicate.SwapEvent(sql.FieldContainsFold(FieldValue, v))
}

// IsStablecoinToTokenSwapEQ applies the EQ predicate on the "isStablecoinToTokenSwap" field.
func IsStablecoinToTokenSwapEQ(v bool) predicate.SwapEvent {
	return predicate.SwapEvent(sql.FieldEQ(FieldIsStablecoinToTokenSwap, v))
}

// IsStablecoinToTokenSwapNEQ applies the NEQ predicate on the "isStablecoinToTokenSwap" field.
func IsStablecoinToTokenSwapNEQ(v bool) predicate.SwapEvent {
	return predicate.SwapEvent(sql.FieldNEQ(FieldIsStablecoinToTokenSwap, v))
}

// IsTokenToStablecoinSwapEQ applies the EQ predicate on the "isTokenToStablecoinSwap" field.
func IsTokenToStablecoinSwapEQ(v bool) predicate.SwapEvent {
	return predicate.SwapEvent(sql.FieldEQ(FieldIsTokenToStablecoinSwap, v))
}

// IsTokenToStablecoinSwapNEQ applies the NEQ predicate on the "isTokenToStablecoinSwap" field.
func IsTokenToStablecoinSwapNEQ(v bool) predicate.SwapEvent {
	return predicate.SwapEvent(sql.FieldNEQ(FieldIsTokenToStablecoinSwap, v))
}

// BlockNumberEQ applies the EQ predicate on the "blockNumber" field.
func BlockNumberEQ(v string) predicate.SwapEvent {
	return predicate.SwapEvent(sql.FieldEQ(FieldBlockNumber, v))
}

// BlockNumberNEQ applies the NEQ predicate on the "blockNumber" field.
func BlockNumberNEQ(v string) predicate.SwapEvent {
	return predicate.SwapEvent(sql.FieldNEQ(FieldBlockNumber, v))
}

// BlockNumberIn applies the In predicate on the "blockNumber" field.
func BlockNumberIn(vs ...string) predicate.SwapEvent {
	return predicate.SwapEvent(sql.FieldIn(FieldBlockNumber, vs...))
}

// BlockNumberNotIn applies the NotIn predicate on the "blockNumber" field.
func BlockNumberNotIn(vs ...string) predicate.SwapEvent {
	return predicate.SwapEvent(sql.FieldNotIn(FieldBlockNumber, vs...))
}

// BlockNumberGT applies the GT predicate on the "blockNumber" field.
func BlockNumberGT(v string) predicate.SwapEvent {
	return predicate.SwapEvent(sql.FieldGT(FieldBlockNumber, v))
}

// BlockNumberGTE applies the GTE predicate on the "blockNumber" field.
func BlockNumberGTE(v string) predicate.SwapEvent {
	return predicate.SwapEvent(sql.FieldGTE(FieldBlockNumber, v))
}

// BlockNumberLT applies the LT predicate on the "blockNumber" field.
func BlockNumberLT(v string) predicate.SwapEvent {
	return predicate.SwapEvent(sql.FieldLT(FieldBlockNumber, v))
}

// BlockNumberLTE applies the LTE predicate on the "blockNumber" field.
func BlockNumberLTE(v string) predicate.SwapEvent {
	return predicate.SwapEvent(sql.FieldLTE(FieldBlockNumber, v))
}

// BlockNumberContains applies the Contains predicate on the "blockNumber" field.
func BlockNumberContains(v string) predicate.SwapEvent {
	return predicate.SwapEvent(sql.FieldContains(FieldBlockNumber, v))
}

// BlockNumberHasPrefix applies the HasPrefix predicate on the "blockNumber" field.
func BlockNumberHasPrefix(v string) predicate.SwapEvent {
	return predicate.SwapEvent(sql.FieldHasPrefix(FieldBlockNumber, v))
}

// BlockNumberHasSuffix applies the HasSuffix predicate on the "blockNumber" field.
func BlockNumberHasSuffix(v string) predicate.SwapEvent {
	return predicate.SwapEvent(sql.FieldHasSuffix(FieldBlockNumber, v))
}

// BlockNumberEqualFold applies the EqualFold predicate on the "blockNumber" field.
func BlockNumberEqualFold(v string) predicate.SwapEvent {
	return predicate.SwapEvent(sql.FieldEqualFold(FieldBlockNumber, v))
}

// BlockNumberContainsFold applies the ContainsFold predicate on the "blockNumber" field.
func BlockNumberContainsFold(v string) predicate.SwapEvent {
	return predicate.SwapEvent(sql.FieldContainsFold(FieldBlockNumber, v))
}

// BlockTimestampEQ applies the EQ predicate on the "blockTimestamp" field.
func BlockTimestampEQ(v string) predicate.SwapEvent {
	return predicate.SwapEvent(sql.FieldEQ(FieldBlockTimestamp, v))
}

// BlockTimestampNEQ applies the NEQ predicate on the "blockTimestamp" field.
func BlockTimestampNEQ(v string) predicate.SwapEvent {
	return predicate.SwapEvent(sql.FieldNEQ(FieldBlockTimestamp, v))
}

// BlockTimestampIn applies the In predicate on the "blockTimestamp" field.
func BlockTimestampIn(vs ...string) predicate.SwapEvent {
	return predicate.SwapEvent(sql.FieldIn(FieldBlockTimestamp, vs...))
}

// BlockTimestampNotIn applies the NotIn predicate on the "blockTimestamp" field.
func BlockTimestampNotIn(vs ...string) predicate.SwapEvent {
	return predicate.SwapEvent(sql.FieldNotIn(FieldBlockTimestamp, vs...))
}

// BlockTimestampGT applies the GT predicate on the "blockTimestamp" field.
func BlockTimestampGT(v string) predicate.SwapEvent {
	return predicate.SwapEvent(sql.FieldGT(FieldBlockTimestamp, v))
}

// BlockTimestampGTE applies the GTE predicate on the "blockTimestamp" field.
func BlockTimestampGTE(v string) predicate.SwapEvent {
	return predicate.SwapEvent(sql.FieldGTE(FieldBlockTimestamp, v))
}

// BlockTimestampLT applies the LT predicate on the "blockTimestamp" field.
func BlockTimestampLT(v string) predicate.SwapEvent {
	return predicate.SwapEvent(sql.FieldLT(FieldBlockTimestamp, v))
}

// BlockTimestampLTE applies the LTE predicate on the "blockTimestamp" field.
func BlockTimestampLTE(v string) predicate.SwapEvent {
	return predicate.SwapEvent(sql.FieldLTE(FieldBlockTimestamp, v))
}

// BlockTimestampContains applies the Contains predicate on the "blockTimestamp" field.
func BlockTimestampContains(v string) predicate.SwapEvent {
	return predicate.SwapEvent(sql.FieldContains(FieldBlockTimestamp, v))
}

// BlockTimestampHasPrefix applies the HasPrefix predicate on the "blockTimestamp" field.
func BlockTimestampHasPrefix(v string) predicate.SwapEvent {
	return predicate.SwapEvent(sql.FieldHasPrefix(FieldBlockTimestamp, v))
}

// BlockTimestampHasSuffix applies the HasSuffix predicate on the "blockTimestamp" field.
func BlockTimestampHasSuffix(v string) predicate.SwapEvent {
	return predicate.SwapEvent(sql.FieldHasSuffix(FieldBlockTimestamp, v))
}

// BlockTimestampEqualFold applies the EqualFold predicate on the "blockTimestamp" field.
func BlockTimestampEqualFold(v string) predicate.SwapEvent {
	return predicate.SwapEvent(sql.FieldEqualFold(FieldBlockTimestamp, v))
}

// BlockTimestampContainsFold applies the ContainsFold predicate on the "blockTimestamp" field.
func BlockTimestampContainsFold(v string) predicate.SwapEvent {
	return predicate.SwapEvent(sql.FieldContainsFold(FieldBlockTimestamp, v))
}

// TransactionEQ applies the EQ predicate on the "transaction" field.
func TransactionEQ(v string) predicate.SwapEvent {
	return predicate.SwapEvent(sql.FieldEQ(FieldTransaction, v))
}

// TransactionNEQ applies the NEQ predicate on the "transaction" field.
func TransactionNEQ(v string) predicate.SwapEvent {
	return predicate.SwapEvent(sql.FieldNEQ(FieldTransaction, v))
}

// TransactionIn applies the In predicate on the "transaction" field.
func TransactionIn(vs ...string) predicate.SwapEvent {
	return predicate.SwapEvent(sql.FieldIn(FieldTransaction, vs...))
}

// TransactionNotIn applies the NotIn predicate on the "transaction" field.
func TransactionNotIn(vs ...string) predicate.SwapEvent {
	return predicate.SwapEvent(sql.FieldNotIn(FieldTransaction, vs...))
}

// TransactionGT applies the GT predicate on the "transaction" field.
func TransactionGT(v string) predicate.SwapEvent {
	return predicate.SwapEvent(sql.FieldGT(FieldTransaction, v))
}

// TransactionGTE applies the GTE predicate on the "transaction" field.
func TransactionGTE(v string) predicate.SwapEvent {
	return predicate.SwapEvent(sql.FieldGTE(FieldTransaction, v))
}

// TransactionLT applies the LT predicate on the "transaction" field.
func TransactionLT(v string) predicate.SwapEvent {
	return predicate.SwapEvent(sql.FieldLT(FieldTransaction, v))
}

// TransactionLTE applies the LTE predicate on the "transaction" field.
func TransactionLTE(v string) predicate.SwapEvent {
	return predicate.SwapEvent(sql.FieldLTE(FieldTransaction, v))
}

// TransactionContains applies the Contains predicate on the "transaction" field.
func TransactionContains(v string) predicate.SwapEvent {
	return predicate.SwapEvent(sql.FieldContains(FieldTransaction, v))
}

// TransactionHasPrefix applies the HasPrefix predicate on the "transaction" field.
func TransactionHasPrefix(v string) predicate.SwapEvent {
	return predicate.SwapEvent(sql.FieldHasPrefix(FieldTransaction, v))
}

// TransactionHasSuffix applies the HasSuffix predicate on the "transaction" field.
func TransactionHasSuffix(v string) predicate.SwapEvent {
	return predicate.SwapEvent(sql.FieldHasSuffix(FieldTransaction, v))
}

// TransactionEqualFold applies the EqualFold predicate on the "transaction" field.
func TransactionEqualFold(v string) predicate.SwapEvent {
	return predicate.SwapEvent(sql.FieldEqualFold(FieldTransaction, v))
}

// TransactionContainsFold applies the ContainsFold predicate on the "transaction" field.
func TransactionContainsFold(v string) predicate.SwapEvent {
	return predicate.SwapEvent(sql.FieldContainsFold(FieldTransaction, v))
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.SwapEvent) predicate.SwapEvent {
	return predicate.SwapEvent(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.SwapEvent) predicate.SwapEvent {
	return predicate.SwapEvent(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.SwapEvent) predicate.SwapEvent {
	return predicate.SwapEvent(sql.NotPredicates(p))
}
