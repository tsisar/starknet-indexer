// Code generated by ent, DO NOT EDIT.

package swapevent

import (
	"entgo.io/ent/dialect/sql"
)

const (
	// Label holds the string label denoting the swapevent type in the database.
	Label = "swap_event"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldFee holds the string denoting the fee field in the database.
	FieldFee = "fee"
	// FieldOwner holds the string denoting the owner field in the database.
	FieldOwner = "owner"
	// FieldValue holds the string denoting the value field in the database.
	FieldValue = "value"
	// FieldIsStablecoinToTokenSwap holds the string denoting the isstablecointotokenswap field in the database.
	FieldIsStablecoinToTokenSwap = "is_stablecoin_to_token_swap"
	// FieldIsTokenToStablecoinSwap holds the string denoting the istokentostablecoinswap field in the database.
	FieldIsTokenToStablecoinSwap = "is_token_to_stablecoin_swap"
	// FieldBlockNumber holds the string denoting the blocknumber field in the database.
	FieldBlockNumber = "block_number"
	// FieldBlockTimestamp holds the string denoting the blocktimestamp field in the database.
	FieldBlockTimestamp = "block_timestamp"
	// FieldTransaction holds the string denoting the transaction field in the database.
	FieldTransaction = "transaction"
	// Table holds the table name of the swapevent in the database.
	Table = "swap_events"
)

// Columns holds all SQL columns for swapevent fields.
var Columns = []string{
	FieldID,
	FieldFee,
	FieldOwner,
	FieldValue,
	FieldIsStablecoinToTokenSwap,
	FieldIsTokenToStablecoinSwap,
	FieldBlockNumber,
	FieldBlockTimestamp,
	FieldTransaction,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

// OrderOption defines the ordering options for the SwapEvent queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByFee orders the results by the fee field.
func ByFee(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldFee, opts...).ToFunc()
}

// ByOwner orders the results by the owner field.
func ByOwner(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldOwner, opts...).ToFunc()
}

// ByValue orders the results by the value field.
func ByValue(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldValue, opts...).ToFunc()
}

// ByIsStablecoinToTokenSwap orders the results by the isStablecoinToTokenSwap field.
func ByIsStablecoinToTokenSwap(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldIsStablecoinToTokenSwap, opts...).ToFunc()
}

// ByIsTokenToStablecoinSwap orders the results by the isTokenToStablecoinSwap field.
func ByIsTokenToStablecoinSwap(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldIsTokenToStablecoinSwap, opts...).ToFunc()
}

// ByBlockNumber orders the results by the blockNumber field.
func ByBlockNumber(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldBlockNumber, opts...).ToFunc()
}

// ByBlockTimestamp orders the results by the blockTimestamp field.
func ByBlockTimestamp(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldBlockTimestamp, opts...).ToFunc()
}

// ByTransaction orders the results by the transaction field.
func ByTransaction(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldTransaction, opts...).ToFunc()
}
