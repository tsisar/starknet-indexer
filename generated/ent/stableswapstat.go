// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/tsisar/starknet-indexer/generated/ent/stableswapstat"
)

// StableSwapStat is the model entity for the StableSwapStat schema.
type StableSwapStat struct {
	config `json:"-"`
	// ID of the ent.
	ID string `json:"id,omitempty"`
	// TotalTokenToStablecoinSwapEvents holds the value of the "totalTokenToStablecoinSwapEvents" field.
	TotalTokenToStablecoinSwapEvents string `json:"totalTokenToStablecoinSwapEvents,omitempty"`
	// TotalStablecoinToTokenSwapEvents holds the value of the "totalStablecoinToTokenSwapEvents" field.
	TotalStablecoinToTokenSwapEvents string `json:"totalStablecoinToTokenSwapEvents,omitempty"`
	// RemainingDailySwapAmount holds the value of the "remainingDailySwapAmount" field.
	RemainingDailySwapAmount string `json:"remainingDailySwapAmount,omitempty"`
	// TokenToStablecoinTotalSwapValue holds the value of the "tokenToStablecoinTotalSwapValue" field.
	TokenToStablecoinTotalSwapValue string `json:"tokenToStablecoinTotalSwapValue,omitempty"`
	// StablecoinToTokenTotalSwapValue holds the value of the "stablecoinToTokenTotalSwapValue" field.
	StablecoinToTokenTotalSwapValue string `json:"stablecoinToTokenTotalSwapValue,omitempty"`
	selectValues                    sql.SelectValues
}

// scanValues returns the types for scanning values from sql.Rows.
func (*StableSwapStat) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case stableswapstat.FieldID, stableswapstat.FieldTotalTokenToStablecoinSwapEvents, stableswapstat.FieldTotalStablecoinToTokenSwapEvents, stableswapstat.FieldRemainingDailySwapAmount, stableswapstat.FieldTokenToStablecoinTotalSwapValue, stableswapstat.FieldStablecoinToTokenTotalSwapValue:
			values[i] = new(sql.NullString)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the StableSwapStat fields.
func (sss *StableSwapStat) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case stableswapstat.FieldID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value.Valid {
				sss.ID = value.String
			}
		case stableswapstat.FieldTotalTokenToStablecoinSwapEvents:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field totalTokenToStablecoinSwapEvents", values[i])
			} else if value.Valid {
				sss.TotalTokenToStablecoinSwapEvents = value.String
			}
		case stableswapstat.FieldTotalStablecoinToTokenSwapEvents:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field totalStablecoinToTokenSwapEvents", values[i])
			} else if value.Valid {
				sss.TotalStablecoinToTokenSwapEvents = value.String
			}
		case stableswapstat.FieldRemainingDailySwapAmount:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field remainingDailySwapAmount", values[i])
			} else if value.Valid {
				sss.RemainingDailySwapAmount = value.String
			}
		case stableswapstat.FieldTokenToStablecoinTotalSwapValue:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field tokenToStablecoinTotalSwapValue", values[i])
			} else if value.Valid {
				sss.TokenToStablecoinTotalSwapValue = value.String
			}
		case stableswapstat.FieldStablecoinToTokenTotalSwapValue:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field stablecoinToTokenTotalSwapValue", values[i])
			} else if value.Valid {
				sss.StablecoinToTokenTotalSwapValue = value.String
			}
		default:
			sss.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the StableSwapStat.
// This includes values selected through modifiers, order, etc.
func (sss *StableSwapStat) Value(name string) (ent.Value, error) {
	return sss.selectValues.Get(name)
}

// Update returns a builder for updating this StableSwapStat.
// Note that you need to call StableSwapStat.Unwrap() before calling this method if this StableSwapStat
// was returned from a transaction, and the transaction was committed or rolled back.
func (sss *StableSwapStat) Update() *StableSwapStatUpdateOne {
	return NewStableSwapStatClient(sss.config).UpdateOne(sss)
}

// Unwrap unwraps the StableSwapStat entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (sss *StableSwapStat) Unwrap() *StableSwapStat {
	_tx, ok := sss.config.driver.(*txDriver)
	if !ok {
		panic("ent: StableSwapStat is not a transactional entity")
	}
	sss.config.driver = _tx.drv
	return sss
}

// String implements the fmt.Stringer.
func (sss *StableSwapStat) String() string {
	var builder strings.Builder
	builder.WriteString("StableSwapStat(")
	builder.WriteString(fmt.Sprintf("id=%v, ", sss.ID))
	builder.WriteString("totalTokenToStablecoinSwapEvents=")
	builder.WriteString(sss.TotalTokenToStablecoinSwapEvents)
	builder.WriteString(", ")
	builder.WriteString("totalStablecoinToTokenSwapEvents=")
	builder.WriteString(sss.TotalStablecoinToTokenSwapEvents)
	builder.WriteString(", ")
	builder.WriteString("remainingDailySwapAmount=")
	builder.WriteString(sss.RemainingDailySwapAmount)
	builder.WriteString(", ")
	builder.WriteString("tokenToStablecoinTotalSwapValue=")
	builder.WriteString(sss.TokenToStablecoinTotalSwapValue)
	builder.WriteString(", ")
	builder.WriteString("stablecoinToTokenTotalSwapValue=")
	builder.WriteString(sss.StablecoinToTokenTotalSwapValue)
	builder.WriteByte(')')
	return builder.String()
}

// StableSwapStats is a parsable slice of StableSwapStat.
type StableSwapStats []*StableSwapStat
