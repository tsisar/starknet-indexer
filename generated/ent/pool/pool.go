// Code generated by ent, DO NOT EDIT.

package pool

import (
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the pool type in the database.
	Label = "pool"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldPoolName holds the string denoting the poolname field in the database.
	FieldPoolName = "pool_name"
	// FieldDebtCeiling holds the string denoting the debtceiling field in the database.
	FieldDebtCeiling = "debt_ceiling"
	// FieldLiquidationRatio holds the string denoting the liquidationratio field in the database.
	FieldLiquidationRatio = "liquidation_ratio"
	// FieldStabilityFeeRate holds the string denoting the stabilityfeerate field in the database.
	FieldStabilityFeeRate = "stability_fee_rate"
	// FieldTokenAdapterAddress holds the string denoting the tokenadapteraddress field in the database.
	FieldTokenAdapterAddress = "token_adapter_address"
	// FieldLockedCollateral holds the string denoting the lockedcollateral field in the database.
	FieldLockedCollateral = "locked_collateral"
	// FieldCollateralPrice holds the string denoting the collateralprice field in the database.
	FieldCollateralPrice = "collateral_price"
	// FieldCollateralLastPrice holds the string denoting the collaterallastprice field in the database.
	FieldCollateralLastPrice = "collateral_last_price"
	// FieldPriceWithSafetyMargin holds the string denoting the pricewithsafetymargin field in the database.
	FieldPriceWithSafetyMargin = "price_with_safety_margin"
	// FieldRawPrice holds the string denoting the rawprice field in the database.
	FieldRawPrice = "raw_price"
	// FieldDebtAccumulatedRate holds the string denoting the debtaccumulatedrate field in the database.
	FieldDebtAccumulatedRate = "debt_accumulated_rate"
	// FieldTotalBorrowed holds the string denoting the totalborrowed field in the database.
	FieldTotalBorrowed = "total_borrowed"
	// FieldTotalAvailable holds the string denoting the totalavailable field in the database.
	FieldTotalAvailable = "total_available"
	// FieldTvl holds the string denoting the tvl field in the database.
	FieldTvl = "tvl"
	// EdgePositions holds the string denoting the positions edge name in mutations.
	EdgePositions = "positions"
	// Table holds the table name of the pool in the database.
	Table = "pools"
	// PositionsTable is the table that holds the positions relation/edge.
	PositionsTable = "positions"
	// PositionsInverseTable is the table name for the Position entity.
	// It exists in this package in order to avoid circular dependency with the "position" package.
	PositionsInverseTable = "positions"
	// PositionsColumn is the table column denoting the positions relation/edge.
	PositionsColumn = "pool_positions"
)

// Columns holds all SQL columns for pool fields.
var Columns = []string{
	FieldID,
	FieldPoolName,
	FieldDebtCeiling,
	FieldLiquidationRatio,
	FieldStabilityFeeRate,
	FieldTokenAdapterAddress,
	FieldLockedCollateral,
	FieldCollateralPrice,
	FieldCollateralLastPrice,
	FieldPriceWithSafetyMargin,
	FieldRawPrice,
	FieldDebtAccumulatedRate,
	FieldTotalBorrowed,
	FieldTotalAvailable,
	FieldTvl,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

// OrderOption defines the ordering options for the Pool queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByPoolName orders the results by the poolName field.
func ByPoolName(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldPoolName, opts...).ToFunc()
}

// ByDebtCeiling orders the results by the debtCeiling field.
func ByDebtCeiling(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDebtCeiling, opts...).ToFunc()
}

// ByLiquidationRatio orders the results by the liquidationRatio field.
func ByLiquidationRatio(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldLiquidationRatio, opts...).ToFunc()
}

// ByStabilityFeeRate orders the results by the stabilityFeeRate field.
func ByStabilityFeeRate(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldStabilityFeeRate, opts...).ToFunc()
}

// ByTokenAdapterAddress orders the results by the tokenAdapterAddress field.
func ByTokenAdapterAddress(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldTokenAdapterAddress, opts...).ToFunc()
}

// ByLockedCollateral orders the results by the lockedCollateral field.
func ByLockedCollateral(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldLockedCollateral, opts...).ToFunc()
}

// ByCollateralPrice orders the results by the collateralPrice field.
func ByCollateralPrice(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCollateralPrice, opts...).ToFunc()
}

// ByCollateralLastPrice orders the results by the collateralLastPrice field.
func ByCollateralLastPrice(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCollateralLastPrice, opts...).ToFunc()
}

// ByPriceWithSafetyMargin orders the results by the priceWithSafetyMargin field.
func ByPriceWithSafetyMargin(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldPriceWithSafetyMargin, opts...).ToFunc()
}

// ByRawPrice orders the results by the rawPrice field.
func ByRawPrice(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldRawPrice, opts...).ToFunc()
}

// ByDebtAccumulatedRate orders the results by the debtAccumulatedRate field.
func ByDebtAccumulatedRate(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDebtAccumulatedRate, opts...).ToFunc()
}

// ByTotalBorrowed orders the results by the totalBorrowed field.
func ByTotalBorrowed(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldTotalBorrowed, opts...).ToFunc()
}

// ByTotalAvailable orders the results by the totalAvailable field.
func ByTotalAvailable(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldTotalAvailable, opts...).ToFunc()
}

// ByTvl orders the results by the tvl field.
func ByTvl(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldTvl, opts...).ToFunc()
}

// ByPositionsCount orders the results by positions count.
func ByPositionsCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newPositionsStep(), opts...)
	}
}

// ByPositions orders the results by positions terms.
func ByPositions(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newPositionsStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}
func newPositionsStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(PositionsInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, PositionsTable, PositionsColumn),
	)
}
