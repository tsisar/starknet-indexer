// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/Tsisar/starknet-indexer/generated/ent/position"
	"github.com/Tsisar/starknet-indexer/generated/ent/positionactivity"
	"github.com/Tsisar/starknet-indexer/generated/ent/predicate"
)

// PositionActivityUpdate is the builder for updating PositionActivity entities.
type PositionActivityUpdate struct {
	config
	hooks    []Hook
	mutation *PositionActivityMutation
}

// Where appends a list predicates to the PositionActivityUpdate builder.
func (pau *PositionActivityUpdate) Where(ps ...predicate.PositionActivity) *PositionActivityUpdate {
	pau.mutation.Where(ps...)
	return pau
}

// SetActivityState sets the "activityState" field.
func (pau *PositionActivityUpdate) SetActivityState(s string) *PositionActivityUpdate {
	pau.mutation.SetActivityState(s)
	return pau
}

// SetNillableActivityState sets the "activityState" field if the given value is not nil.
func (pau *PositionActivityUpdate) SetNillableActivityState(s *string) *PositionActivityUpdate {
	if s != nil {
		pau.SetActivityState(*s)
	}
	return pau
}

// SetCollateralAmount sets the "collateralAmount" field.
func (pau *PositionActivityUpdate) SetCollateralAmount(s string) *PositionActivityUpdate {
	pau.mutation.SetCollateralAmount(s)
	return pau
}

// SetNillableCollateralAmount sets the "collateralAmount" field if the given value is not nil.
func (pau *PositionActivityUpdate) SetNillableCollateralAmount(s *string) *PositionActivityUpdate {
	if s != nil {
		pau.SetCollateralAmount(*s)
	}
	return pau
}

// SetDebtAmount sets the "debtAmount" field.
func (pau *PositionActivityUpdate) SetDebtAmount(s string) *PositionActivityUpdate {
	pau.mutation.SetDebtAmount(s)
	return pau
}

// SetNillableDebtAmount sets the "debtAmount" field if the given value is not nil.
func (pau *PositionActivityUpdate) SetNillableDebtAmount(s *string) *PositionActivityUpdate {
	if s != nil {
		pau.SetDebtAmount(*s)
	}
	return pau
}

// SetBlockNumber sets the "blockNumber" field.
func (pau *PositionActivityUpdate) SetBlockNumber(s string) *PositionActivityUpdate {
	pau.mutation.SetBlockNumber(s)
	return pau
}

// SetNillableBlockNumber sets the "blockNumber" field if the given value is not nil.
func (pau *PositionActivityUpdate) SetNillableBlockNumber(s *string) *PositionActivityUpdate {
	if s != nil {
		pau.SetBlockNumber(*s)
	}
	return pau
}

// SetBlockTimestamp sets the "blockTimestamp" field.
func (pau *PositionActivityUpdate) SetBlockTimestamp(s string) *PositionActivityUpdate {
	pau.mutation.SetBlockTimestamp(s)
	return pau
}

// SetNillableBlockTimestamp sets the "blockTimestamp" field if the given value is not nil.
func (pau *PositionActivityUpdate) SetNillableBlockTimestamp(s *string) *PositionActivityUpdate {
	if s != nil {
		pau.SetBlockTimestamp(*s)
	}
	return pau
}

// SetTransaction sets the "transaction" field.
func (pau *PositionActivityUpdate) SetTransaction(s string) *PositionActivityUpdate {
	pau.mutation.SetTransaction(s)
	return pau
}

// SetNillableTransaction sets the "transaction" field if the given value is not nil.
func (pau *PositionActivityUpdate) SetNillableTransaction(s *string) *PositionActivityUpdate {
	if s != nil {
		pau.SetTransaction(*s)
	}
	return pau
}

// SetPositionID sets the "position" edge to the Position entity by ID.
func (pau *PositionActivityUpdate) SetPositionID(id string) *PositionActivityUpdate {
	pau.mutation.SetPositionID(id)
	return pau
}

// SetNillablePositionID sets the "position" edge to the Position entity by ID if the given value is not nil.
func (pau *PositionActivityUpdate) SetNillablePositionID(id *string) *PositionActivityUpdate {
	if id != nil {
		pau = pau.SetPositionID(*id)
	}
	return pau
}

// SetPosition sets the "position" edge to the Position entity.
func (pau *PositionActivityUpdate) SetPosition(p *Position) *PositionActivityUpdate {
	return pau.SetPositionID(p.ID)
}

// Mutation returns the PositionActivityMutation object of the builder.
func (pau *PositionActivityUpdate) Mutation() *PositionActivityMutation {
	return pau.mutation
}

// ClearPosition clears the "position" edge to the Position entity.
func (pau *PositionActivityUpdate) ClearPosition() *PositionActivityUpdate {
	pau.mutation.ClearPosition()
	return pau
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (pau *PositionActivityUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, pau.sqlSave, pau.mutation, pau.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (pau *PositionActivityUpdate) SaveX(ctx context.Context) int {
	affected, err := pau.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (pau *PositionActivityUpdate) Exec(ctx context.Context) error {
	_, err := pau.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (pau *PositionActivityUpdate) ExecX(ctx context.Context) {
	if err := pau.Exec(ctx); err != nil {
		panic(err)
	}
}

func (pau *PositionActivityUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(positionactivity.Table, positionactivity.Columns, sqlgraph.NewFieldSpec(positionactivity.FieldID, field.TypeString))
	if ps := pau.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := pau.mutation.ActivityState(); ok {
		_spec.SetField(positionactivity.FieldActivityState, field.TypeString, value)
	}
	if value, ok := pau.mutation.CollateralAmount(); ok {
		_spec.SetField(positionactivity.FieldCollateralAmount, field.TypeString, value)
	}
	if value, ok := pau.mutation.DebtAmount(); ok {
		_spec.SetField(positionactivity.FieldDebtAmount, field.TypeString, value)
	}
	if value, ok := pau.mutation.BlockNumber(); ok {
		_spec.SetField(positionactivity.FieldBlockNumber, field.TypeString, value)
	}
	if value, ok := pau.mutation.BlockTimestamp(); ok {
		_spec.SetField(positionactivity.FieldBlockTimestamp, field.TypeString, value)
	}
	if value, ok := pau.mutation.Transaction(); ok {
		_spec.SetField(positionactivity.FieldTransaction, field.TypeString, value)
	}
	if pau.mutation.PositionCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   positionactivity.PositionTable,
			Columns: []string{positionactivity.PositionColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(position.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pau.mutation.PositionIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   positionactivity.PositionTable,
			Columns: []string{positionactivity.PositionColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(position.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, pau.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{positionactivity.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	pau.mutation.done = true
	return n, nil
}

// PositionActivityUpdateOne is the builder for updating a single PositionActivity entity.
type PositionActivityUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *PositionActivityMutation
}

// SetActivityState sets the "activityState" field.
func (pauo *PositionActivityUpdateOne) SetActivityState(s string) *PositionActivityUpdateOne {
	pauo.mutation.SetActivityState(s)
	return pauo
}

// SetNillableActivityState sets the "activityState" field if the given value is not nil.
func (pauo *PositionActivityUpdateOne) SetNillableActivityState(s *string) *PositionActivityUpdateOne {
	if s != nil {
		pauo.SetActivityState(*s)
	}
	return pauo
}

// SetCollateralAmount sets the "collateralAmount" field.
func (pauo *PositionActivityUpdateOne) SetCollateralAmount(s string) *PositionActivityUpdateOne {
	pauo.mutation.SetCollateralAmount(s)
	return pauo
}

// SetNillableCollateralAmount sets the "collateralAmount" field if the given value is not nil.
func (pauo *PositionActivityUpdateOne) SetNillableCollateralAmount(s *string) *PositionActivityUpdateOne {
	if s != nil {
		pauo.SetCollateralAmount(*s)
	}
	return pauo
}

// SetDebtAmount sets the "debtAmount" field.
func (pauo *PositionActivityUpdateOne) SetDebtAmount(s string) *PositionActivityUpdateOne {
	pauo.mutation.SetDebtAmount(s)
	return pauo
}

// SetNillableDebtAmount sets the "debtAmount" field if the given value is not nil.
func (pauo *PositionActivityUpdateOne) SetNillableDebtAmount(s *string) *PositionActivityUpdateOne {
	if s != nil {
		pauo.SetDebtAmount(*s)
	}
	return pauo
}

// SetBlockNumber sets the "blockNumber" field.
func (pauo *PositionActivityUpdateOne) SetBlockNumber(s string) *PositionActivityUpdateOne {
	pauo.mutation.SetBlockNumber(s)
	return pauo
}

// SetNillableBlockNumber sets the "blockNumber" field if the given value is not nil.
func (pauo *PositionActivityUpdateOne) SetNillableBlockNumber(s *string) *PositionActivityUpdateOne {
	if s != nil {
		pauo.SetBlockNumber(*s)
	}
	return pauo
}

// SetBlockTimestamp sets the "blockTimestamp" field.
func (pauo *PositionActivityUpdateOne) SetBlockTimestamp(s string) *PositionActivityUpdateOne {
	pauo.mutation.SetBlockTimestamp(s)
	return pauo
}

// SetNillableBlockTimestamp sets the "blockTimestamp" field if the given value is not nil.
func (pauo *PositionActivityUpdateOne) SetNillableBlockTimestamp(s *string) *PositionActivityUpdateOne {
	if s != nil {
		pauo.SetBlockTimestamp(*s)
	}
	return pauo
}

// SetTransaction sets the "transaction" field.
func (pauo *PositionActivityUpdateOne) SetTransaction(s string) *PositionActivityUpdateOne {
	pauo.mutation.SetTransaction(s)
	return pauo
}

// SetNillableTransaction sets the "transaction" field if the given value is not nil.
func (pauo *PositionActivityUpdateOne) SetNillableTransaction(s *string) *PositionActivityUpdateOne {
	if s != nil {
		pauo.SetTransaction(*s)
	}
	return pauo
}

// SetPositionID sets the "position" edge to the Position entity by ID.
func (pauo *PositionActivityUpdateOne) SetPositionID(id string) *PositionActivityUpdateOne {
	pauo.mutation.SetPositionID(id)
	return pauo
}

// SetNillablePositionID sets the "position" edge to the Position entity by ID if the given value is not nil.
func (pauo *PositionActivityUpdateOne) SetNillablePositionID(id *string) *PositionActivityUpdateOne {
	if id != nil {
		pauo = pauo.SetPositionID(*id)
	}
	return pauo
}

// SetPosition sets the "position" edge to the Position entity.
func (pauo *PositionActivityUpdateOne) SetPosition(p *Position) *PositionActivityUpdateOne {
	return pauo.SetPositionID(p.ID)
}

// Mutation returns the PositionActivityMutation object of the builder.
func (pauo *PositionActivityUpdateOne) Mutation() *PositionActivityMutation {
	return pauo.mutation
}

// ClearPosition clears the "position" edge to the Position entity.
func (pauo *PositionActivityUpdateOne) ClearPosition() *PositionActivityUpdateOne {
	pauo.mutation.ClearPosition()
	return pauo
}

// Where appends a list predicates to the PositionActivityUpdate builder.
func (pauo *PositionActivityUpdateOne) Where(ps ...predicate.PositionActivity) *PositionActivityUpdateOne {
	pauo.mutation.Where(ps...)
	return pauo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (pauo *PositionActivityUpdateOne) Select(field string, fields ...string) *PositionActivityUpdateOne {
	pauo.fields = append([]string{field}, fields...)
	return pauo
}

// Save executes the query and returns the updated PositionActivity entity.
func (pauo *PositionActivityUpdateOne) Save(ctx context.Context) (*PositionActivity, error) {
	return withHooks(ctx, pauo.sqlSave, pauo.mutation, pauo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (pauo *PositionActivityUpdateOne) SaveX(ctx context.Context) *PositionActivity {
	node, err := pauo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (pauo *PositionActivityUpdateOne) Exec(ctx context.Context) error {
	_, err := pauo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (pauo *PositionActivityUpdateOne) ExecX(ctx context.Context) {
	if err := pauo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (pauo *PositionActivityUpdateOne) sqlSave(ctx context.Context) (_node *PositionActivity, err error) {
	_spec := sqlgraph.NewUpdateSpec(positionactivity.Table, positionactivity.Columns, sqlgraph.NewFieldSpec(positionactivity.FieldID, field.TypeString))
	id, ok := pauo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "PositionActivity.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := pauo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, positionactivity.FieldID)
		for _, f := range fields {
			if !positionactivity.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != positionactivity.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := pauo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := pauo.mutation.ActivityState(); ok {
		_spec.SetField(positionactivity.FieldActivityState, field.TypeString, value)
	}
	if value, ok := pauo.mutation.CollateralAmount(); ok {
		_spec.SetField(positionactivity.FieldCollateralAmount, field.TypeString, value)
	}
	if value, ok := pauo.mutation.DebtAmount(); ok {
		_spec.SetField(positionactivity.FieldDebtAmount, field.TypeString, value)
	}
	if value, ok := pauo.mutation.BlockNumber(); ok {
		_spec.SetField(positionactivity.FieldBlockNumber, field.TypeString, value)
	}
	if value, ok := pauo.mutation.BlockTimestamp(); ok {
		_spec.SetField(positionactivity.FieldBlockTimestamp, field.TypeString, value)
	}
	if value, ok := pauo.mutation.Transaction(); ok {
		_spec.SetField(positionactivity.FieldTransaction, field.TypeString, value)
	}
	if pauo.mutation.PositionCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   positionactivity.PositionTable,
			Columns: []string{positionactivity.PositionColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(position.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pauo.mutation.PositionIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   positionactivity.PositionTable,
			Columns: []string{positionactivity.PositionColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(position.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &PositionActivity{config: pauo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, pauo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{positionactivity.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	pauo.mutation.done = true
	return _node, nil
}
