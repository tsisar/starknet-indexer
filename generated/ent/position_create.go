// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/tsisar/starknet-indexer/generated/ent/pool"
	"github.com/tsisar/starknet-indexer/generated/ent/position"
	"github.com/tsisar/starknet-indexer/generated/ent/positionactivity"
)

// PositionCreate is the builder for creating a Position entity.
type PositionCreate struct {
	config
	mutation *PositionMutation
	hooks    []Hook
}

// SetPositionAddress sets the "positionAddress" field.
func (pc *PositionCreate) SetPositionAddress(s string) *PositionCreate {
	pc.mutation.SetPositionAddress(s)
	return pc
}

// SetUserAddress sets the "userAddress" field.
func (pc *PositionCreate) SetUserAddress(s string) *PositionCreate {
	pc.mutation.SetUserAddress(s)
	return pc
}

// SetWalletAddress sets the "walletAddress" field.
func (pc *PositionCreate) SetWalletAddress(s string) *PositionCreate {
	pc.mutation.SetWalletAddress(s)
	return pc
}

// SetCollateralPool sets the "collateralPool" field.
func (pc *PositionCreate) SetCollateralPool(s string) *PositionCreate {
	pc.mutation.SetCollateralPool(s)
	return pc
}

// SetCollateralPoolName sets the "collateralPoolName" field.
func (pc *PositionCreate) SetCollateralPoolName(s string) *PositionCreate {
	pc.mutation.SetCollateralPoolName(s)
	return pc
}

// SetPositionId sets the "positionId" field.
func (pc *PositionCreate) SetPositionId(s string) *PositionCreate {
	pc.mutation.SetPositionId(s)
	return pc
}

// SetLockedCollateral sets the "lockedCollateral" field.
func (pc *PositionCreate) SetLockedCollateral(s string) *PositionCreate {
	pc.mutation.SetLockedCollateral(s)
	return pc
}

// SetDebtValue sets the "debtValue" field.
func (pc *PositionCreate) SetDebtValue(s string) *PositionCreate {
	pc.mutation.SetDebtValue(s)
	return pc
}

// SetDebtShare sets the "debtShare" field.
func (pc *PositionCreate) SetDebtShare(s string) *PositionCreate {
	pc.mutation.SetDebtShare(s)
	return pc
}

// SetSafetyBuffer sets the "safetyBuffer" field.
func (pc *PositionCreate) SetSafetyBuffer(s string) *PositionCreate {
	pc.mutation.SetSafetyBuffer(s)
	return pc
}

// SetSafetyBufferInPercent sets the "safetyBufferInPercent" field.
func (pc *PositionCreate) SetSafetyBufferInPercent(s string) *PositionCreate {
	pc.mutation.SetSafetyBufferInPercent(s)
	return pc
}

// SetTvl sets the "tvl" field.
func (pc *PositionCreate) SetTvl(s string) *PositionCreate {
	pc.mutation.SetTvl(s)
	return pc
}

// SetPositionStatus sets the "positionStatus" field.
func (pc *PositionCreate) SetPositionStatus(s string) *PositionCreate {
	pc.mutation.SetPositionStatus(s)
	return pc
}

// SetLiquidationCount sets the "liquidationCount" field.
func (pc *PositionCreate) SetLiquidationCount(s string) *PositionCreate {
	pc.mutation.SetLiquidationCount(s)
	return pc
}

// SetBlockNumber sets the "blockNumber" field.
func (pc *PositionCreate) SetBlockNumber(s string) *PositionCreate {
	pc.mutation.SetBlockNumber(s)
	return pc
}

// SetBlockTimestamp sets the "blockTimestamp" field.
func (pc *PositionCreate) SetBlockTimestamp(s string) *PositionCreate {
	pc.mutation.SetBlockTimestamp(s)
	return pc
}

// SetTransaction sets the "transaction" field.
func (pc *PositionCreate) SetTransaction(s string) *PositionCreate {
	pc.mutation.SetTransaction(s)
	return pc
}

// SetID sets the "id" field.
func (pc *PositionCreate) SetID(s string) *PositionCreate {
	pc.mutation.SetID(s)
	return pc
}

// SetPoolID sets the "pool" edge to the Pool entity by ID.
func (pc *PositionCreate) SetPoolID(id string) *PositionCreate {
	pc.mutation.SetPoolID(id)
	return pc
}

// SetNillablePoolID sets the "pool" edge to the Pool entity by ID if the given value is not nil.
func (pc *PositionCreate) SetNillablePoolID(id *string) *PositionCreate {
	if id != nil {
		pc = pc.SetPoolID(*id)
	}
	return pc
}

// SetPool sets the "pool" edge to the Pool entity.
func (pc *PositionCreate) SetPool(p *Pool) *PositionCreate {
	return pc.SetPoolID(p.ID)
}

// AddActivityIDs adds the "activity" edge to the PositionActivity entity by IDs.
func (pc *PositionCreate) AddActivityIDs(ids ...string) *PositionCreate {
	pc.mutation.AddActivityIDs(ids...)
	return pc
}

// AddActivity adds the "activity" edges to the PositionActivity entity.
func (pc *PositionCreate) AddActivity(p ...*PositionActivity) *PositionCreate {
	ids := make([]string, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return pc.AddActivityIDs(ids...)
}

// Mutation returns the PositionMutation object of the builder.
func (pc *PositionCreate) Mutation() *PositionMutation {
	return pc.mutation
}

// Save creates the Position in the database.
func (pc *PositionCreate) Save(ctx context.Context) (*Position, error) {
	return withHooks(ctx, pc.sqlSave, pc.mutation, pc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (pc *PositionCreate) SaveX(ctx context.Context) *Position {
	v, err := pc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (pc *PositionCreate) Exec(ctx context.Context) error {
	_, err := pc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (pc *PositionCreate) ExecX(ctx context.Context) {
	if err := pc.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (pc *PositionCreate) check() error {
	if _, ok := pc.mutation.PositionAddress(); !ok {
		return &ValidationError{Name: "positionAddress", err: errors.New(`ent: missing required field "Position.positionAddress"`)}
	}
	if _, ok := pc.mutation.UserAddress(); !ok {
		return &ValidationError{Name: "userAddress", err: errors.New(`ent: missing required field "Position.userAddress"`)}
	}
	if _, ok := pc.mutation.WalletAddress(); !ok {
		return &ValidationError{Name: "walletAddress", err: errors.New(`ent: missing required field "Position.walletAddress"`)}
	}
	if _, ok := pc.mutation.CollateralPool(); !ok {
		return &ValidationError{Name: "collateralPool", err: errors.New(`ent: missing required field "Position.collateralPool"`)}
	}
	if _, ok := pc.mutation.CollateralPoolName(); !ok {
		return &ValidationError{Name: "collateralPoolName", err: errors.New(`ent: missing required field "Position.collateralPoolName"`)}
	}
	if _, ok := pc.mutation.PositionId(); !ok {
		return &ValidationError{Name: "positionId", err: errors.New(`ent: missing required field "Position.positionId"`)}
	}
	if _, ok := pc.mutation.LockedCollateral(); !ok {
		return &ValidationError{Name: "lockedCollateral", err: errors.New(`ent: missing required field "Position.lockedCollateral"`)}
	}
	if _, ok := pc.mutation.DebtValue(); !ok {
		return &ValidationError{Name: "debtValue", err: errors.New(`ent: missing required field "Position.debtValue"`)}
	}
	if _, ok := pc.mutation.DebtShare(); !ok {
		return &ValidationError{Name: "debtShare", err: errors.New(`ent: missing required field "Position.debtShare"`)}
	}
	if _, ok := pc.mutation.SafetyBuffer(); !ok {
		return &ValidationError{Name: "safetyBuffer", err: errors.New(`ent: missing required field "Position.safetyBuffer"`)}
	}
	if _, ok := pc.mutation.SafetyBufferInPercent(); !ok {
		return &ValidationError{Name: "safetyBufferInPercent", err: errors.New(`ent: missing required field "Position.safetyBufferInPercent"`)}
	}
	if _, ok := pc.mutation.Tvl(); !ok {
		return &ValidationError{Name: "tvl", err: errors.New(`ent: missing required field "Position.tvl"`)}
	}
	if _, ok := pc.mutation.PositionStatus(); !ok {
		return &ValidationError{Name: "positionStatus", err: errors.New(`ent: missing required field "Position.positionStatus"`)}
	}
	if _, ok := pc.mutation.LiquidationCount(); !ok {
		return &ValidationError{Name: "liquidationCount", err: errors.New(`ent: missing required field "Position.liquidationCount"`)}
	}
	if _, ok := pc.mutation.BlockNumber(); !ok {
		return &ValidationError{Name: "blockNumber", err: errors.New(`ent: missing required field "Position.blockNumber"`)}
	}
	if _, ok := pc.mutation.BlockTimestamp(); !ok {
		return &ValidationError{Name: "blockTimestamp", err: errors.New(`ent: missing required field "Position.blockTimestamp"`)}
	}
	if _, ok := pc.mutation.Transaction(); !ok {
		return &ValidationError{Name: "transaction", err: errors.New(`ent: missing required field "Position.transaction"`)}
	}
	return nil
}

func (pc *PositionCreate) sqlSave(ctx context.Context) (*Position, error) {
	if err := pc.check(); err != nil {
		return nil, err
	}
	_node, _spec := pc.createSpec()
	if err := sqlgraph.CreateNode(ctx, pc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(string); ok {
			_node.ID = id
		} else {
			return nil, fmt.Errorf("unexpected Position.ID type: %T", _spec.ID.Value)
		}
	}
	pc.mutation.id = &_node.ID
	pc.mutation.done = true
	return _node, nil
}

func (pc *PositionCreate) createSpec() (*Position, *sqlgraph.CreateSpec) {
	var (
		_node = &Position{config: pc.config}
		_spec = sqlgraph.NewCreateSpec(position.Table, sqlgraph.NewFieldSpec(position.FieldID, field.TypeString))
	)
	if id, ok := pc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := pc.mutation.PositionAddress(); ok {
		_spec.SetField(position.FieldPositionAddress, field.TypeString, value)
		_node.PositionAddress = value
	}
	if value, ok := pc.mutation.UserAddress(); ok {
		_spec.SetField(position.FieldUserAddress, field.TypeString, value)
		_node.UserAddress = value
	}
	if value, ok := pc.mutation.WalletAddress(); ok {
		_spec.SetField(position.FieldWalletAddress, field.TypeString, value)
		_node.WalletAddress = value
	}
	if value, ok := pc.mutation.CollateralPool(); ok {
		_spec.SetField(position.FieldCollateralPool, field.TypeString, value)
		_node.CollateralPool = value
	}
	if value, ok := pc.mutation.CollateralPoolName(); ok {
		_spec.SetField(position.FieldCollateralPoolName, field.TypeString, value)
		_node.CollateralPoolName = value
	}
	if value, ok := pc.mutation.PositionId(); ok {
		_spec.SetField(position.FieldPositionId, field.TypeString, value)
		_node.PositionId = value
	}
	if value, ok := pc.mutation.LockedCollateral(); ok {
		_spec.SetField(position.FieldLockedCollateral, field.TypeString, value)
		_node.LockedCollateral = value
	}
	if value, ok := pc.mutation.DebtValue(); ok {
		_spec.SetField(position.FieldDebtValue, field.TypeString, value)
		_node.DebtValue = value
	}
	if value, ok := pc.mutation.DebtShare(); ok {
		_spec.SetField(position.FieldDebtShare, field.TypeString, value)
		_node.DebtShare = value
	}
	if value, ok := pc.mutation.SafetyBuffer(); ok {
		_spec.SetField(position.FieldSafetyBuffer, field.TypeString, value)
		_node.SafetyBuffer = value
	}
	if value, ok := pc.mutation.SafetyBufferInPercent(); ok {
		_spec.SetField(position.FieldSafetyBufferInPercent, field.TypeString, value)
		_node.SafetyBufferInPercent = value
	}
	if value, ok := pc.mutation.Tvl(); ok {
		_spec.SetField(position.FieldTvl, field.TypeString, value)
		_node.Tvl = value
	}
	if value, ok := pc.mutation.PositionStatus(); ok {
		_spec.SetField(position.FieldPositionStatus, field.TypeString, value)
		_node.PositionStatus = value
	}
	if value, ok := pc.mutation.LiquidationCount(); ok {
		_spec.SetField(position.FieldLiquidationCount, field.TypeString, value)
		_node.LiquidationCount = value
	}
	if value, ok := pc.mutation.BlockNumber(); ok {
		_spec.SetField(position.FieldBlockNumber, field.TypeString, value)
		_node.BlockNumber = value
	}
	if value, ok := pc.mutation.BlockTimestamp(); ok {
		_spec.SetField(position.FieldBlockTimestamp, field.TypeString, value)
		_node.BlockTimestamp = value
	}
	if value, ok := pc.mutation.Transaction(); ok {
		_spec.SetField(position.FieldTransaction, field.TypeString, value)
		_node.Transaction = value
	}
	if nodes := pc.mutation.PoolIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   position.PoolTable,
			Columns: []string{position.PoolColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(pool.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.position_pool = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := pc.mutation.ActivityIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   position.ActivityTable,
			Columns: []string{position.ActivityColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(positionactivity.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// PositionCreateBulk is the builder for creating many Position entities in bulk.
type PositionCreateBulk struct {
	config
	err      error
	builders []*PositionCreate
}

// Save creates the Position entities in the database.
func (pcb *PositionCreateBulk) Save(ctx context.Context) ([]*Position, error) {
	if pcb.err != nil {
		return nil, pcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(pcb.builders))
	nodes := make([]*Position, len(pcb.builders))
	mutators := make([]Mutator, len(pcb.builders))
	for i := range pcb.builders {
		func(i int, root context.Context) {
			builder := pcb.builders[i]
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*PositionMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, pcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, pcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, pcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (pcb *PositionCreateBulk) SaveX(ctx context.Context) []*Position {
	v, err := pcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (pcb *PositionCreateBulk) Exec(ctx context.Context) error {
	_, err := pcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (pcb *PositionCreateBulk) ExecX(ctx context.Context) {
	if err := pcb.Exec(ctx); err != nil {
		panic(err)
	}
}
