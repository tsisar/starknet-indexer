// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/Tsisar/starknet-indexer/generated/ent/predicate"
	"github.com/Tsisar/starknet-indexer/generated/ent/stableswapstat"
)

// StableSwapStatDelete is the builder for deleting a StableSwapStat entity.
type StableSwapStatDelete struct {
	config
	hooks    []Hook
	mutation *StableSwapStatMutation
}

// Where appends a list predicates to the StableSwapStatDelete builder.
func (sssd *StableSwapStatDelete) Where(ps ...predicate.StableSwapStat) *StableSwapStatDelete {
	sssd.mutation.Where(ps...)
	return sssd
}

// Exec executes the deletion query and returns how many vertices were deleted.
func (sssd *StableSwapStatDelete) Exec(ctx context.Context) (int, error) {
	return withHooks(ctx, sssd.sqlExec, sssd.mutation, sssd.hooks)
}

// ExecX is like Exec, but panics if an error occurs.
func (sssd *StableSwapStatDelete) ExecX(ctx context.Context) int {
	n, err := sssd.Exec(ctx)
	if err != nil {
		panic(err)
	}
	return n
}

func (sssd *StableSwapStatDelete) sqlExec(ctx context.Context) (int, error) {
	_spec := sqlgraph.NewDeleteSpec(stableswapstat.Table, sqlgraph.NewFieldSpec(stableswapstat.FieldID, field.TypeString))
	if ps := sssd.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	affected, err := sqlgraph.DeleteNodes(ctx, sssd.driver, _spec)
	if err != nil && sqlgraph.IsConstraintError(err) {
		err = &ConstraintError{msg: err.Error(), wrap: err}
	}
	sssd.mutation.done = true
	return affected, err
}

// StableSwapStatDeleteOne is the builder for deleting a single StableSwapStat entity.
type StableSwapStatDeleteOne struct {
	sssd *StableSwapStatDelete
}

// Where appends a list predicates to the StableSwapStatDelete builder.
func (sssdo *StableSwapStatDeleteOne) Where(ps ...predicate.StableSwapStat) *StableSwapStatDeleteOne {
	sssdo.sssd.mutation.Where(ps...)
	return sssdo
}

// Exec executes the deletion query.
func (sssdo *StableSwapStatDeleteOne) Exec(ctx context.Context) error {
	n, err := sssdo.sssd.Exec(ctx)
	switch {
	case err != nil:
		return err
	case n == 0:
		return &NotFoundError{stableswapstat.Label}
	default:
		return nil
	}
}

// ExecX is like Exec, but panics if an error occurs.
func (sssdo *StableSwapStatDeleteOne) ExecX(ctx context.Context) {
	if err := sssdo.Exec(ctx); err != nil {
		panic(err)
	}
}
