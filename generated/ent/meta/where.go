// Code generated by ent, DO NOT EDIT.

package meta

import (
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/tsisar/starknet-indexer/generated/ent/predicate"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.Meta {
	return predicate.Meta(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.Meta {
	return predicate.Meta(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.Meta {
	return predicate.Meta(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.Meta {
	return predicate.Meta(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.Meta {
	return predicate.Meta(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.Meta {
	return predicate.Meta(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.Meta {
	return predicate.Meta(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.Meta {
	return predicate.Meta(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.Meta {
	return predicate.Meta(sql.FieldLTE(FieldID, id))
}

// Deployment applies equality check predicate on the "deployment" field. It's identical to DeploymentEQ.
func Deployment(v string) predicate.Meta {
	return predicate.Meta(sql.FieldEQ(FieldDeployment, v))
}

// HasIndexingErrors applies equality check predicate on the "hasIndexingErrors" field. It's identical to HasIndexingErrorsEQ.
func HasIndexingErrors(v string) predicate.Meta {
	return predicate.Meta(sql.FieldEQ(FieldHasIndexingErrors, v))
}

// DeploymentEQ applies the EQ predicate on the "deployment" field.
func DeploymentEQ(v string) predicate.Meta {
	return predicate.Meta(sql.FieldEQ(FieldDeployment, v))
}

// DeploymentNEQ applies the NEQ predicate on the "deployment" field.
func DeploymentNEQ(v string) predicate.Meta {
	return predicate.Meta(sql.FieldNEQ(FieldDeployment, v))
}

// DeploymentIn applies the In predicate on the "deployment" field.
func DeploymentIn(vs ...string) predicate.Meta {
	return predicate.Meta(sql.FieldIn(FieldDeployment, vs...))
}

// DeploymentNotIn applies the NotIn predicate on the "deployment" field.
func DeploymentNotIn(vs ...string) predicate.Meta {
	return predicate.Meta(sql.FieldNotIn(FieldDeployment, vs...))
}

// DeploymentGT applies the GT predicate on the "deployment" field.
func DeploymentGT(v string) predicate.Meta {
	return predicate.Meta(sql.FieldGT(FieldDeployment, v))
}

// DeploymentGTE applies the GTE predicate on the "deployment" field.
func DeploymentGTE(v string) predicate.Meta {
	return predicate.Meta(sql.FieldGTE(FieldDeployment, v))
}

// DeploymentLT applies the LT predicate on the "deployment" field.
func DeploymentLT(v string) predicate.Meta {
	return predicate.Meta(sql.FieldLT(FieldDeployment, v))
}

// DeploymentLTE applies the LTE predicate on the "deployment" field.
func DeploymentLTE(v string) predicate.Meta {
	return predicate.Meta(sql.FieldLTE(FieldDeployment, v))
}

// DeploymentContains applies the Contains predicate on the "deployment" field.
func DeploymentContains(v string) predicate.Meta {
	return predicate.Meta(sql.FieldContains(FieldDeployment, v))
}

// DeploymentHasPrefix applies the HasPrefix predicate on the "deployment" field.
func DeploymentHasPrefix(v string) predicate.Meta {
	return predicate.Meta(sql.FieldHasPrefix(FieldDeployment, v))
}

// DeploymentHasSuffix applies the HasSuffix predicate on the "deployment" field.
func DeploymentHasSuffix(v string) predicate.Meta {
	return predicate.Meta(sql.FieldHasSuffix(FieldDeployment, v))
}

// DeploymentEqualFold applies the EqualFold predicate on the "deployment" field.
func DeploymentEqualFold(v string) predicate.Meta {
	return predicate.Meta(sql.FieldEqualFold(FieldDeployment, v))
}

// DeploymentContainsFold applies the ContainsFold predicate on the "deployment" field.
func DeploymentContainsFold(v string) predicate.Meta {
	return predicate.Meta(sql.FieldContainsFold(FieldDeployment, v))
}

// HasIndexingErrorsEQ applies the EQ predicate on the "hasIndexingErrors" field.
func HasIndexingErrorsEQ(v string) predicate.Meta {
	return predicate.Meta(sql.FieldEQ(FieldHasIndexingErrors, v))
}

// HasIndexingErrorsNEQ applies the NEQ predicate on the "hasIndexingErrors" field.
func HasIndexingErrorsNEQ(v string) predicate.Meta {
	return predicate.Meta(sql.FieldNEQ(FieldHasIndexingErrors, v))
}

// HasIndexingErrorsIn applies the In predicate on the "hasIndexingErrors" field.
func HasIndexingErrorsIn(vs ...string) predicate.Meta {
	return predicate.Meta(sql.FieldIn(FieldHasIndexingErrors, vs...))
}

// HasIndexingErrorsNotIn applies the NotIn predicate on the "hasIndexingErrors" field.
func HasIndexingErrorsNotIn(vs ...string) predicate.Meta {
	return predicate.Meta(sql.FieldNotIn(FieldHasIndexingErrors, vs...))
}

// HasIndexingErrorsGT applies the GT predicate on the "hasIndexingErrors" field.
func HasIndexingErrorsGT(v string) predicate.Meta {
	return predicate.Meta(sql.FieldGT(FieldHasIndexingErrors, v))
}

// HasIndexingErrorsGTE applies the GTE predicate on the "hasIndexingErrors" field.
func HasIndexingErrorsGTE(v string) predicate.Meta {
	return predicate.Meta(sql.FieldGTE(FieldHasIndexingErrors, v))
}

// HasIndexingErrorsLT applies the LT predicate on the "hasIndexingErrors" field.
func HasIndexingErrorsLT(v string) predicate.Meta {
	return predicate.Meta(sql.FieldLT(FieldHasIndexingErrors, v))
}

// HasIndexingErrorsLTE applies the LTE predicate on the "hasIndexingErrors" field.
func HasIndexingErrorsLTE(v string) predicate.Meta {
	return predicate.Meta(sql.FieldLTE(FieldHasIndexingErrors, v))
}

// HasIndexingErrorsContains applies the Contains predicate on the "hasIndexingErrors" field.
func HasIndexingErrorsContains(v string) predicate.Meta {
	return predicate.Meta(sql.FieldContains(FieldHasIndexingErrors, v))
}

// HasIndexingErrorsHasPrefix applies the HasPrefix predicate on the "hasIndexingErrors" field.
func HasIndexingErrorsHasPrefix(v string) predicate.Meta {
	return predicate.Meta(sql.FieldHasPrefix(FieldHasIndexingErrors, v))
}

// HasIndexingErrorsHasSuffix applies the HasSuffix predicate on the "hasIndexingErrors" field.
func HasIndexingErrorsHasSuffix(v string) predicate.Meta {
	return predicate.Meta(sql.FieldHasSuffix(FieldHasIndexingErrors, v))
}

// HasIndexingErrorsEqualFold applies the EqualFold predicate on the "hasIndexingErrors" field.
func HasIndexingErrorsEqualFold(v string) predicate.Meta {
	return predicate.Meta(sql.FieldEqualFold(FieldHasIndexingErrors, v))
}

// HasIndexingErrorsContainsFold applies the ContainsFold predicate on the "hasIndexingErrors" field.
func HasIndexingErrorsContainsFold(v string) predicate.Meta {
	return predicate.Meta(sql.FieldContainsFold(FieldHasIndexingErrors, v))
}

// HasBlock applies the HasEdge predicate on the "block" edge.
func HasBlock() predicate.Meta {
	return predicate.Meta(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, BlockTable, BlockColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasBlockWith applies the HasEdge predicate on the "block" edge with a given conditions (other predicates).
func HasBlockWith(preds ...predicate.Block) predicate.Meta {
	return predicate.Meta(func(s *sql.Selector) {
		step := newBlockStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Meta) predicate.Meta {
	return predicate.Meta(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Meta) predicate.Meta {
	return predicate.Meta(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Meta) predicate.Meta {
	return predicate.Meta(sql.NotPredicates(p))
}
