// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/tsisar/starknet-indexer/generated/ent/pool"
	"github.com/tsisar/starknet-indexer/generated/ent/position"
)

// PoolCreate is the builder for creating a Pool entity.
type PoolCreate struct {
	config
	mutation *PoolMutation
	hooks    []Hook
}

// SetPoolName sets the "poolName" field.
func (pc *PoolCreate) SetPoolName(s string) *PoolCreate {
	pc.mutation.SetPoolName(s)
	return pc
}

// SetDebtCeiling sets the "debtCeiling" field.
func (pc *PoolCreate) SetDebtCeiling(s string) *PoolCreate {
	pc.mutation.SetDebtCeiling(s)
	return pc
}

// SetLiquidationRatio sets the "liquidationRatio" field.
func (pc *PoolCreate) SetLiquidationRatio(s string) *PoolCreate {
	pc.mutation.SetLiquidationRatio(s)
	return pc
}

// SetStabilityFeeRate sets the "stabilityFeeRate" field.
func (pc *PoolCreate) SetStabilityFeeRate(s string) *PoolCreate {
	pc.mutation.SetStabilityFeeRate(s)
	return pc
}

// SetTokenAdapterAddress sets the "tokenAdapterAddress" field.
func (pc *PoolCreate) SetTokenAdapterAddress(s string) *PoolCreate {
	pc.mutation.SetTokenAdapterAddress(s)
	return pc
}

// SetLockedCollateral sets the "lockedCollateral" field.
func (pc *PoolCreate) SetLockedCollateral(s string) *PoolCreate {
	pc.mutation.SetLockedCollateral(s)
	return pc
}

// SetCollateralPrice sets the "collateralPrice" field.
func (pc *PoolCreate) SetCollateralPrice(s string) *PoolCreate {
	pc.mutation.SetCollateralPrice(s)
	return pc
}

// SetCollateralLastPrice sets the "collateralLastPrice" field.
func (pc *PoolCreate) SetCollateralLastPrice(s string) *PoolCreate {
	pc.mutation.SetCollateralLastPrice(s)
	return pc
}

// SetPriceWithSafetyMargin sets the "priceWithSafetyMargin" field.
func (pc *PoolCreate) SetPriceWithSafetyMargin(s string) *PoolCreate {
	pc.mutation.SetPriceWithSafetyMargin(s)
	return pc
}

// SetRawPrice sets the "rawPrice" field.
func (pc *PoolCreate) SetRawPrice(s string) *PoolCreate {
	pc.mutation.SetRawPrice(s)
	return pc
}

// SetDebtAccumulatedRate sets the "debtAccumulatedRate" field.
func (pc *PoolCreate) SetDebtAccumulatedRate(s string) *PoolCreate {
	pc.mutation.SetDebtAccumulatedRate(s)
	return pc
}

// SetTotalBorrowed sets the "totalBorrowed" field.
func (pc *PoolCreate) SetTotalBorrowed(s string) *PoolCreate {
	pc.mutation.SetTotalBorrowed(s)
	return pc
}

// SetTotalAvailable sets the "totalAvailable" field.
func (pc *PoolCreate) SetTotalAvailable(s string) *PoolCreate {
	pc.mutation.SetTotalAvailable(s)
	return pc
}

// SetTvl sets the "tvl" field.
func (pc *PoolCreate) SetTvl(s string) *PoolCreate {
	pc.mutation.SetTvl(s)
	return pc
}

// SetID sets the "id" field.
func (pc *PoolCreate) SetID(s string) *PoolCreate {
	pc.mutation.SetID(s)
	return pc
}

// AddPositionIDs adds the "positions" edge to the Position entity by IDs.
func (pc *PoolCreate) AddPositionIDs(ids ...string) *PoolCreate {
	pc.mutation.AddPositionIDs(ids...)
	return pc
}

// AddPositions adds the "positions" edges to the Position entity.
func (pc *PoolCreate) AddPositions(p ...*Position) *PoolCreate {
	ids := make([]string, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return pc.AddPositionIDs(ids...)
}

// Mutation returns the PoolMutation object of the builder.
func (pc *PoolCreate) Mutation() *PoolMutation {
	return pc.mutation
}

// Save creates the Pool in the database.
func (pc *PoolCreate) Save(ctx context.Context) (*Pool, error) {
	return withHooks(ctx, pc.sqlSave, pc.mutation, pc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (pc *PoolCreate) SaveX(ctx context.Context) *Pool {
	v, err := pc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (pc *PoolCreate) Exec(ctx context.Context) error {
	_, err := pc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (pc *PoolCreate) ExecX(ctx context.Context) {
	if err := pc.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (pc *PoolCreate) check() error {
	if _, ok := pc.mutation.PoolName(); !ok {
		return &ValidationError{Name: "poolName", err: errors.New(`ent: missing required field "Pool.poolName"`)}
	}
	if _, ok := pc.mutation.DebtCeiling(); !ok {
		return &ValidationError{Name: "debtCeiling", err: errors.New(`ent: missing required field "Pool.debtCeiling"`)}
	}
	if _, ok := pc.mutation.LiquidationRatio(); !ok {
		return &ValidationError{Name: "liquidationRatio", err: errors.New(`ent: missing required field "Pool.liquidationRatio"`)}
	}
	if _, ok := pc.mutation.StabilityFeeRate(); !ok {
		return &ValidationError{Name: "stabilityFeeRate", err: errors.New(`ent: missing required field "Pool.stabilityFeeRate"`)}
	}
	if _, ok := pc.mutation.TokenAdapterAddress(); !ok {
		return &ValidationError{Name: "tokenAdapterAddress", err: errors.New(`ent: missing required field "Pool.tokenAdapterAddress"`)}
	}
	if _, ok := pc.mutation.LockedCollateral(); !ok {
		return &ValidationError{Name: "lockedCollateral", err: errors.New(`ent: missing required field "Pool.lockedCollateral"`)}
	}
	if _, ok := pc.mutation.CollateralPrice(); !ok {
		return &ValidationError{Name: "collateralPrice", err: errors.New(`ent: missing required field "Pool.collateralPrice"`)}
	}
	if _, ok := pc.mutation.CollateralLastPrice(); !ok {
		return &ValidationError{Name: "collateralLastPrice", err: errors.New(`ent: missing required field "Pool.collateralLastPrice"`)}
	}
	if _, ok := pc.mutation.PriceWithSafetyMargin(); !ok {
		return &ValidationError{Name: "priceWithSafetyMargin", err: errors.New(`ent: missing required field "Pool.priceWithSafetyMargin"`)}
	}
	if _, ok := pc.mutation.RawPrice(); !ok {
		return &ValidationError{Name: "rawPrice", err: errors.New(`ent: missing required field "Pool.rawPrice"`)}
	}
	if _, ok := pc.mutation.DebtAccumulatedRate(); !ok {
		return &ValidationError{Name: "debtAccumulatedRate", err: errors.New(`ent: missing required field "Pool.debtAccumulatedRate"`)}
	}
	if _, ok := pc.mutation.TotalBorrowed(); !ok {
		return &ValidationError{Name: "totalBorrowed", err: errors.New(`ent: missing required field "Pool.totalBorrowed"`)}
	}
	if _, ok := pc.mutation.TotalAvailable(); !ok {
		return &ValidationError{Name: "totalAvailable", err: errors.New(`ent: missing required field "Pool.totalAvailable"`)}
	}
	if _, ok := pc.mutation.Tvl(); !ok {
		return &ValidationError{Name: "tvl", err: errors.New(`ent: missing required field "Pool.tvl"`)}
	}
	return nil
}

func (pc *PoolCreate) sqlSave(ctx context.Context) (*Pool, error) {
	if err := pc.check(); err != nil {
		return nil, err
	}
	_node, _spec := pc.createSpec()
	if err := sqlgraph.CreateNode(ctx, pc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(string); ok {
			_node.ID = id
		} else {
			return nil, fmt.Errorf("unexpected Pool.ID type: %T", _spec.ID.Value)
		}
	}
	pc.mutation.id = &_node.ID
	pc.mutation.done = true
	return _node, nil
}

func (pc *PoolCreate) createSpec() (*Pool, *sqlgraph.CreateSpec) {
	var (
		_node = &Pool{config: pc.config}
		_spec = sqlgraph.NewCreateSpec(pool.Table, sqlgraph.NewFieldSpec(pool.FieldID, field.TypeString))
	)
	if id, ok := pc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := pc.mutation.PoolName(); ok {
		_spec.SetField(pool.FieldPoolName, field.TypeString, value)
		_node.PoolName = value
	}
	if value, ok := pc.mutation.DebtCeiling(); ok {
		_spec.SetField(pool.FieldDebtCeiling, field.TypeString, value)
		_node.DebtCeiling = value
	}
	if value, ok := pc.mutation.LiquidationRatio(); ok {
		_spec.SetField(pool.FieldLiquidationRatio, field.TypeString, value)
		_node.LiquidationRatio = value
	}
	if value, ok := pc.mutation.StabilityFeeRate(); ok {
		_spec.SetField(pool.FieldStabilityFeeRate, field.TypeString, value)
		_node.StabilityFeeRate = value
	}
	if value, ok := pc.mutation.TokenAdapterAddress(); ok {
		_spec.SetField(pool.FieldTokenAdapterAddress, field.TypeString, value)
		_node.TokenAdapterAddress = value
	}
	if value, ok := pc.mutation.LockedCollateral(); ok {
		_spec.SetField(pool.FieldLockedCollateral, field.TypeString, value)
		_node.LockedCollateral = value
	}
	if value, ok := pc.mutation.CollateralPrice(); ok {
		_spec.SetField(pool.FieldCollateralPrice, field.TypeString, value)
		_node.CollateralPrice = value
	}
	if value, ok := pc.mutation.CollateralLastPrice(); ok {
		_spec.SetField(pool.FieldCollateralLastPrice, field.TypeString, value)
		_node.CollateralLastPrice = value
	}
	if value, ok := pc.mutation.PriceWithSafetyMargin(); ok {
		_spec.SetField(pool.FieldPriceWithSafetyMargin, field.TypeString, value)
		_node.PriceWithSafetyMargin = value
	}
	if value, ok := pc.mutation.RawPrice(); ok {
		_spec.SetField(pool.FieldRawPrice, field.TypeString, value)
		_node.RawPrice = value
	}
	if value, ok := pc.mutation.DebtAccumulatedRate(); ok {
		_spec.SetField(pool.FieldDebtAccumulatedRate, field.TypeString, value)
		_node.DebtAccumulatedRate = value
	}
	if value, ok := pc.mutation.TotalBorrowed(); ok {
		_spec.SetField(pool.FieldTotalBorrowed, field.TypeString, value)
		_node.TotalBorrowed = value
	}
	if value, ok := pc.mutation.TotalAvailable(); ok {
		_spec.SetField(pool.FieldTotalAvailable, field.TypeString, value)
		_node.TotalAvailable = value
	}
	if value, ok := pc.mutation.Tvl(); ok {
		_spec.SetField(pool.FieldTvl, field.TypeString, value)
		_node.Tvl = value
	}
	if nodes := pc.mutation.PositionsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   pool.PositionsTable,
			Columns: []string{pool.PositionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(position.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// PoolCreateBulk is the builder for creating many Pool entities in bulk.
type PoolCreateBulk struct {
	config
	err      error
	builders []*PoolCreate
}

// Save creates the Pool entities in the database.
func (pcb *PoolCreateBulk) Save(ctx context.Context) ([]*Pool, error) {
	if pcb.err != nil {
		return nil, pcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(pcb.builders))
	nodes := make([]*Pool, len(pcb.builders))
	mutators := make([]Mutator, len(pcb.builders))
	for i := range pcb.builders {
		func(i int, root context.Context) {
			builder := pcb.builders[i]
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*PoolMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, pcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, pcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, pcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (pcb *PoolCreateBulk) SaveX(ctx context.Context) []*Pool {
	v, err := pcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (pcb *PoolCreateBulk) Exec(ctx context.Context) error {
	_, err := pcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (pcb *PoolCreateBulk) ExecX(ctx context.Context) {
	if err := pcb.Exec(ctx); err != nil {
		panic(err)
	}
}
