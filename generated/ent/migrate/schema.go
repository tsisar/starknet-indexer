// Code generated by ent, DO NOT EDIT.

package migrate

import (
	"entgo.io/ent/dialect/sql/schema"
	"entgo.io/ent/schema/field"
)

var (
	// BlocksColumns holds the columns for the "blocks" table.
	BlocksColumns = []*schema.Column{
		{Name: "id", Type: field.TypeInt, Increment: true},
		{Name: "hash", Type: field.TypeString},
		{Name: "number", Type: field.TypeString},
		{Name: "parent_hash", Type: field.TypeString},
		{Name: "timestamp", Type: field.TypeString},
	}
	// BlocksTable holds the schema information for the "blocks" table.
	BlocksTable = &schema.Table{
		Name:       "blocks",
		Columns:    BlocksColumns,
		PrimaryKey: []*schema.Column{BlocksColumns[0]},
	}
	// MetaColumns holds the columns for the "meta" table.
	MetaColumns = []*schema.Column{
		{Name: "id", Type: field.TypeInt, Increment: true},
		{Name: "deployment", Type: field.TypeString},
		{Name: "has_indexing_errors", Type: field.TypeString},
		{Name: "meta_block", Type: field.TypeInt, Nullable: true},
	}
	// MetaTable holds the schema information for the "meta" table.
	MetaTable = &schema.Table{
		Name:       "meta",
		Columns:    MetaColumns,
		PrimaryKey: []*schema.Column{MetaColumns[0]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "meta_blocks_block",
				Columns:    []*schema.Column{MetaColumns[3]},
				RefColumns: []*schema.Column{BlocksColumns[0]},
				OnDelete:   schema.SetNull,
			},
		},
	}
	// PoolsColumns holds the columns for the "pools" table.
	PoolsColumns = []*schema.Column{
		{Name: "id", Type: field.TypeString},
		{Name: "pool_name", Type: field.TypeString},
		{Name: "debt_ceiling", Type: field.TypeString},
		{Name: "liquidation_ratio", Type: field.TypeString},
		{Name: "stability_fee_rate", Type: field.TypeString},
		{Name: "token_adapter_address", Type: field.TypeString},
		{Name: "locked_collateral", Type: field.TypeString},
		{Name: "collateral_price", Type: field.TypeString},
		{Name: "collateral_last_price", Type: field.TypeString},
		{Name: "price_with_safety_margin", Type: field.TypeString},
		{Name: "raw_price", Type: field.TypeString},
		{Name: "debt_accumulated_rate", Type: field.TypeString},
		{Name: "total_borrowed", Type: field.TypeString},
		{Name: "total_available", Type: field.TypeString},
		{Name: "tvl", Type: field.TypeString},
	}
	// PoolsTable holds the schema information for the "pools" table.
	PoolsTable = &schema.Table{
		Name:       "pools",
		Columns:    PoolsColumns,
		PrimaryKey: []*schema.Column{PoolsColumns[0]},
	}
	// PositionsColumns holds the columns for the "positions" table.
	PositionsColumns = []*schema.Column{
		{Name: "id", Type: field.TypeString},
		{Name: "position_address", Type: field.TypeString},
		{Name: "user_address", Type: field.TypeString},
		{Name: "wallet_address", Type: field.TypeString},
		{Name: "collateral_pool", Type: field.TypeString},
		{Name: "collateral_pool_name", Type: field.TypeString},
		{Name: "position_id", Type: field.TypeString},
		{Name: "locked_collateral", Type: field.TypeString},
		{Name: "debt_value", Type: field.TypeString},
		{Name: "debt_share", Type: field.TypeString},
		{Name: "safety_buffer", Type: field.TypeString},
		{Name: "safety_buffer_in_percent", Type: field.TypeString},
		{Name: "tvl", Type: field.TypeString},
		{Name: "position_status", Type: field.TypeString},
		{Name: "liquidation_count", Type: field.TypeString},
		{Name: "block_number", Type: field.TypeString},
		{Name: "block_timestamp", Type: field.TypeString},
		{Name: "transaction", Type: field.TypeString},
		{Name: "pool_positions", Type: field.TypeString, Nullable: true},
		{Name: "position_pool", Type: field.TypeString, Nullable: true},
	}
	// PositionsTable holds the schema information for the "positions" table.
	PositionsTable = &schema.Table{
		Name:       "positions",
		Columns:    PositionsColumns,
		PrimaryKey: []*schema.Column{PositionsColumns[0]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "positions_pools_positions",
				Columns:    []*schema.Column{PositionsColumns[18]},
				RefColumns: []*schema.Column{PoolsColumns[0]},
				OnDelete:   schema.SetNull,
			},
			{
				Symbol:     "positions_pools_pool",
				Columns:    []*schema.Column{PositionsColumns[19]},
				RefColumns: []*schema.Column{PoolsColumns[0]},
				OnDelete:   schema.SetNull,
			},
		},
	}
	// PositionActivitiesColumns holds the columns for the "position_activities" table.
	PositionActivitiesColumns = []*schema.Column{
		{Name: "id", Type: field.TypeString},
		{Name: "activity_state", Type: field.TypeString},
		{Name: "collateral_amount", Type: field.TypeString},
		{Name: "debt_amount", Type: field.TypeString},
		{Name: "block_number", Type: field.TypeString},
		{Name: "block_timestamp", Type: field.TypeString},
		{Name: "transaction", Type: field.TypeString},
		{Name: "position_activity", Type: field.TypeString, Nullable: true},
		{Name: "position_activity_position", Type: field.TypeString, Nullable: true},
	}
	// PositionActivitiesTable holds the schema information for the "position_activities" table.
	PositionActivitiesTable = &schema.Table{
		Name:       "position_activities",
		Columns:    PositionActivitiesColumns,
		PrimaryKey: []*schema.Column{PositionActivitiesColumns[0]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "position_activities_positions_activity",
				Columns:    []*schema.Column{PositionActivitiesColumns[7]},
				RefColumns: []*schema.Column{PositionsColumns[0]},
				OnDelete:   schema.SetNull,
			},
			{
				Symbol:     "position_activities_positions_position",
				Columns:    []*schema.Column{PositionActivitiesColumns[8]},
				RefColumns: []*schema.Column{PositionsColumns[0]},
				OnDelete:   schema.SetNull,
			},
		},
	}
	// ProtocolStatsColumns holds the columns for the "protocol_stats" table.
	ProtocolStatsColumns = []*schema.Column{
		{Name: "id", Type: field.TypeString},
		{Name: "total_supply", Type: field.TypeString},
		{Name: "tvl", Type: field.TypeString},
		{Name: "pools", Type: field.TypeString},
	}
	// ProtocolStatsTable holds the schema information for the "protocol_stats" table.
	ProtocolStatsTable = &schema.Table{
		Name:       "protocol_stats",
		Columns:    ProtocolStatsColumns,
		PrimaryKey: []*schema.Column{ProtocolStatsColumns[0]},
	}
	// StableSwapStatsColumns holds the columns for the "stable_swap_stats" table.
	StableSwapStatsColumns = []*schema.Column{
		{Name: "id", Type: field.TypeString},
		{Name: "total_token_to_stablecoin_swap_events", Type: field.TypeString},
		{Name: "total_stablecoin_to_token_swap_events", Type: field.TypeString},
		{Name: "remaining_daily_swap_amount", Type: field.TypeString},
		{Name: "token_to_stablecoin_total_swap_value", Type: field.TypeString},
		{Name: "stablecoin_to_token_total_swap_value", Type: field.TypeString},
	}
	// StableSwapStatsTable holds the schema information for the "stable_swap_stats" table.
	StableSwapStatsTable = &schema.Table{
		Name:       "stable_swap_stats",
		Columns:    StableSwapStatsColumns,
		PrimaryKey: []*schema.Column{StableSwapStatsColumns[0]},
	}
	// SwapEventsColumns holds the columns for the "swap_events" table.
	SwapEventsColumns = []*schema.Column{
		{Name: "id", Type: field.TypeString},
		{Name: "fee", Type: field.TypeString},
		{Name: "owner", Type: field.TypeString},
		{Name: "value", Type: field.TypeString},
		{Name: "is_stablecoin_to_token_swap", Type: field.TypeBool},
		{Name: "is_token_to_stablecoin_swap", Type: field.TypeBool},
		{Name: "block_number", Type: field.TypeString},
		{Name: "block_timestamp", Type: field.TypeString},
		{Name: "transaction", Type: field.TypeString},
	}
	// SwapEventsTable holds the schema information for the "swap_events" table.
	SwapEventsTable = &schema.Table{
		Name:       "swap_events",
		Columns:    SwapEventsColumns,
		PrimaryKey: []*schema.Column{SwapEventsColumns[0]},
	}
	// UsersColumns holds the columns for the "users" table.
	UsersColumns = []*schema.Column{
		{Name: "id", Type: field.TypeString},
		{Name: "address", Type: field.TypeString},
		{Name: "active_positions_count", Type: field.TypeString},
	}
	// UsersTable holds the schema information for the "users" table.
	UsersTable = &schema.Table{
		Name:       "users",
		Columns:    UsersColumns,
		PrimaryKey: []*schema.Column{UsersColumns[0]},
	}
	// Tables holds all the tables in the schema.
	Tables = []*schema.Table{
		BlocksTable,
		MetaTable,
		PoolsTable,
		PositionsTable,
		PositionActivitiesTable,
		ProtocolStatsTable,
		StableSwapStatsTable,
		SwapEventsTable,
		UsersTable,
	}
)

func init() {
	MetaTable.ForeignKeys[0].RefTable = BlocksTable
	PositionsTable.ForeignKeys[0].RefTable = PoolsTable
	PositionsTable.ForeignKeys[1].RefTable = PoolsTable
	PositionActivitiesTable.ForeignKeys[0].RefTable = PositionsTable
	PositionActivitiesTable.ForeignKeys[1].RefTable = PositionsTable
}
