// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/Tsisar/starknet-indexer/generated/ent/pool"
	"github.com/Tsisar/starknet-indexer/generated/ent/position"
	"github.com/Tsisar/starknet-indexer/generated/ent/predicate"
)

// PoolUpdate is the builder for updating Pool entities.
type PoolUpdate struct {
	config
	hooks    []Hook
	mutation *PoolMutation
}

// Where appends a list predicates to the PoolUpdate builder.
func (pu *PoolUpdate) Where(ps ...predicate.Pool) *PoolUpdate {
	pu.mutation.Where(ps...)
	return pu
}

// SetPoolName sets the "poolName" field.
func (pu *PoolUpdate) SetPoolName(s string) *PoolUpdate {
	pu.mutation.SetPoolName(s)
	return pu
}

// SetNillablePoolName sets the "poolName" field if the given value is not nil.
func (pu *PoolUpdate) SetNillablePoolName(s *string) *PoolUpdate {
	if s != nil {
		pu.SetPoolName(*s)
	}
	return pu
}

// SetDebtCeiling sets the "debtCeiling" field.
func (pu *PoolUpdate) SetDebtCeiling(s string) *PoolUpdate {
	pu.mutation.SetDebtCeiling(s)
	return pu
}

// SetNillableDebtCeiling sets the "debtCeiling" field if the given value is not nil.
func (pu *PoolUpdate) SetNillableDebtCeiling(s *string) *PoolUpdate {
	if s != nil {
		pu.SetDebtCeiling(*s)
	}
	return pu
}

// SetLiquidationRatio sets the "liquidationRatio" field.
func (pu *PoolUpdate) SetLiquidationRatio(s string) *PoolUpdate {
	pu.mutation.SetLiquidationRatio(s)
	return pu
}

// SetNillableLiquidationRatio sets the "liquidationRatio" field if the given value is not nil.
func (pu *PoolUpdate) SetNillableLiquidationRatio(s *string) *PoolUpdate {
	if s != nil {
		pu.SetLiquidationRatio(*s)
	}
	return pu
}

// SetStabilityFeeRate sets the "stabilityFeeRate" field.
func (pu *PoolUpdate) SetStabilityFeeRate(s string) *PoolUpdate {
	pu.mutation.SetStabilityFeeRate(s)
	return pu
}

// SetNillableStabilityFeeRate sets the "stabilityFeeRate" field if the given value is not nil.
func (pu *PoolUpdate) SetNillableStabilityFeeRate(s *string) *PoolUpdate {
	if s != nil {
		pu.SetStabilityFeeRate(*s)
	}
	return pu
}

// SetTokenAdapterAddress sets the "tokenAdapterAddress" field.
func (pu *PoolUpdate) SetTokenAdapterAddress(s string) *PoolUpdate {
	pu.mutation.SetTokenAdapterAddress(s)
	return pu
}

// SetNillableTokenAdapterAddress sets the "tokenAdapterAddress" field if the given value is not nil.
func (pu *PoolUpdate) SetNillableTokenAdapterAddress(s *string) *PoolUpdate {
	if s != nil {
		pu.SetTokenAdapterAddress(*s)
	}
	return pu
}

// SetLockedCollateral sets the "lockedCollateral" field.
func (pu *PoolUpdate) SetLockedCollateral(s string) *PoolUpdate {
	pu.mutation.SetLockedCollateral(s)
	return pu
}

// SetNillableLockedCollateral sets the "lockedCollateral" field if the given value is not nil.
func (pu *PoolUpdate) SetNillableLockedCollateral(s *string) *PoolUpdate {
	if s != nil {
		pu.SetLockedCollateral(*s)
	}
	return pu
}

// SetCollateralPrice sets the "collateralPrice" field.
func (pu *PoolUpdate) SetCollateralPrice(s string) *PoolUpdate {
	pu.mutation.SetCollateralPrice(s)
	return pu
}

// SetNillableCollateralPrice sets the "collateralPrice" field if the given value is not nil.
func (pu *PoolUpdate) SetNillableCollateralPrice(s *string) *PoolUpdate {
	if s != nil {
		pu.SetCollateralPrice(*s)
	}
	return pu
}

// SetCollateralLastPrice sets the "collateralLastPrice" field.
func (pu *PoolUpdate) SetCollateralLastPrice(s string) *PoolUpdate {
	pu.mutation.SetCollateralLastPrice(s)
	return pu
}

// SetNillableCollateralLastPrice sets the "collateralLastPrice" field if the given value is not nil.
func (pu *PoolUpdate) SetNillableCollateralLastPrice(s *string) *PoolUpdate {
	if s != nil {
		pu.SetCollateralLastPrice(*s)
	}
	return pu
}

// SetPriceWithSafetyMargin sets the "priceWithSafetyMargin" field.
func (pu *PoolUpdate) SetPriceWithSafetyMargin(s string) *PoolUpdate {
	pu.mutation.SetPriceWithSafetyMargin(s)
	return pu
}

// SetNillablePriceWithSafetyMargin sets the "priceWithSafetyMargin" field if the given value is not nil.
func (pu *PoolUpdate) SetNillablePriceWithSafetyMargin(s *string) *PoolUpdate {
	if s != nil {
		pu.SetPriceWithSafetyMargin(*s)
	}
	return pu
}

// SetRawPrice sets the "rawPrice" field.
func (pu *PoolUpdate) SetRawPrice(s string) *PoolUpdate {
	pu.mutation.SetRawPrice(s)
	return pu
}

// SetNillableRawPrice sets the "rawPrice" field if the given value is not nil.
func (pu *PoolUpdate) SetNillableRawPrice(s *string) *PoolUpdate {
	if s != nil {
		pu.SetRawPrice(*s)
	}
	return pu
}

// SetDebtAccumulatedRate sets the "debtAccumulatedRate" field.
func (pu *PoolUpdate) SetDebtAccumulatedRate(s string) *PoolUpdate {
	pu.mutation.SetDebtAccumulatedRate(s)
	return pu
}

// SetNillableDebtAccumulatedRate sets the "debtAccumulatedRate" field if the given value is not nil.
func (pu *PoolUpdate) SetNillableDebtAccumulatedRate(s *string) *PoolUpdate {
	if s != nil {
		pu.SetDebtAccumulatedRate(*s)
	}
	return pu
}

// SetTotalBorrowed sets the "totalBorrowed" field.
func (pu *PoolUpdate) SetTotalBorrowed(s string) *PoolUpdate {
	pu.mutation.SetTotalBorrowed(s)
	return pu
}

// SetNillableTotalBorrowed sets the "totalBorrowed" field if the given value is not nil.
func (pu *PoolUpdate) SetNillableTotalBorrowed(s *string) *PoolUpdate {
	if s != nil {
		pu.SetTotalBorrowed(*s)
	}
	return pu
}

// SetTotalAvailable sets the "totalAvailable" field.
func (pu *PoolUpdate) SetTotalAvailable(s string) *PoolUpdate {
	pu.mutation.SetTotalAvailable(s)
	return pu
}

// SetNillableTotalAvailable sets the "totalAvailable" field if the given value is not nil.
func (pu *PoolUpdate) SetNillableTotalAvailable(s *string) *PoolUpdate {
	if s != nil {
		pu.SetTotalAvailable(*s)
	}
	return pu
}

// SetTvl sets the "tvl" field.
func (pu *PoolUpdate) SetTvl(s string) *PoolUpdate {
	pu.mutation.SetTvl(s)
	return pu
}

// SetNillableTvl sets the "tvl" field if the given value is not nil.
func (pu *PoolUpdate) SetNillableTvl(s *string) *PoolUpdate {
	if s != nil {
		pu.SetTvl(*s)
	}
	return pu
}

// AddPositionIDs adds the "positions" edge to the Position entity by IDs.
func (pu *PoolUpdate) AddPositionIDs(ids ...string) *PoolUpdate {
	pu.mutation.AddPositionIDs(ids...)
	return pu
}

// AddPositions adds the "positions" edges to the Position entity.
func (pu *PoolUpdate) AddPositions(p ...*Position) *PoolUpdate {
	ids := make([]string, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return pu.AddPositionIDs(ids...)
}

// Mutation returns the PoolMutation object of the builder.
func (pu *PoolUpdate) Mutation() *PoolMutation {
	return pu.mutation
}

// ClearPositions clears all "positions" edges to the Position entity.
func (pu *PoolUpdate) ClearPositions() *PoolUpdate {
	pu.mutation.ClearPositions()
	return pu
}

// RemovePositionIDs removes the "positions" edge to Position entities by IDs.
func (pu *PoolUpdate) RemovePositionIDs(ids ...string) *PoolUpdate {
	pu.mutation.RemovePositionIDs(ids...)
	return pu
}

// RemovePositions removes "positions" edges to Position entities.
func (pu *PoolUpdate) RemovePositions(p ...*Position) *PoolUpdate {
	ids := make([]string, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return pu.RemovePositionIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (pu *PoolUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, pu.sqlSave, pu.mutation, pu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (pu *PoolUpdate) SaveX(ctx context.Context) int {
	affected, err := pu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (pu *PoolUpdate) Exec(ctx context.Context) error {
	_, err := pu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (pu *PoolUpdate) ExecX(ctx context.Context) {
	if err := pu.Exec(ctx); err != nil {
		panic(err)
	}
}

func (pu *PoolUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(pool.Table, pool.Columns, sqlgraph.NewFieldSpec(pool.FieldID, field.TypeString))
	if ps := pu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := pu.mutation.PoolName(); ok {
		_spec.SetField(pool.FieldPoolName, field.TypeString, value)
	}
	if value, ok := pu.mutation.DebtCeiling(); ok {
		_spec.SetField(pool.FieldDebtCeiling, field.TypeString, value)
	}
	if value, ok := pu.mutation.LiquidationRatio(); ok {
		_spec.SetField(pool.FieldLiquidationRatio, field.TypeString, value)
	}
	if value, ok := pu.mutation.StabilityFeeRate(); ok {
		_spec.SetField(pool.FieldStabilityFeeRate, field.TypeString, value)
	}
	if value, ok := pu.mutation.TokenAdapterAddress(); ok {
		_spec.SetField(pool.FieldTokenAdapterAddress, field.TypeString, value)
	}
	if value, ok := pu.mutation.LockedCollateral(); ok {
		_spec.SetField(pool.FieldLockedCollateral, field.TypeString, value)
	}
	if value, ok := pu.mutation.CollateralPrice(); ok {
		_spec.SetField(pool.FieldCollateralPrice, field.TypeString, value)
	}
	if value, ok := pu.mutation.CollateralLastPrice(); ok {
		_spec.SetField(pool.FieldCollateralLastPrice, field.TypeString, value)
	}
	if value, ok := pu.mutation.PriceWithSafetyMargin(); ok {
		_spec.SetField(pool.FieldPriceWithSafetyMargin, field.TypeString, value)
	}
	if value, ok := pu.mutation.RawPrice(); ok {
		_spec.SetField(pool.FieldRawPrice, field.TypeString, value)
	}
	if value, ok := pu.mutation.DebtAccumulatedRate(); ok {
		_spec.SetField(pool.FieldDebtAccumulatedRate, field.TypeString, value)
	}
	if value, ok := pu.mutation.TotalBorrowed(); ok {
		_spec.SetField(pool.FieldTotalBorrowed, field.TypeString, value)
	}
	if value, ok := pu.mutation.TotalAvailable(); ok {
		_spec.SetField(pool.FieldTotalAvailable, field.TypeString, value)
	}
	if value, ok := pu.mutation.Tvl(); ok {
		_spec.SetField(pool.FieldTvl, field.TypeString, value)
	}
	if pu.mutation.PositionsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   pool.PositionsTable,
			Columns: []string{pool.PositionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(position.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pu.mutation.RemovedPositionsIDs(); len(nodes) > 0 && !pu.mutation.PositionsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   pool.PositionsTable,
			Columns: []string{pool.PositionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(position.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pu.mutation.PositionsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   pool.PositionsTable,
			Columns: []string{pool.PositionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(position.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, pu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{pool.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	pu.mutation.done = true
	return n, nil
}

// PoolUpdateOne is the builder for updating a single Pool entity.
type PoolUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *PoolMutation
}

// SetPoolName sets the "poolName" field.
func (puo *PoolUpdateOne) SetPoolName(s string) *PoolUpdateOne {
	puo.mutation.SetPoolName(s)
	return puo
}

// SetNillablePoolName sets the "poolName" field if the given value is not nil.
func (puo *PoolUpdateOne) SetNillablePoolName(s *string) *PoolUpdateOne {
	if s != nil {
		puo.SetPoolName(*s)
	}
	return puo
}

// SetDebtCeiling sets the "debtCeiling" field.
func (puo *PoolUpdateOne) SetDebtCeiling(s string) *PoolUpdateOne {
	puo.mutation.SetDebtCeiling(s)
	return puo
}

// SetNillableDebtCeiling sets the "debtCeiling" field if the given value is not nil.
func (puo *PoolUpdateOne) SetNillableDebtCeiling(s *string) *PoolUpdateOne {
	if s != nil {
		puo.SetDebtCeiling(*s)
	}
	return puo
}

// SetLiquidationRatio sets the "liquidationRatio" field.
func (puo *PoolUpdateOne) SetLiquidationRatio(s string) *PoolUpdateOne {
	puo.mutation.SetLiquidationRatio(s)
	return puo
}

// SetNillableLiquidationRatio sets the "liquidationRatio" field if the given value is not nil.
func (puo *PoolUpdateOne) SetNillableLiquidationRatio(s *string) *PoolUpdateOne {
	if s != nil {
		puo.SetLiquidationRatio(*s)
	}
	return puo
}

// SetStabilityFeeRate sets the "stabilityFeeRate" field.
func (puo *PoolUpdateOne) SetStabilityFeeRate(s string) *PoolUpdateOne {
	puo.mutation.SetStabilityFeeRate(s)
	return puo
}

// SetNillableStabilityFeeRate sets the "stabilityFeeRate" field if the given value is not nil.
func (puo *PoolUpdateOne) SetNillableStabilityFeeRate(s *string) *PoolUpdateOne {
	if s != nil {
		puo.SetStabilityFeeRate(*s)
	}
	return puo
}

// SetTokenAdapterAddress sets the "tokenAdapterAddress" field.
func (puo *PoolUpdateOne) SetTokenAdapterAddress(s string) *PoolUpdateOne {
	puo.mutation.SetTokenAdapterAddress(s)
	return puo
}

// SetNillableTokenAdapterAddress sets the "tokenAdapterAddress" field if the given value is not nil.
func (puo *PoolUpdateOne) SetNillableTokenAdapterAddress(s *string) *PoolUpdateOne {
	if s != nil {
		puo.SetTokenAdapterAddress(*s)
	}
	return puo
}

// SetLockedCollateral sets the "lockedCollateral" field.
func (puo *PoolUpdateOne) SetLockedCollateral(s string) *PoolUpdateOne {
	puo.mutation.SetLockedCollateral(s)
	return puo
}

// SetNillableLockedCollateral sets the "lockedCollateral" field if the given value is not nil.
func (puo *PoolUpdateOne) SetNillableLockedCollateral(s *string) *PoolUpdateOne {
	if s != nil {
		puo.SetLockedCollateral(*s)
	}
	return puo
}

// SetCollateralPrice sets the "collateralPrice" field.
func (puo *PoolUpdateOne) SetCollateralPrice(s string) *PoolUpdateOne {
	puo.mutation.SetCollateralPrice(s)
	return puo
}

// SetNillableCollateralPrice sets the "collateralPrice" field if the given value is not nil.
func (puo *PoolUpdateOne) SetNillableCollateralPrice(s *string) *PoolUpdateOne {
	if s != nil {
		puo.SetCollateralPrice(*s)
	}
	return puo
}

// SetCollateralLastPrice sets the "collateralLastPrice" field.
func (puo *PoolUpdateOne) SetCollateralLastPrice(s string) *PoolUpdateOne {
	puo.mutation.SetCollateralLastPrice(s)
	return puo
}

// SetNillableCollateralLastPrice sets the "collateralLastPrice" field if the given value is not nil.
func (puo *PoolUpdateOne) SetNillableCollateralLastPrice(s *string) *PoolUpdateOne {
	if s != nil {
		puo.SetCollateralLastPrice(*s)
	}
	return puo
}

// SetPriceWithSafetyMargin sets the "priceWithSafetyMargin" field.
func (puo *PoolUpdateOne) SetPriceWithSafetyMargin(s string) *PoolUpdateOne {
	puo.mutation.SetPriceWithSafetyMargin(s)
	return puo
}

// SetNillablePriceWithSafetyMargin sets the "priceWithSafetyMargin" field if the given value is not nil.
func (puo *PoolUpdateOne) SetNillablePriceWithSafetyMargin(s *string) *PoolUpdateOne {
	if s != nil {
		puo.SetPriceWithSafetyMargin(*s)
	}
	return puo
}

// SetRawPrice sets the "rawPrice" field.
func (puo *PoolUpdateOne) SetRawPrice(s string) *PoolUpdateOne {
	puo.mutation.SetRawPrice(s)
	return puo
}

// SetNillableRawPrice sets the "rawPrice" field if the given value is not nil.
func (puo *PoolUpdateOne) SetNillableRawPrice(s *string) *PoolUpdateOne {
	if s != nil {
		puo.SetRawPrice(*s)
	}
	return puo
}

// SetDebtAccumulatedRate sets the "debtAccumulatedRate" field.
func (puo *PoolUpdateOne) SetDebtAccumulatedRate(s string) *PoolUpdateOne {
	puo.mutation.SetDebtAccumulatedRate(s)
	return puo
}

// SetNillableDebtAccumulatedRate sets the "debtAccumulatedRate" field if the given value is not nil.
func (puo *PoolUpdateOne) SetNillableDebtAccumulatedRate(s *string) *PoolUpdateOne {
	if s != nil {
		puo.SetDebtAccumulatedRate(*s)
	}
	return puo
}

// SetTotalBorrowed sets the "totalBorrowed" field.
func (puo *PoolUpdateOne) SetTotalBorrowed(s string) *PoolUpdateOne {
	puo.mutation.SetTotalBorrowed(s)
	return puo
}

// SetNillableTotalBorrowed sets the "totalBorrowed" field if the given value is not nil.
func (puo *PoolUpdateOne) SetNillableTotalBorrowed(s *string) *PoolUpdateOne {
	if s != nil {
		puo.SetTotalBorrowed(*s)
	}
	return puo
}

// SetTotalAvailable sets the "totalAvailable" field.
func (puo *PoolUpdateOne) SetTotalAvailable(s string) *PoolUpdateOne {
	puo.mutation.SetTotalAvailable(s)
	return puo
}

// SetNillableTotalAvailable sets the "totalAvailable" field if the given value is not nil.
func (puo *PoolUpdateOne) SetNillableTotalAvailable(s *string) *PoolUpdateOne {
	if s != nil {
		puo.SetTotalAvailable(*s)
	}
	return puo
}

// SetTvl sets the "tvl" field.
func (puo *PoolUpdateOne) SetTvl(s string) *PoolUpdateOne {
	puo.mutation.SetTvl(s)
	return puo
}

// SetNillableTvl sets the "tvl" field if the given value is not nil.
func (puo *PoolUpdateOne) SetNillableTvl(s *string) *PoolUpdateOne {
	if s != nil {
		puo.SetTvl(*s)
	}
	return puo
}

// AddPositionIDs adds the "positions" edge to the Position entity by IDs.
func (puo *PoolUpdateOne) AddPositionIDs(ids ...string) *PoolUpdateOne {
	puo.mutation.AddPositionIDs(ids...)
	return puo
}

// AddPositions adds the "positions" edges to the Position entity.
func (puo *PoolUpdateOne) AddPositions(p ...*Position) *PoolUpdateOne {
	ids := make([]string, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return puo.AddPositionIDs(ids...)
}

// Mutation returns the PoolMutation object of the builder.
func (puo *PoolUpdateOne) Mutation() *PoolMutation {
	return puo.mutation
}

// ClearPositions clears all "positions" edges to the Position entity.
func (puo *PoolUpdateOne) ClearPositions() *PoolUpdateOne {
	puo.mutation.ClearPositions()
	return puo
}

// RemovePositionIDs removes the "positions" edge to Position entities by IDs.
func (puo *PoolUpdateOne) RemovePositionIDs(ids ...string) *PoolUpdateOne {
	puo.mutation.RemovePositionIDs(ids...)
	return puo
}

// RemovePositions removes "positions" edges to Position entities.
func (puo *PoolUpdateOne) RemovePositions(p ...*Position) *PoolUpdateOne {
	ids := make([]string, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return puo.RemovePositionIDs(ids...)
}

// Where appends a list predicates to the PoolUpdate builder.
func (puo *PoolUpdateOne) Where(ps ...predicate.Pool) *PoolUpdateOne {
	puo.mutation.Where(ps...)
	return puo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (puo *PoolUpdateOne) Select(field string, fields ...string) *PoolUpdateOne {
	puo.fields = append([]string{field}, fields...)
	return puo
}

// Save executes the query and returns the updated Pool entity.
func (puo *PoolUpdateOne) Save(ctx context.Context) (*Pool, error) {
	return withHooks(ctx, puo.sqlSave, puo.mutation, puo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (puo *PoolUpdateOne) SaveX(ctx context.Context) *Pool {
	node, err := puo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (puo *PoolUpdateOne) Exec(ctx context.Context) error {
	_, err := puo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (puo *PoolUpdateOne) ExecX(ctx context.Context) {
	if err := puo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (puo *PoolUpdateOne) sqlSave(ctx context.Context) (_node *Pool, err error) {
	_spec := sqlgraph.NewUpdateSpec(pool.Table, pool.Columns, sqlgraph.NewFieldSpec(pool.FieldID, field.TypeString))
	id, ok := puo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Pool.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := puo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, pool.FieldID)
		for _, f := range fields {
			if !pool.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != pool.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := puo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := puo.mutation.PoolName(); ok {
		_spec.SetField(pool.FieldPoolName, field.TypeString, value)
	}
	if value, ok := puo.mutation.DebtCeiling(); ok {
		_spec.SetField(pool.FieldDebtCeiling, field.TypeString, value)
	}
	if value, ok := puo.mutation.LiquidationRatio(); ok {
		_spec.SetField(pool.FieldLiquidationRatio, field.TypeString, value)
	}
	if value, ok := puo.mutation.StabilityFeeRate(); ok {
		_spec.SetField(pool.FieldStabilityFeeRate, field.TypeString, value)
	}
	if value, ok := puo.mutation.TokenAdapterAddress(); ok {
		_spec.SetField(pool.FieldTokenAdapterAddress, field.TypeString, value)
	}
	if value, ok := puo.mutation.LockedCollateral(); ok {
		_spec.SetField(pool.FieldLockedCollateral, field.TypeString, value)
	}
	if value, ok := puo.mutation.CollateralPrice(); ok {
		_spec.SetField(pool.FieldCollateralPrice, field.TypeString, value)
	}
	if value, ok := puo.mutation.CollateralLastPrice(); ok {
		_spec.SetField(pool.FieldCollateralLastPrice, field.TypeString, value)
	}
	if value, ok := puo.mutation.PriceWithSafetyMargin(); ok {
		_spec.SetField(pool.FieldPriceWithSafetyMargin, field.TypeString, value)
	}
	if value, ok := puo.mutation.RawPrice(); ok {
		_spec.SetField(pool.FieldRawPrice, field.TypeString, value)
	}
	if value, ok := puo.mutation.DebtAccumulatedRate(); ok {
		_spec.SetField(pool.FieldDebtAccumulatedRate, field.TypeString, value)
	}
	if value, ok := puo.mutation.TotalBorrowed(); ok {
		_spec.SetField(pool.FieldTotalBorrowed, field.TypeString, value)
	}
	if value, ok := puo.mutation.TotalAvailable(); ok {
		_spec.SetField(pool.FieldTotalAvailable, field.TypeString, value)
	}
	if value, ok := puo.mutation.Tvl(); ok {
		_spec.SetField(pool.FieldTvl, field.TypeString, value)
	}
	if puo.mutation.PositionsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   pool.PositionsTable,
			Columns: []string{pool.PositionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(position.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := puo.mutation.RemovedPositionsIDs(); len(nodes) > 0 && !puo.mutation.PositionsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   pool.PositionsTable,
			Columns: []string{pool.PositionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(position.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := puo.mutation.PositionsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   pool.PositionsTable,
			Columns: []string{pool.PositionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(position.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Pool{config: puo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, puo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{pool.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	puo.mutation.done = true
	return _node, nil
}
