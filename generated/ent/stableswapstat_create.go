// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/Tsisar/starknet-indexer/generated/ent/stableswapstat"
)

// StableSwapStatCreate is the builder for creating a StableSwapStat entity.
type StableSwapStatCreate struct {
	config
	mutation *StableSwapStatMutation
	hooks    []Hook
}

// SetTotalTokenToStablecoinSwapEvents sets the "totalTokenToStablecoinSwapEvents" field.
func (sssc *StableSwapStatCreate) SetTotalTokenToStablecoinSwapEvents(s string) *StableSwapStatCreate {
	sssc.mutation.SetTotalTokenToStablecoinSwapEvents(s)
	return sssc
}

// SetTotalStablecoinToTokenSwapEvents sets the "totalStablecoinToTokenSwapEvents" field.
func (sssc *StableSwapStatCreate) SetTotalStablecoinToTokenSwapEvents(s string) *StableSwapStatCreate {
	sssc.mutation.SetTotalStablecoinToTokenSwapEvents(s)
	return sssc
}

// SetRemainingDailySwapAmount sets the "remainingDailySwapAmount" field.
func (sssc *StableSwapStatCreate) SetRemainingDailySwapAmount(s string) *StableSwapStatCreate {
	sssc.mutation.SetRemainingDailySwapAmount(s)
	return sssc
}

// SetTokenToStablecoinTotalSwapValue sets the "tokenToStablecoinTotalSwapValue" field.
func (sssc *StableSwapStatCreate) SetTokenToStablecoinTotalSwapValue(s string) *StableSwapStatCreate {
	sssc.mutation.SetTokenToStablecoinTotalSwapValue(s)
	return sssc
}

// SetStablecoinToTokenTotalSwapValue sets the "stablecoinToTokenTotalSwapValue" field.
func (sssc *StableSwapStatCreate) SetStablecoinToTokenTotalSwapValue(s string) *StableSwapStatCreate {
	sssc.mutation.SetStablecoinToTokenTotalSwapValue(s)
	return sssc
}

// SetID sets the "id" field.
func (sssc *StableSwapStatCreate) SetID(s string) *StableSwapStatCreate {
	sssc.mutation.SetID(s)
	return sssc
}

// Mutation returns the StableSwapStatMutation object of the builder.
func (sssc *StableSwapStatCreate) Mutation() *StableSwapStatMutation {
	return sssc.mutation
}

// Save creates the StableSwapStat in the database.
func (sssc *StableSwapStatCreate) Save(ctx context.Context) (*StableSwapStat, error) {
	return withHooks(ctx, sssc.sqlSave, sssc.mutation, sssc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (sssc *StableSwapStatCreate) SaveX(ctx context.Context) *StableSwapStat {
	v, err := sssc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (sssc *StableSwapStatCreate) Exec(ctx context.Context) error {
	_, err := sssc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (sssc *StableSwapStatCreate) ExecX(ctx context.Context) {
	if err := sssc.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (sssc *StableSwapStatCreate) check() error {
	if _, ok := sssc.mutation.TotalTokenToStablecoinSwapEvents(); !ok {
		return &ValidationError{Name: "totalTokenToStablecoinSwapEvents", err: errors.New(`ent: missing required field "StableSwapStat.totalTokenToStablecoinSwapEvents"`)}
	}
	if _, ok := sssc.mutation.TotalStablecoinToTokenSwapEvents(); !ok {
		return &ValidationError{Name: "totalStablecoinToTokenSwapEvents", err: errors.New(`ent: missing required field "StableSwapStat.totalStablecoinToTokenSwapEvents"`)}
	}
	if _, ok := sssc.mutation.RemainingDailySwapAmount(); !ok {
		return &ValidationError{Name: "remainingDailySwapAmount", err: errors.New(`ent: missing required field "StableSwapStat.remainingDailySwapAmount"`)}
	}
	if _, ok := sssc.mutation.TokenToStablecoinTotalSwapValue(); !ok {
		return &ValidationError{Name: "tokenToStablecoinTotalSwapValue", err: errors.New(`ent: missing required field "StableSwapStat.tokenToStablecoinTotalSwapValue"`)}
	}
	if _, ok := sssc.mutation.StablecoinToTokenTotalSwapValue(); !ok {
		return &ValidationError{Name: "stablecoinToTokenTotalSwapValue", err: errors.New(`ent: missing required field "StableSwapStat.stablecoinToTokenTotalSwapValue"`)}
	}
	return nil
}

func (sssc *StableSwapStatCreate) sqlSave(ctx context.Context) (*StableSwapStat, error) {
	if err := sssc.check(); err != nil {
		return nil, err
	}
	_node, _spec := sssc.createSpec()
	if err := sqlgraph.CreateNode(ctx, sssc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(string); ok {
			_node.ID = id
		} else {
			return nil, fmt.Errorf("unexpected StableSwapStat.ID type: %T", _spec.ID.Value)
		}
	}
	sssc.mutation.id = &_node.ID
	sssc.mutation.done = true
	return _node, nil
}

func (sssc *StableSwapStatCreate) createSpec() (*StableSwapStat, *sqlgraph.CreateSpec) {
	var (
		_node = &StableSwapStat{config: sssc.config}
		_spec = sqlgraph.NewCreateSpec(stableswapstat.Table, sqlgraph.NewFieldSpec(stableswapstat.FieldID, field.TypeString))
	)
	if id, ok := sssc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := sssc.mutation.TotalTokenToStablecoinSwapEvents(); ok {
		_spec.SetField(stableswapstat.FieldTotalTokenToStablecoinSwapEvents, field.TypeString, value)
		_node.TotalTokenToStablecoinSwapEvents = value
	}
	if value, ok := sssc.mutation.TotalStablecoinToTokenSwapEvents(); ok {
		_spec.SetField(stableswapstat.FieldTotalStablecoinToTokenSwapEvents, field.TypeString, value)
		_node.TotalStablecoinToTokenSwapEvents = value
	}
	if value, ok := sssc.mutation.RemainingDailySwapAmount(); ok {
		_spec.SetField(stableswapstat.FieldRemainingDailySwapAmount, field.TypeString, value)
		_node.RemainingDailySwapAmount = value
	}
	if value, ok := sssc.mutation.TokenToStablecoinTotalSwapValue(); ok {
		_spec.SetField(stableswapstat.FieldTokenToStablecoinTotalSwapValue, field.TypeString, value)
		_node.TokenToStablecoinTotalSwapValue = value
	}
	if value, ok := sssc.mutation.StablecoinToTokenTotalSwapValue(); ok {
		_spec.SetField(stableswapstat.FieldStablecoinToTokenTotalSwapValue, field.TypeString, value)
		_node.StablecoinToTokenTotalSwapValue = value
	}
	return _node, _spec
}

// StableSwapStatCreateBulk is the builder for creating many StableSwapStat entities in bulk.
type StableSwapStatCreateBulk struct {
	config
	err      error
	builders []*StableSwapStatCreate
}

// Save creates the StableSwapStat entities in the database.
func (ssscb *StableSwapStatCreateBulk) Save(ctx context.Context) ([]*StableSwapStat, error) {
	if ssscb.err != nil {
		return nil, ssscb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(ssscb.builders))
	nodes := make([]*StableSwapStat, len(ssscb.builders))
	mutators := make([]Mutator, len(ssscb.builders))
	for i := range ssscb.builders {
		func(i int, root context.Context) {
			builder := ssscb.builders[i]
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*StableSwapStatMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, ssscb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, ssscb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, ssscb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (ssscb *StableSwapStatCreateBulk) SaveX(ctx context.Context) []*StableSwapStat {
	v, err := ssscb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (ssscb *StableSwapStatCreateBulk) Exec(ctx context.Context) error {
	_, err := ssscb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ssscb *StableSwapStatCreateBulk) ExecX(ctx context.Context) {
	if err := ssscb.Exec(ctx); err != nil {
		panic(err)
	}
}
