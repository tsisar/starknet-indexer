// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/tsisar/starknet-indexer/generated/ent/pool"
	"github.com/tsisar/starknet-indexer/generated/ent/position"
)

// Position is the model entity for the Position schema.
type Position struct {
	config `json:"-"`
	// ID of the ent.
	ID string `json:"id,omitempty"`
	// PositionAddress holds the value of the "positionAddress" field.
	PositionAddress string `json:"positionAddress,omitempty"`
	// UserAddress holds the value of the "userAddress" field.
	UserAddress string `json:"userAddress,omitempty"`
	// WalletAddress holds the value of the "walletAddress" field.
	WalletAddress string `json:"walletAddress,omitempty"`
	// CollateralPool holds the value of the "collateralPool" field.
	CollateralPool string `json:"collateralPool,omitempty"`
	// CollateralPoolName holds the value of the "collateralPoolName" field.
	CollateralPoolName string `json:"collateralPoolName,omitempty"`
	// PositionId holds the value of the "positionId" field.
	PositionId string `json:"positionId,omitempty"`
	// LockedCollateral holds the value of the "lockedCollateral" field.
	LockedCollateral string `json:"lockedCollateral,omitempty"`
	// DebtValue holds the value of the "debtValue" field.
	DebtValue string `json:"debtValue,omitempty"`
	// DebtShare holds the value of the "debtShare" field.
	DebtShare string `json:"debtShare,omitempty"`
	// SafetyBuffer holds the value of the "safetyBuffer" field.
	SafetyBuffer string `json:"safetyBuffer,omitempty"`
	// SafetyBufferInPercent holds the value of the "safetyBufferInPercent" field.
	SafetyBufferInPercent string `json:"safetyBufferInPercent,omitempty"`
	// Tvl holds the value of the "tvl" field.
	Tvl string `json:"tvl,omitempty"`
	// PositionStatus holds the value of the "positionStatus" field.
	PositionStatus string `json:"positionStatus,omitempty"`
	// LiquidationCount holds the value of the "liquidationCount" field.
	LiquidationCount string `json:"liquidationCount,omitempty"`
	// BlockNumber holds the value of the "blockNumber" field.
	BlockNumber string `json:"blockNumber,omitempty"`
	// BlockTimestamp holds the value of the "blockTimestamp" field.
	BlockTimestamp string `json:"blockTimestamp,omitempty"`
	// Transaction holds the value of the "transaction" field.
	Transaction string `json:"transaction,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the PositionQuery when eager-loading is set.
	Edges          PositionEdges `json:"edges"`
	pool_positions *string
	position_pool  *string
	selectValues   sql.SelectValues
}

// PositionEdges holds the relations/edges for other nodes in the graph.
type PositionEdges struct {
	// Pool holds the value of the pool edge.
	Pool *Pool `json:"pool,omitempty"`
	// Activity holds the value of the activity edge.
	Activity []*PositionActivity `json:"activity,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [2]bool
}

// PoolOrErr returns the Pool value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e PositionEdges) PoolOrErr() (*Pool, error) {
	if e.Pool != nil {
		return e.Pool, nil
	} else if e.loadedTypes[0] {
		return nil, &NotFoundError{label: pool.Label}
	}
	return nil, &NotLoadedError{edge: "pool"}
}

// ActivityOrErr returns the Activity value or an error if the edge
// was not loaded in eager-loading.
func (e PositionEdges) ActivityOrErr() ([]*PositionActivity, error) {
	if e.loadedTypes[1] {
		return e.Activity, nil
	}
	return nil, &NotLoadedError{edge: "activity"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Position) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case position.FieldID, position.FieldPositionAddress, position.FieldUserAddress, position.FieldWalletAddress, position.FieldCollateralPool, position.FieldCollateralPoolName, position.FieldPositionId, position.FieldLockedCollateral, position.FieldDebtValue, position.FieldDebtShare, position.FieldSafetyBuffer, position.FieldSafetyBufferInPercent, position.FieldTvl, position.FieldPositionStatus, position.FieldLiquidationCount, position.FieldBlockNumber, position.FieldBlockTimestamp, position.FieldTransaction:
			values[i] = new(sql.NullString)
		case position.ForeignKeys[0]: // pool_positions
			values[i] = new(sql.NullString)
		case position.ForeignKeys[1]: // position_pool
			values[i] = new(sql.NullString)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Position fields.
func (po *Position) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case position.FieldID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value.Valid {
				po.ID = value.String
			}
		case position.FieldPositionAddress:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field positionAddress", values[i])
			} else if value.Valid {
				po.PositionAddress = value.String
			}
		case position.FieldUserAddress:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field userAddress", values[i])
			} else if value.Valid {
				po.UserAddress = value.String
			}
		case position.FieldWalletAddress:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field walletAddress", values[i])
			} else if value.Valid {
				po.WalletAddress = value.String
			}
		case position.FieldCollateralPool:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field collateralPool", values[i])
			} else if value.Valid {
				po.CollateralPool = value.String
			}
		case position.FieldCollateralPoolName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field collateralPoolName", values[i])
			} else if value.Valid {
				po.CollateralPoolName = value.String
			}
		case position.FieldPositionId:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field positionId", values[i])
			} else if value.Valid {
				po.PositionId = value.String
			}
		case position.FieldLockedCollateral:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field lockedCollateral", values[i])
			} else if value.Valid {
				po.LockedCollateral = value.String
			}
		case position.FieldDebtValue:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field debtValue", values[i])
			} else if value.Valid {
				po.DebtValue = value.String
			}
		case position.FieldDebtShare:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field debtShare", values[i])
			} else if value.Valid {
				po.DebtShare = value.String
			}
		case position.FieldSafetyBuffer:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field safetyBuffer", values[i])
			} else if value.Valid {
				po.SafetyBuffer = value.String
			}
		case position.FieldSafetyBufferInPercent:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field safetyBufferInPercent", values[i])
			} else if value.Valid {
				po.SafetyBufferInPercent = value.String
			}
		case position.FieldTvl:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field tvl", values[i])
			} else if value.Valid {
				po.Tvl = value.String
			}
		case position.FieldPositionStatus:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field positionStatus", values[i])
			} else if value.Valid {
				po.PositionStatus = value.String
			}
		case position.FieldLiquidationCount:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field liquidationCount", values[i])
			} else if value.Valid {
				po.LiquidationCount = value.String
			}
		case position.FieldBlockNumber:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field blockNumber", values[i])
			} else if value.Valid {
				po.BlockNumber = value.String
			}
		case position.FieldBlockTimestamp:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field blockTimestamp", values[i])
			} else if value.Valid {
				po.BlockTimestamp = value.String
			}
		case position.FieldTransaction:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field transaction", values[i])
			} else if value.Valid {
				po.Transaction = value.String
			}
		case position.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field pool_positions", values[i])
			} else if value.Valid {
				po.pool_positions = new(string)
				*po.pool_positions = value.String
			}
		case position.ForeignKeys[1]:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field position_pool", values[i])
			} else if value.Valid {
				po.position_pool = new(string)
				*po.position_pool = value.String
			}
		default:
			po.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the Position.
// This includes values selected through modifiers, order, etc.
func (po *Position) Value(name string) (ent.Value, error) {
	return po.selectValues.Get(name)
}

// QueryPool queries the "pool" edge of the Position entity.
func (po *Position) QueryPool() *PoolQuery {
	return NewPositionClient(po.config).QueryPool(po)
}

// QueryActivity queries the "activity" edge of the Position entity.
func (po *Position) QueryActivity() *PositionActivityQuery {
	return NewPositionClient(po.config).QueryActivity(po)
}

// Update returns a builder for updating this Position.
// Note that you need to call Position.Unwrap() before calling this method if this Position
// was returned from a transaction, and the transaction was committed or rolled back.
func (po *Position) Update() *PositionUpdateOne {
	return NewPositionClient(po.config).UpdateOne(po)
}

// Unwrap unwraps the Position entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (po *Position) Unwrap() *Position {
	_tx, ok := po.config.driver.(*txDriver)
	if !ok {
		panic("ent: Position is not a transactional entity")
	}
	po.config.driver = _tx.drv
	return po
}

// String implements the fmt.Stringer.
func (po *Position) String() string {
	var builder strings.Builder
	builder.WriteString("Position(")
	builder.WriteString(fmt.Sprintf("id=%v, ", po.ID))
	builder.WriteString("positionAddress=")
	builder.WriteString(po.PositionAddress)
	builder.WriteString(", ")
	builder.WriteString("userAddress=")
	builder.WriteString(po.UserAddress)
	builder.WriteString(", ")
	builder.WriteString("walletAddress=")
	builder.WriteString(po.WalletAddress)
	builder.WriteString(", ")
	builder.WriteString("collateralPool=")
	builder.WriteString(po.CollateralPool)
	builder.WriteString(", ")
	builder.WriteString("collateralPoolName=")
	builder.WriteString(po.CollateralPoolName)
	builder.WriteString(", ")
	builder.WriteString("positionId=")
	builder.WriteString(po.PositionId)
	builder.WriteString(", ")
	builder.WriteString("lockedCollateral=")
	builder.WriteString(po.LockedCollateral)
	builder.WriteString(", ")
	builder.WriteString("debtValue=")
	builder.WriteString(po.DebtValue)
	builder.WriteString(", ")
	builder.WriteString("debtShare=")
	builder.WriteString(po.DebtShare)
	builder.WriteString(", ")
	builder.WriteString("safetyBuffer=")
	builder.WriteString(po.SafetyBuffer)
	builder.WriteString(", ")
	builder.WriteString("safetyBufferInPercent=")
	builder.WriteString(po.SafetyBufferInPercent)
	builder.WriteString(", ")
	builder.WriteString("tvl=")
	builder.WriteString(po.Tvl)
	builder.WriteString(", ")
	builder.WriteString("positionStatus=")
	builder.WriteString(po.PositionStatus)
	builder.WriteString(", ")
	builder.WriteString("liquidationCount=")
	builder.WriteString(po.LiquidationCount)
	builder.WriteString(", ")
	builder.WriteString("blockNumber=")
	builder.WriteString(po.BlockNumber)
	builder.WriteString(", ")
	builder.WriteString("blockTimestamp=")
	builder.WriteString(po.BlockTimestamp)
	builder.WriteString(", ")
	builder.WriteString("transaction=")
	builder.WriteString(po.Transaction)
	builder.WriteByte(')')
	return builder.String()
}

// Positions is a parsable slice of Position.
type Positions []*Position
