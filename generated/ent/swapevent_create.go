// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/tsisar/starknet-indexer/generated/ent/swapevent"
)

// SwapEventCreate is the builder for creating a SwapEvent entity.
type SwapEventCreate struct {
	config
	mutation *SwapEventMutation
	hooks    []Hook
}

// SetFee sets the "fee" field.
func (sec *SwapEventCreate) SetFee(s string) *SwapEventCreate {
	sec.mutation.SetFee(s)
	return sec
}

// SetOwner sets the "owner" field.
func (sec *SwapEventCreate) SetOwner(s string) *SwapEventCreate {
	sec.mutation.SetOwner(s)
	return sec
}

// SetValue sets the "value" field.
func (sec *SwapEventCreate) SetValue(s string) *SwapEventCreate {
	sec.mutation.SetValue(s)
	return sec
}

// SetIsStablecoinToTokenSwap sets the "isStablecoinToTokenSwap" field.
func (sec *SwapEventCreate) SetIsStablecoinToTokenSwap(b bool) *SwapEventCreate {
	sec.mutation.SetIsStablecoinToTokenSwap(b)
	return sec
}

// SetIsTokenToStablecoinSwap sets the "isTokenToStablecoinSwap" field.
func (sec *SwapEventCreate) SetIsTokenToStablecoinSwap(b bool) *SwapEventCreate {
	sec.mutation.SetIsTokenToStablecoinSwap(b)
	return sec
}

// SetBlockNumber sets the "blockNumber" field.
func (sec *SwapEventCreate) SetBlockNumber(s string) *SwapEventCreate {
	sec.mutation.SetBlockNumber(s)
	return sec
}

// SetBlockTimestamp sets the "blockTimestamp" field.
func (sec *SwapEventCreate) SetBlockTimestamp(s string) *SwapEventCreate {
	sec.mutation.SetBlockTimestamp(s)
	return sec
}

// SetTransaction sets the "transaction" field.
func (sec *SwapEventCreate) SetTransaction(s string) *SwapEventCreate {
	sec.mutation.SetTransaction(s)
	return sec
}

// SetID sets the "id" field.
func (sec *SwapEventCreate) SetID(s string) *SwapEventCreate {
	sec.mutation.SetID(s)
	return sec
}

// Mutation returns the SwapEventMutation object of the builder.
func (sec *SwapEventCreate) Mutation() *SwapEventMutation {
	return sec.mutation
}

// Save creates the SwapEvent in the database.
func (sec *SwapEventCreate) Save(ctx context.Context) (*SwapEvent, error) {
	return withHooks(ctx, sec.sqlSave, sec.mutation, sec.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (sec *SwapEventCreate) SaveX(ctx context.Context) *SwapEvent {
	v, err := sec.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (sec *SwapEventCreate) Exec(ctx context.Context) error {
	_, err := sec.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (sec *SwapEventCreate) ExecX(ctx context.Context) {
	if err := sec.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (sec *SwapEventCreate) check() error {
	if _, ok := sec.mutation.Fee(); !ok {
		return &ValidationError{Name: "fee", err: errors.New(`ent: missing required field "SwapEvent.fee"`)}
	}
	if _, ok := sec.mutation.Owner(); !ok {
		return &ValidationError{Name: "owner", err: errors.New(`ent: missing required field "SwapEvent.owner"`)}
	}
	if _, ok := sec.mutation.Value(); !ok {
		return &ValidationError{Name: "value", err: errors.New(`ent: missing required field "SwapEvent.value"`)}
	}
	if _, ok := sec.mutation.IsStablecoinToTokenSwap(); !ok {
		return &ValidationError{Name: "isStablecoinToTokenSwap", err: errors.New(`ent: missing required field "SwapEvent.isStablecoinToTokenSwap"`)}
	}
	if _, ok := sec.mutation.IsTokenToStablecoinSwap(); !ok {
		return &ValidationError{Name: "isTokenToStablecoinSwap", err: errors.New(`ent: missing required field "SwapEvent.isTokenToStablecoinSwap"`)}
	}
	if _, ok := sec.mutation.BlockNumber(); !ok {
		return &ValidationError{Name: "blockNumber", err: errors.New(`ent: missing required field "SwapEvent.blockNumber"`)}
	}
	if _, ok := sec.mutation.BlockTimestamp(); !ok {
		return &ValidationError{Name: "blockTimestamp", err: errors.New(`ent: missing required field "SwapEvent.blockTimestamp"`)}
	}
	if _, ok := sec.mutation.Transaction(); !ok {
		return &ValidationError{Name: "transaction", err: errors.New(`ent: missing required field "SwapEvent.transaction"`)}
	}
	return nil
}

func (sec *SwapEventCreate) sqlSave(ctx context.Context) (*SwapEvent, error) {
	if err := sec.check(); err != nil {
		return nil, err
	}
	_node, _spec := sec.createSpec()
	if err := sqlgraph.CreateNode(ctx, sec.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(string); ok {
			_node.ID = id
		} else {
			return nil, fmt.Errorf("unexpected SwapEvent.ID type: %T", _spec.ID.Value)
		}
	}
	sec.mutation.id = &_node.ID
	sec.mutation.done = true
	return _node, nil
}

func (sec *SwapEventCreate) createSpec() (*SwapEvent, *sqlgraph.CreateSpec) {
	var (
		_node = &SwapEvent{config: sec.config}
		_spec = sqlgraph.NewCreateSpec(swapevent.Table, sqlgraph.NewFieldSpec(swapevent.FieldID, field.TypeString))
	)
	if id, ok := sec.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := sec.mutation.Fee(); ok {
		_spec.SetField(swapevent.FieldFee, field.TypeString, value)
		_node.Fee = value
	}
	if value, ok := sec.mutation.Owner(); ok {
		_spec.SetField(swapevent.FieldOwner, field.TypeString, value)
		_node.Owner = value
	}
	if value, ok := sec.mutation.Value(); ok {
		_spec.SetField(swapevent.FieldValue, field.TypeString, value)
		_node.Value = value
	}
	if value, ok := sec.mutation.IsStablecoinToTokenSwap(); ok {
		_spec.SetField(swapevent.FieldIsStablecoinToTokenSwap, field.TypeBool, value)
		_node.IsStablecoinToTokenSwap = value
	}
	if value, ok := sec.mutation.IsTokenToStablecoinSwap(); ok {
		_spec.SetField(swapevent.FieldIsTokenToStablecoinSwap, field.TypeBool, value)
		_node.IsTokenToStablecoinSwap = value
	}
	if value, ok := sec.mutation.BlockNumber(); ok {
		_spec.SetField(swapevent.FieldBlockNumber, field.TypeString, value)
		_node.BlockNumber = value
	}
	if value, ok := sec.mutation.BlockTimestamp(); ok {
		_spec.SetField(swapevent.FieldBlockTimestamp, field.TypeString, value)
		_node.BlockTimestamp = value
	}
	if value, ok := sec.mutation.Transaction(); ok {
		_spec.SetField(swapevent.FieldTransaction, field.TypeString, value)
		_node.Transaction = value
	}
	return _node, _spec
}

// SwapEventCreateBulk is the builder for creating many SwapEvent entities in bulk.
type SwapEventCreateBulk struct {
	config
	err      error
	builders []*SwapEventCreate
}

// Save creates the SwapEvent entities in the database.
func (secb *SwapEventCreateBulk) Save(ctx context.Context) ([]*SwapEvent, error) {
	if secb.err != nil {
		return nil, secb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(secb.builders))
	nodes := make([]*SwapEvent, len(secb.builders))
	mutators := make([]Mutator, len(secb.builders))
	for i := range secb.builders {
		func(i int, root context.Context) {
			builder := secb.builders[i]
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*SwapEventMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, secb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, secb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, secb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (secb *SwapEventCreateBulk) SaveX(ctx context.Context) []*SwapEvent {
	v, err := secb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (secb *SwapEventCreateBulk) Exec(ctx context.Context) error {
	_, err := secb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (secb *SwapEventCreateBulk) ExecX(ctx context.Context) {
	if err := secb.Exec(ctx); err != nil {
		panic(err)
	}
}
