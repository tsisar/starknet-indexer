// Code generated by generator-mapper; DO NOT EDIT.

package registry

import (
	"context"
	"encoding/json"
	"fmt"
	"github.com/tsisar/extended-log-go/log"
	"github.com/tsisar/starknet-indexer/generated/ent"
	"github.com/tsisar/starknet-indexer/internal/storage/model"
)

type EventMapper func(ctx context.Context, client *ent.Client, event model.Event) error

type EventHandler[T any] func(ctx context.Context, client *ent.Client, ev T, transaction model.Transaction) error

var RegistryMap = map[string]map[string]EventMapper{
	"vault_eth":                VaultEthRegistry,
	"bookkeeper":               BookkeeperRegistry,
	"aggregators_registry":     AggregatorsRegistryRegistry,
	"liquidation_engine":       LiquidationEngineRegistry,
	"access_control_manager":   AccessControlManagerRegistry,
	"vault_wbtc":               VaultWbtcRegistry,
	"collateral_adapter_eth":   CollateralAdapterEthRegistry,
	"collateral_adapter_strk":  CollateralAdapterStrkRegistry,
	"liquidation_strategy":     LiquidationStrategyRegistry,
	"splyce_price_oracle_strk": SplycePriceOracleStrkRegistry,
	"nodes_registry":           NodesRegistryRegistry,
	"collateral_adapter_wbtc":  CollateralAdapterWbtcRegistry,
	"position_manager":         PositionManagerRegistry,
	"aggregator_strk":          AggregatorStrkRegistry,
	"wallet_factory":           WalletFactoryRegistry,
	"show_stopper":             ShowStopperRegistry,
	"aggregator_factory":       AggregatorFactoryRegistry,
	"splyce_price_oracle_wbtc": SplycePriceOracleWbtcRegistry,
	"price_feed_eth":           PriceFeedEthRegistry,
	"treasury":                 TreasuryRegistry,
	"aggregator_wbtc":          AggregatorWbtcRegistry,
	"price_feed_strk":          PriceFeedStrkRegistry,
	"price_feed_wbtc":          PriceFeedWbtcRegistry,
	"factory":                  FactoryRegistry,
	"stablecoin":               StablecoinRegistry,
	"pragma_price_oracle_eth":  PragmaPriceOracleEthRegistry,
	"system_debt_engine":       SystemDebtEngineRegistry,
	"access_control_config":    AccessControlConfigRegistry,
	"stability_fee_collector":  StabilityFeeCollectorRegistry,
	"subscriptions_registry":   SubscriptionsRegistryRegistry,
	"admin_controls":           AdminControlsRegistry,
	"price_consumer":           PriceConsumerRegistry,
	"collateral_pool_config":   CollateralPoolConfigRegistry,
	"vault_strk":               VaultStrkRegistry,
	"stablecoin_adapter":       StablecoinAdapterRegistry,
}

func makeMapper[T any](handler EventHandler[T]) EventMapper {
	return func(ctx context.Context, client *ent.Client, event model.Event) error {
		log.Debugf("[mapper] Mapping event: %s", event.Name)

		var ev T
		if err := json.Unmarshal(event.JsonEv, &ev); err != nil {
			return fmt.Errorf("[mapping] failed to decode %T: %v", ev, err)
		}

		if handler != nil {
			if err := handler(ctx, client, ev, event.Transaction); err != nil {
				return fmt.Errorf("[mapping] failed to handle %T: %v", ev, err)
			}
		}

		return nil
	}
}
