// Code generated by github.com/99designs/gqlgen, DO NOT EDIT.

package graphql

import (
	"bytes"
	"context"
	"embed"
	"errors"
	"fmt"
	"strconv"
	"sync"
	"sync/atomic"

	"github.com/99designs/gqlgen/graphql"
	"github.com/99designs/gqlgen/graphql/introspection"
	"github.com/tsisar/starknet-indexer/generated/ent"
	"github.com/tsisar/starknet-indexer/graphql/model"
	gqlparser "github.com/vektah/gqlparser/v2"
	"github.com/vektah/gqlparser/v2/ast"
)

// region    ************************** generated!.gotpl **************************

// NewExecutableSchema creates an ExecutableSchema from the ResolverRoot interface.
func NewExecutableSchema(cfg Config) graphql.ExecutableSchema {
	return &executableSchema{
		schema:     cfg.Schema,
		resolvers:  cfg.Resolvers,
		directives: cfg.Directives,
		complexity: cfg.Complexity,
	}
}

type Config struct {
	Schema     *ast.Schema
	Resolvers  ResolverRoot
	Directives DirectiveRoot
	Complexity ComplexityRoot
}

type ResolverRoot interface {
	Pool() PoolResolver
	Position() PositionResolver
	PositionActivity() PositionActivityResolver
	ProtocolStat() ProtocolStatResolver
	Query() QueryResolver
}

type DirectiveRoot struct {
}

type ComplexityRoot struct {
	Block struct {
		Hash       func(childComplexity int) int
		Number     func(childComplexity int) int
		ParentHash func(childComplexity int) int
		Timestamp  func(childComplexity int) int
	}

	Meta struct {
		Block             func(childComplexity int) int
		Deployment        func(childComplexity int) int
		HasIndexingErrors func(childComplexity int) int
	}

	Pool struct {
		CollateralLastPrice   func(childComplexity int) int
		CollateralPrice       func(childComplexity int) int
		DebtAccumulatedRate   func(childComplexity int) int
		DebtCeiling           func(childComplexity int) int
		ID                    func(childComplexity int) int
		LiquidationRatio      func(childComplexity int) int
		LockedCollateral      func(childComplexity int) int
		PoolName              func(childComplexity int) int
		Positions             func(childComplexity int, where *model.PositionWhereInput, orderBy *model.PositionOrderBy, first *int32, skip *int32) int
		PriceWithSafetyMargin func(childComplexity int) int
		RawPrice              func(childComplexity int) int
		StabilityFeeRate      func(childComplexity int) int
		TokenAdapterAddress   func(childComplexity int) int
		TotalAvailable        func(childComplexity int) int
		TotalBorrowed         func(childComplexity int) int
		Tvl                   func(childComplexity int) int
	}

	Position struct {
		Activities            func(childComplexity int, where *model.PositionActivityWhereInput, orderBy *model.PositionActivityOrderBy, first *int32, skip *int32) int
		BlockNumber           func(childComplexity int) int
		BlockTimestamp        func(childComplexity int) int
		CollateralPool        func(childComplexity int) int
		CollateralPoolName    func(childComplexity int) int
		DebtShare             func(childComplexity int) int
		DebtValue             func(childComplexity int) int
		ID                    func(childComplexity int) int
		LiquidationCount      func(childComplexity int) int
		LockedCollateral      func(childComplexity int) int
		Pools                 func(childComplexity int, where *model.PoolWhereInput, orderBy *model.PoolOrderBy, first *int32, skip *int32) int
		PositionAddress       func(childComplexity int) int
		PositionId            func(childComplexity int) int
		PositionStatus        func(childComplexity int) int
		SafetyBuffer          func(childComplexity int) int
		SafetyBufferInPercent func(childComplexity int) int
		Transaction           func(childComplexity int) int
		Tvl                   func(childComplexity int) int
		UserAddress           func(childComplexity int) int
		WalletAddress         func(childComplexity int) int
	}

	PositionActivity struct {
		ActivityState    func(childComplexity int) int
		BlockNumber      func(childComplexity int) int
		BlockTimestamp   func(childComplexity int) int
		CollateralAmount func(childComplexity int) int
		DebtAmount       func(childComplexity int) int
		ID               func(childComplexity int) int
		Position         func(childComplexity int, where *model.PositionWhereInput, orderBy *model.PositionOrderBy, first *int32, skip *int32) int
		Transaction      func(childComplexity int) int
	}

	ProtocolStat struct {
		ID          func(childComplexity int) int
		Pools       func(childComplexity int) int
		TotalSupply func(childComplexity int) int
		Tvl         func(childComplexity int) int
	}

	Query struct {
		Meta               func(childComplexity int) int
		Pool               func(childComplexity int, id *string) int
		Pools              func(childComplexity int, where *model.PoolWhereInput, orderBy *model.PoolOrderBy, first *int32, skip *int32) int
		Position           func(childComplexity int, id *string) int
		PositionActivities func(childComplexity int, where *model.PositionActivityWhereInput, orderBy *model.PositionActivityOrderBy, first *int32, skip *int32) int
		PositionActivity   func(childComplexity int, id *string) int
		Positions          func(childComplexity int, where *model.PositionWhereInput, orderBy *model.PositionOrderBy, first *int32, skip *int32) int
		ProtocolStat       func(childComplexity int, id *string) int
		ProtocolStats      func(childComplexity int, where *model.ProtocolStatWhereInput, orderBy *model.ProtocolStatOrderBy, first *int32, skip *int32) int
		StableSwapStat     func(childComplexity int, id *string) int
		StableSwapStats    func(childComplexity int, where *model.StableSwapStatWhereInput, orderBy *model.StableSwapStatOrderBy, first *int32, skip *int32) int
		SwapEvent          func(childComplexity int, id *string) int
		SwapEvents         func(childComplexity int, where *model.SwapEventWhereInput, orderBy *model.SwapEventOrderBy, first *int32, skip *int32) int
		User               func(childComplexity int, id *string) int
		Users              func(childComplexity int, where *model.UserWhereInput, orderBy *model.UserOrderBy, first *int32, skip *int32) int
	}

	StableSwapStat struct {
		ID                               func(childComplexity int) int
		RemainingDailySwapAmount         func(childComplexity int) int
		StablecoinToTokenTotalSwapValue  func(childComplexity int) int
		TokenToStablecoinTotalSwapValue  func(childComplexity int) int
		TotalStablecoinToTokenSwapEvents func(childComplexity int) int
		TotalTokenToStablecoinSwapEvents func(childComplexity int) int
	}

	SwapEvent struct {
		BlockNumber             func(childComplexity int) int
		BlockTimestamp          func(childComplexity int) int
		Fee                     func(childComplexity int) int
		ID                      func(childComplexity int) int
		IsStablecoinToTokenSwap func(childComplexity int) int
		IsTokenToStablecoinSwap func(childComplexity int) int
		Owner                   func(childComplexity int) int
		Transaction             func(childComplexity int) int
		Value                   func(childComplexity int) int
	}

	User struct {
		ActivePositionsCount func(childComplexity int) int
		Address              func(childComplexity int) int
		ID                   func(childComplexity int) int
	}
}

type PoolResolver interface {
	Positions(ctx context.Context, obj *ent.Pool, where *model.PositionWhereInput, orderBy *model.PositionOrderBy, first *int32, skip *int32) ([]*ent.Position, error)
}
type PositionResolver interface {
	PositionStatus(ctx context.Context, obj *ent.Position) (model.PositionStatus, error)

	Pools(ctx context.Context, obj *ent.Position, where *model.PoolWhereInput, orderBy *model.PoolOrderBy, first *int32, skip *int32) ([]*ent.Pool, error)
	Activities(ctx context.Context, obj *ent.Position, where *model.PositionActivityWhereInput, orderBy *model.PositionActivityOrderBy, first *int32, skip *int32) ([]*ent.PositionActivity, error)
}
type PositionActivityResolver interface {
	Position(ctx context.Context, obj *ent.PositionActivity, where *model.PositionWhereInput, orderBy *model.PositionOrderBy, first *int32, skip *int32) (*ent.Position, error)
	ActivityState(ctx context.Context, obj *ent.PositionActivity) (model.PositionActivityState, error)
}
type ProtocolStatResolver interface {
	Pools(ctx context.Context, obj *ent.ProtocolStat) ([]string, error)
}
type QueryResolver interface {
	Meta(ctx context.Context) (*model.Meta, error)
	User(ctx context.Context, id *string) (*ent.User, error)
	Users(ctx context.Context, where *model.UserWhereInput, orderBy *model.UserOrderBy, first *int32, skip *int32) ([]*ent.User, error)
	Pool(ctx context.Context, id *string) (*ent.Pool, error)
	Pools(ctx context.Context, where *model.PoolWhereInput, orderBy *model.PoolOrderBy, first *int32, skip *int32) ([]*ent.Pool, error)
	ProtocolStat(ctx context.Context, id *string) (*ent.ProtocolStat, error)
	ProtocolStats(ctx context.Context, where *model.ProtocolStatWhereInput, orderBy *model.ProtocolStatOrderBy, first *int32, skip *int32) ([]*ent.ProtocolStat, error)
	Position(ctx context.Context, id *string) (*ent.Position, error)
	Positions(ctx context.Context, where *model.PositionWhereInput, orderBy *model.PositionOrderBy, first *int32, skip *int32) ([]*ent.Position, error)
	PositionActivity(ctx context.Context, id *string) (*ent.PositionActivity, error)
	PositionActivities(ctx context.Context, where *model.PositionActivityWhereInput, orderBy *model.PositionActivityOrderBy, first *int32, skip *int32) ([]*ent.PositionActivity, error)
	SwapEvent(ctx context.Context, id *string) (*ent.SwapEvent, error)
	SwapEvents(ctx context.Context, where *model.SwapEventWhereInput, orderBy *model.SwapEventOrderBy, first *int32, skip *int32) ([]*ent.SwapEvent, error)
	StableSwapStat(ctx context.Context, id *string) (*ent.StableSwapStat, error)
	StableSwapStats(ctx context.Context, where *model.StableSwapStatWhereInput, orderBy *model.StableSwapStatOrderBy, first *int32, skip *int32) ([]*ent.StableSwapStat, error)
}

type executableSchema struct {
	schema     *ast.Schema
	resolvers  ResolverRoot
	directives DirectiveRoot
	complexity ComplexityRoot
}

func (e *executableSchema) Schema() *ast.Schema {
	if e.schema != nil {
		return e.schema
	}
	return parsedSchema
}

func (e *executableSchema) Complexity(ctx context.Context, typeName, field string, childComplexity int, rawArgs map[string]any) (int, bool) {
	ec := executionContext{nil, e, 0, 0, nil}
	_ = ec
	switch typeName + "." + field {

	case "Block.hash":
		if e.complexity.Block.Hash == nil {
			break
		}

		return e.complexity.Block.Hash(childComplexity), true

	case "Block.number":
		if e.complexity.Block.Number == nil {
			break
		}

		return e.complexity.Block.Number(childComplexity), true

	case "Block.parentHash":
		if e.complexity.Block.ParentHash == nil {
			break
		}

		return e.complexity.Block.ParentHash(childComplexity), true

	case "Block.timestamp":
		if e.complexity.Block.Timestamp == nil {
			break
		}

		return e.complexity.Block.Timestamp(childComplexity), true

	case "Meta.block":
		if e.complexity.Meta.Block == nil {
			break
		}

		return e.complexity.Meta.Block(childComplexity), true

	case "Meta.deployment":
		if e.complexity.Meta.Deployment == nil {
			break
		}

		return e.complexity.Meta.Deployment(childComplexity), true

	case "Meta.hasIndexingErrors":
		if e.complexity.Meta.HasIndexingErrors == nil {
			break
		}

		return e.complexity.Meta.HasIndexingErrors(childComplexity), true

	case "Pool.collateralLastPrice":
		if e.complexity.Pool.CollateralLastPrice == nil {
			break
		}

		return e.complexity.Pool.CollateralLastPrice(childComplexity), true

	case "Pool.collateralPrice":
		if e.complexity.Pool.CollateralPrice == nil {
			break
		}

		return e.complexity.Pool.CollateralPrice(childComplexity), true

	case "Pool.debtAccumulatedRate":
		if e.complexity.Pool.DebtAccumulatedRate == nil {
			break
		}

		return e.complexity.Pool.DebtAccumulatedRate(childComplexity), true

	case "Pool.debtCeiling":
		if e.complexity.Pool.DebtCeiling == nil {
			break
		}

		return e.complexity.Pool.DebtCeiling(childComplexity), true

	case "Pool.id":
		if e.complexity.Pool.ID == nil {
			break
		}

		return e.complexity.Pool.ID(childComplexity), true

	case "Pool.liquidationRatio":
		if e.complexity.Pool.LiquidationRatio == nil {
			break
		}

		return e.complexity.Pool.LiquidationRatio(childComplexity), true

	case "Pool.lockedCollateral":
		if e.complexity.Pool.LockedCollateral == nil {
			break
		}

		return e.complexity.Pool.LockedCollateral(childComplexity), true

	case "Pool.poolName":
		if e.complexity.Pool.PoolName == nil {
			break
		}

		return e.complexity.Pool.PoolName(childComplexity), true

	case "Pool.positions":
		if e.complexity.Pool.Positions == nil {
			break
		}

		args, err := ec.field_Pool_positions_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Pool.Positions(childComplexity, args["where"].(*model.PositionWhereInput), args["orderBy"].(*model.PositionOrderBy), args["first"].(*int32), args["skip"].(*int32)), true

	case "Pool.priceWithSafetyMargin":
		if e.complexity.Pool.PriceWithSafetyMargin == nil {
			break
		}

		return e.complexity.Pool.PriceWithSafetyMargin(childComplexity), true

	case "Pool.rawPrice":
		if e.complexity.Pool.RawPrice == nil {
			break
		}

		return e.complexity.Pool.RawPrice(childComplexity), true

	case "Pool.stabilityFeeRate":
		if e.complexity.Pool.StabilityFeeRate == nil {
			break
		}

		return e.complexity.Pool.StabilityFeeRate(childComplexity), true

	case "Pool.tokenAdapterAddress":
		if e.complexity.Pool.TokenAdapterAddress == nil {
			break
		}

		return e.complexity.Pool.TokenAdapterAddress(childComplexity), true

	case "Pool.totalAvailable":
		if e.complexity.Pool.TotalAvailable == nil {
			break
		}

		return e.complexity.Pool.TotalAvailable(childComplexity), true

	case "Pool.totalBorrowed":
		if e.complexity.Pool.TotalBorrowed == nil {
			break
		}

		return e.complexity.Pool.TotalBorrowed(childComplexity), true

	case "Pool.tvl":
		if e.complexity.Pool.Tvl == nil {
			break
		}

		return e.complexity.Pool.Tvl(childComplexity), true

	case "Position.activities":
		if e.complexity.Position.Activities == nil {
			break
		}

		args, err := ec.field_Position_activities_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Position.Activities(childComplexity, args["where"].(*model.PositionActivityWhereInput), args["orderBy"].(*model.PositionActivityOrderBy), args["first"].(*int32), args["skip"].(*int32)), true

	case "Position.blockNumber":
		if e.complexity.Position.BlockNumber == nil {
			break
		}

		return e.complexity.Position.BlockNumber(childComplexity), true

	case "Position.blockTimestamp":
		if e.complexity.Position.BlockTimestamp == nil {
			break
		}

		return e.complexity.Position.BlockTimestamp(childComplexity), true

	case "Position.collateralPool":
		if e.complexity.Position.CollateralPool == nil {
			break
		}

		return e.complexity.Position.CollateralPool(childComplexity), true

	case "Position.collateralPoolName":
		if e.complexity.Position.CollateralPoolName == nil {
			break
		}

		return e.complexity.Position.CollateralPoolName(childComplexity), true

	case "Position.debtShare":
		if e.complexity.Position.DebtShare == nil {
			break
		}

		return e.complexity.Position.DebtShare(childComplexity), true

	case "Position.debtValue":
		if e.complexity.Position.DebtValue == nil {
			break
		}

		return e.complexity.Position.DebtValue(childComplexity), true

	case "Position.id":
		if e.complexity.Position.ID == nil {
			break
		}

		return e.complexity.Position.ID(childComplexity), true

	case "Position.liquidationCount":
		if e.complexity.Position.LiquidationCount == nil {
			break
		}

		return e.complexity.Position.LiquidationCount(childComplexity), true

	case "Position.lockedCollateral":
		if e.complexity.Position.LockedCollateral == nil {
			break
		}

		return e.complexity.Position.LockedCollateral(childComplexity), true

	case "Position.pools":
		if e.complexity.Position.Pools == nil {
			break
		}

		args, err := ec.field_Position_pools_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Position.Pools(childComplexity, args["where"].(*model.PoolWhereInput), args["orderBy"].(*model.PoolOrderBy), args["first"].(*int32), args["skip"].(*int32)), true

	case "Position.positionAddress":
		if e.complexity.Position.PositionAddress == nil {
			break
		}

		return e.complexity.Position.PositionAddress(childComplexity), true

	case "Position.positionId":
		if e.complexity.Position.PositionId == nil {
			break
		}

		return e.complexity.Position.PositionId(childComplexity), true

	case "Position.positionStatus":
		if e.complexity.Position.PositionStatus == nil {
			break
		}

		return e.complexity.Position.PositionStatus(childComplexity), true

	case "Position.safetyBuffer":
		if e.complexity.Position.SafetyBuffer == nil {
			break
		}

		return e.complexity.Position.SafetyBuffer(childComplexity), true

	case "Position.safetyBufferInPercent":
		if e.complexity.Position.SafetyBufferInPercent == nil {
			break
		}

		return e.complexity.Position.SafetyBufferInPercent(childComplexity), true

	case "Position.transaction":
		if e.complexity.Position.Transaction == nil {
			break
		}

		return e.complexity.Position.Transaction(childComplexity), true

	case "Position.tvl":
		if e.complexity.Position.Tvl == nil {
			break
		}

		return e.complexity.Position.Tvl(childComplexity), true

	case "Position.userAddress":
		if e.complexity.Position.UserAddress == nil {
			break
		}

		return e.complexity.Position.UserAddress(childComplexity), true

	case "Position.walletAddress":
		if e.complexity.Position.WalletAddress == nil {
			break
		}

		return e.complexity.Position.WalletAddress(childComplexity), true

	case "PositionActivity.activityState":
		if e.complexity.PositionActivity.ActivityState == nil {
			break
		}

		return e.complexity.PositionActivity.ActivityState(childComplexity), true

	case "PositionActivity.blockNumber":
		if e.complexity.PositionActivity.BlockNumber == nil {
			break
		}

		return e.complexity.PositionActivity.BlockNumber(childComplexity), true

	case "PositionActivity.blockTimestamp":
		if e.complexity.PositionActivity.BlockTimestamp == nil {
			break
		}

		return e.complexity.PositionActivity.BlockTimestamp(childComplexity), true

	case "PositionActivity.collateralAmount":
		if e.complexity.PositionActivity.CollateralAmount == nil {
			break
		}

		return e.complexity.PositionActivity.CollateralAmount(childComplexity), true

	case "PositionActivity.debtAmount":
		if e.complexity.PositionActivity.DebtAmount == nil {
			break
		}

		return e.complexity.PositionActivity.DebtAmount(childComplexity), true

	case "PositionActivity.id":
		if e.complexity.PositionActivity.ID == nil {
			break
		}

		return e.complexity.PositionActivity.ID(childComplexity), true

	case "PositionActivity.position":
		if e.complexity.PositionActivity.Position == nil {
			break
		}

		args, err := ec.field_PositionActivity_position_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.PositionActivity.Position(childComplexity, args["where"].(*model.PositionWhereInput), args["orderBy"].(*model.PositionOrderBy), args["first"].(*int32), args["skip"].(*int32)), true

	case "PositionActivity.transaction":
		if e.complexity.PositionActivity.Transaction == nil {
			break
		}

		return e.complexity.PositionActivity.Transaction(childComplexity), true

	case "ProtocolStat.id":
		if e.complexity.ProtocolStat.ID == nil {
			break
		}

		return e.complexity.ProtocolStat.ID(childComplexity), true

	case "ProtocolStat.pools":
		if e.complexity.ProtocolStat.Pools == nil {
			break
		}

		return e.complexity.ProtocolStat.Pools(childComplexity), true

	case "ProtocolStat.totalSupply":
		if e.complexity.ProtocolStat.TotalSupply == nil {
			break
		}

		return e.complexity.ProtocolStat.TotalSupply(childComplexity), true

	case "ProtocolStat.tvl":
		if e.complexity.ProtocolStat.Tvl == nil {
			break
		}

		return e.complexity.ProtocolStat.Tvl(childComplexity), true

	case "Query._meta":
		if e.complexity.Query.Meta == nil {
			break
		}

		return e.complexity.Query.Meta(childComplexity), true

	case "Query.pool":
		if e.complexity.Query.Pool == nil {
			break
		}

		args, err := ec.field_Query_pool_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.Pool(childComplexity, args["id"].(*string)), true

	case "Query.pools":
		if e.complexity.Query.Pools == nil {
			break
		}

		args, err := ec.field_Query_pools_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.Pools(childComplexity, args["where"].(*model.PoolWhereInput), args["orderBy"].(*model.PoolOrderBy), args["first"].(*int32), args["skip"].(*int32)), true

	case "Query.position":
		if e.complexity.Query.Position == nil {
			break
		}

		args, err := ec.field_Query_position_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.Position(childComplexity, args["id"].(*string)), true

	case "Query.positionActivities":
		if e.complexity.Query.PositionActivities == nil {
			break
		}

		args, err := ec.field_Query_positionActivities_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.PositionActivities(childComplexity, args["where"].(*model.PositionActivityWhereInput), args["orderBy"].(*model.PositionActivityOrderBy), args["first"].(*int32), args["skip"].(*int32)), true

	case "Query.positionActivity":
		if e.complexity.Query.PositionActivity == nil {
			break
		}

		args, err := ec.field_Query_positionActivity_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.PositionActivity(childComplexity, args["id"].(*string)), true

	case "Query.positions":
		if e.complexity.Query.Positions == nil {
			break
		}

		args, err := ec.field_Query_positions_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.Positions(childComplexity, args["where"].(*model.PositionWhereInput), args["orderBy"].(*model.PositionOrderBy), args["first"].(*int32), args["skip"].(*int32)), true

	case "Query.protocolStat":
		if e.complexity.Query.ProtocolStat == nil {
			break
		}

		args, err := ec.field_Query_protocolStat_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.ProtocolStat(childComplexity, args["id"].(*string)), true

	case "Query.protocolStats":
		if e.complexity.Query.ProtocolStats == nil {
			break
		}

		args, err := ec.field_Query_protocolStats_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.ProtocolStats(childComplexity, args["where"].(*model.ProtocolStatWhereInput), args["orderBy"].(*model.ProtocolStatOrderBy), args["first"].(*int32), args["skip"].(*int32)), true

	case "Query.stableSwapStat":
		if e.complexity.Query.StableSwapStat == nil {
			break
		}

		args, err := ec.field_Query_stableSwapStat_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.StableSwapStat(childComplexity, args["id"].(*string)), true

	case "Query.stableSwapStats":
		if e.complexity.Query.StableSwapStats == nil {
			break
		}

		args, err := ec.field_Query_stableSwapStats_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.StableSwapStats(childComplexity, args["where"].(*model.StableSwapStatWhereInput), args["orderBy"].(*model.StableSwapStatOrderBy), args["first"].(*int32), args["skip"].(*int32)), true

	case "Query.swapEvent":
		if e.complexity.Query.SwapEvent == nil {
			break
		}

		args, err := ec.field_Query_swapEvent_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.SwapEvent(childComplexity, args["id"].(*string)), true

	case "Query.swapEvents":
		if e.complexity.Query.SwapEvents == nil {
			break
		}

		args, err := ec.field_Query_swapEvents_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.SwapEvents(childComplexity, args["where"].(*model.SwapEventWhereInput), args["orderBy"].(*model.SwapEventOrderBy), args["first"].(*int32), args["skip"].(*int32)), true

	case "Query.user":
		if e.complexity.Query.User == nil {
			break
		}

		args, err := ec.field_Query_user_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.User(childComplexity, args["id"].(*string)), true

	case "Query.users":
		if e.complexity.Query.Users == nil {
			break
		}

		args, err := ec.field_Query_users_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.Users(childComplexity, args["where"].(*model.UserWhereInput), args["orderBy"].(*model.UserOrderBy), args["first"].(*int32), args["skip"].(*int32)), true

	case "StableSwapStat.id":
		if e.complexity.StableSwapStat.ID == nil {
			break
		}

		return e.complexity.StableSwapStat.ID(childComplexity), true

	case "StableSwapStat.remainingDailySwapAmount":
		if e.complexity.StableSwapStat.RemainingDailySwapAmount == nil {
			break
		}

		return e.complexity.StableSwapStat.RemainingDailySwapAmount(childComplexity), true

	case "StableSwapStat.stablecoinToTokenTotalSwapValue":
		if e.complexity.StableSwapStat.StablecoinToTokenTotalSwapValue == nil {
			break
		}

		return e.complexity.StableSwapStat.StablecoinToTokenTotalSwapValue(childComplexity), true

	case "StableSwapStat.tokenToStablecoinTotalSwapValue":
		if e.complexity.StableSwapStat.TokenToStablecoinTotalSwapValue == nil {
			break
		}

		return e.complexity.StableSwapStat.TokenToStablecoinTotalSwapValue(childComplexity), true

	case "StableSwapStat.totalStablecoinToTokenSwapEvents":
		if e.complexity.StableSwapStat.TotalStablecoinToTokenSwapEvents == nil {
			break
		}

		return e.complexity.StableSwapStat.TotalStablecoinToTokenSwapEvents(childComplexity), true

	case "StableSwapStat.totalTokenToStablecoinSwapEvents":
		if e.complexity.StableSwapStat.TotalTokenToStablecoinSwapEvents == nil {
			break
		}

		return e.complexity.StableSwapStat.TotalTokenToStablecoinSwapEvents(childComplexity), true

	case "SwapEvent.blockNumber":
		if e.complexity.SwapEvent.BlockNumber == nil {
			break
		}

		return e.complexity.SwapEvent.BlockNumber(childComplexity), true

	case "SwapEvent.blockTimestamp":
		if e.complexity.SwapEvent.BlockTimestamp == nil {
			break
		}

		return e.complexity.SwapEvent.BlockTimestamp(childComplexity), true

	case "SwapEvent.fee":
		if e.complexity.SwapEvent.Fee == nil {
			break
		}

		return e.complexity.SwapEvent.Fee(childComplexity), true

	case "SwapEvent.id":
		if e.complexity.SwapEvent.ID == nil {
			break
		}

		return e.complexity.SwapEvent.ID(childComplexity), true

	case "SwapEvent.isStablecoinToTokenSwap":
		if e.complexity.SwapEvent.IsStablecoinToTokenSwap == nil {
			break
		}

		return e.complexity.SwapEvent.IsStablecoinToTokenSwap(childComplexity), true

	case "SwapEvent.isTokenToStablecoinSwap":
		if e.complexity.SwapEvent.IsTokenToStablecoinSwap == nil {
			break
		}

		return e.complexity.SwapEvent.IsTokenToStablecoinSwap(childComplexity), true

	case "SwapEvent.owner":
		if e.complexity.SwapEvent.Owner == nil {
			break
		}

		return e.complexity.SwapEvent.Owner(childComplexity), true

	case "SwapEvent.transaction":
		if e.complexity.SwapEvent.Transaction == nil {
			break
		}

		return e.complexity.SwapEvent.Transaction(childComplexity), true

	case "SwapEvent.value":
		if e.complexity.SwapEvent.Value == nil {
			break
		}

		return e.complexity.SwapEvent.Value(childComplexity), true

	case "User.activePositionsCount":
		if e.complexity.User.ActivePositionsCount == nil {
			break
		}

		return e.complexity.User.ActivePositionsCount(childComplexity), true

	case "User.address":
		if e.complexity.User.Address == nil {
			break
		}

		return e.complexity.User.Address(childComplexity), true

	case "User.id":
		if e.complexity.User.ID == nil {
			break
		}

		return e.complexity.User.ID(childComplexity), true

	}
	return 0, false
}

func (e *executableSchema) Exec(ctx context.Context) graphql.ResponseHandler {
	opCtx := graphql.GetOperationContext(ctx)
	ec := executionContext{opCtx, e, 0, 0, make(chan graphql.DeferredResult)}
	inputUnmarshalMap := graphql.BuildUnmarshalerMap(
		ec.unmarshalInputPoolOrderBy,
		ec.unmarshalInputPoolWhereInput,
		ec.unmarshalInputPositionActivityOrderBy,
		ec.unmarshalInputPositionActivityWhereInput,
		ec.unmarshalInputPositionOrderBy,
		ec.unmarshalInputPositionWhereInput,
		ec.unmarshalInputProtocolStatOrderBy,
		ec.unmarshalInputProtocolStatWhereInput,
		ec.unmarshalInputStableSwapStatOrderBy,
		ec.unmarshalInputStableSwapStatWhereInput,
		ec.unmarshalInputSwapEventOrderBy,
		ec.unmarshalInputSwapEventWhereInput,
		ec.unmarshalInputUserOrderBy,
		ec.unmarshalInputUserWhereInput,
	)
	first := true

	switch opCtx.Operation.Operation {
	case ast.Query:
		return func(ctx context.Context) *graphql.Response {
			var response graphql.Response
			var data graphql.Marshaler
			if first {
				first = false
				ctx = graphql.WithUnmarshalerMap(ctx, inputUnmarshalMap)
				data = ec._Query(ctx, opCtx.Operation.SelectionSet)
			} else {
				if atomic.LoadInt32(&ec.pendingDeferred) > 0 {
					result := <-ec.deferredResults
					atomic.AddInt32(&ec.pendingDeferred, -1)
					data = result.Result
					response.Path = result.Path
					response.Label = result.Label
					response.Errors = result.Errors
				} else {
					return nil
				}
			}
			var buf bytes.Buffer
			data.MarshalGQL(&buf)
			response.Data = buf.Bytes()
			if atomic.LoadInt32(&ec.deferred) > 0 {
				hasNext := atomic.LoadInt32(&ec.pendingDeferred) > 0
				response.HasNext = &hasNext
			}

			return &response
		}

	default:
		return graphql.OneShot(graphql.ErrorResponse(ctx, "unsupported GraphQL operation"))
	}
}

type executionContext struct {
	*graphql.OperationContext
	*executableSchema
	deferred        int32
	pendingDeferred int32
	deferredResults chan graphql.DeferredResult
}

func (ec *executionContext) processDeferredGroup(dg graphql.DeferredGroup) {
	atomic.AddInt32(&ec.pendingDeferred, 1)
	go func() {
		ctx := graphql.WithFreshResponseContext(dg.Context)
		dg.FieldSet.Dispatch(ctx)
		ds := graphql.DeferredResult{
			Path:   dg.Path,
			Label:  dg.Label,
			Result: dg.FieldSet,
			Errors: graphql.GetErrors(ctx),
		}
		// null fields should bubble up
		if dg.FieldSet.Invalids > 0 {
			ds.Result = graphql.Null
		}
		ec.deferredResults <- ds
	}()
}

func (ec *executionContext) introspectSchema() (*introspection.Schema, error) {
	if ec.DisableIntrospection {
		return nil, errors.New("introspection disabled")
	}
	return introspection.WrapSchema(ec.Schema()), nil
}

func (ec *executionContext) introspectType(name string) (*introspection.Type, error) {
	if ec.DisableIntrospection {
		return nil, errors.New("introspection disabled")
	}
	return introspection.WrapTypeFromDef(ec.Schema(), ec.Schema().Types[name]), nil
}

//go:embed "schema.graphqls" "filters/pool.graphqls" "filters/position.graphqls" "filters/positionactivity.graphqls" "filters/protocolstat.graphqls" "filters/query.graphqls" "filters/stableswapstat.graphqls" "filters/swapevent.graphqls" "filters/user.graphqls"
var sourcesFS embed.FS

func sourceData(filename string) string {
	data, err := sourcesFS.ReadFile(filename)
	if err != nil {
		panic(fmt.Sprintf("codegen problem: %s not available", filename))
	}
	return string(data)
}

var sources = []*ast.Source{
	{Name: "schema.graphqls", Input: sourceData("schema.graphqls"), BuiltIn: false},
	{Name: "filters/pool.graphqls", Input: sourceData("filters/pool.graphqls"), BuiltIn: false},
	{Name: "filters/position.graphqls", Input: sourceData("filters/position.graphqls"), BuiltIn: false},
	{Name: "filters/positionactivity.graphqls", Input: sourceData("filters/positionactivity.graphqls"), BuiltIn: false},
	{Name: "filters/protocolstat.graphqls", Input: sourceData("filters/protocolstat.graphqls"), BuiltIn: false},
	{Name: "filters/query.graphqls", Input: sourceData("filters/query.graphqls"), BuiltIn: false},
	{Name: "filters/stableswapstat.graphqls", Input: sourceData("filters/stableswapstat.graphqls"), BuiltIn: false},
	{Name: "filters/swapevent.graphqls", Input: sourceData("filters/swapevent.graphqls"), BuiltIn: false},
	{Name: "filters/user.graphqls", Input: sourceData("filters/user.graphqls"), BuiltIn: false},
}
var parsedSchema = gqlparser.MustLoadSchema(sources...)

// endregion ************************** generated!.gotpl **************************

// region    ***************************** args.gotpl *****************************

func (ec *executionContext) field_Pool_positions_args(ctx context.Context, rawArgs map[string]any) (map[string]any, error) {
	var err error
	args := map[string]any{}
	arg0, err := ec.field_Pool_positions_argsWhere(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["where"] = arg0
	arg1, err := ec.field_Pool_positions_argsOrderBy(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["orderBy"] = arg1
	arg2, err := ec.field_Pool_positions_argsFirst(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["first"] = arg2
	arg3, err := ec.field_Pool_positions_argsSkip(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["skip"] = arg3
	return args, nil
}
func (ec *executionContext) field_Pool_positions_argsWhere(
	ctx context.Context,
	rawArgs map[string]any,
) (*model.PositionWhereInput, error) {
	if _, ok := rawArgs["where"]; !ok {
		var zeroVal *model.PositionWhereInput
		return zeroVal, nil
	}

	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("where"))
	if tmp, ok := rawArgs["where"]; ok {
		return ec.unmarshalOPositionWhereInput2ᚖgithubᚗcomᚋtsisarᚋstarknetᚑindexerᚋgraphqlᚋmodelᚐPositionWhereInput(ctx, tmp)
	}

	var zeroVal *model.PositionWhereInput
	return zeroVal, nil
}

func (ec *executionContext) field_Pool_positions_argsOrderBy(
	ctx context.Context,
	rawArgs map[string]any,
) (*model.PositionOrderBy, error) {
	if _, ok := rawArgs["orderBy"]; !ok {
		var zeroVal *model.PositionOrderBy
		return zeroVal, nil
	}

	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("orderBy"))
	if tmp, ok := rawArgs["orderBy"]; ok {
		return ec.unmarshalOPositionOrderBy2ᚖgithubᚗcomᚋtsisarᚋstarknetᚑindexerᚋgraphqlᚋmodelᚐPositionOrderBy(ctx, tmp)
	}

	var zeroVal *model.PositionOrderBy
	return zeroVal, nil
}

func (ec *executionContext) field_Pool_positions_argsFirst(
	ctx context.Context,
	rawArgs map[string]any,
) (*int32, error) {
	if _, ok := rawArgs["first"]; !ok {
		var zeroVal *int32
		return zeroVal, nil
	}

	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("first"))
	if tmp, ok := rawArgs["first"]; ok {
		return ec.unmarshalOInt2ᚖint32(ctx, tmp)
	}

	var zeroVal *int32
	return zeroVal, nil
}

func (ec *executionContext) field_Pool_positions_argsSkip(
	ctx context.Context,
	rawArgs map[string]any,
) (*int32, error) {
	if _, ok := rawArgs["skip"]; !ok {
		var zeroVal *int32
		return zeroVal, nil
	}

	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("skip"))
	if tmp, ok := rawArgs["skip"]; ok {
		return ec.unmarshalOInt2ᚖint32(ctx, tmp)
	}

	var zeroVal *int32
	return zeroVal, nil
}

func (ec *executionContext) field_PositionActivity_position_args(ctx context.Context, rawArgs map[string]any) (map[string]any, error) {
	var err error
	args := map[string]any{}
	arg0, err := ec.field_PositionActivity_position_argsWhere(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["where"] = arg0
	arg1, err := ec.field_PositionActivity_position_argsOrderBy(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["orderBy"] = arg1
	arg2, err := ec.field_PositionActivity_position_argsFirst(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["first"] = arg2
	arg3, err := ec.field_PositionActivity_position_argsSkip(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["skip"] = arg3
	return args, nil
}
func (ec *executionContext) field_PositionActivity_position_argsWhere(
	ctx context.Context,
	rawArgs map[string]any,
) (*model.PositionWhereInput, error) {
	if _, ok := rawArgs["where"]; !ok {
		var zeroVal *model.PositionWhereInput
		return zeroVal, nil
	}

	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("where"))
	if tmp, ok := rawArgs["where"]; ok {
		return ec.unmarshalOPositionWhereInput2ᚖgithubᚗcomᚋtsisarᚋstarknetᚑindexerᚋgraphqlᚋmodelᚐPositionWhereInput(ctx, tmp)
	}

	var zeroVal *model.PositionWhereInput
	return zeroVal, nil
}

func (ec *executionContext) field_PositionActivity_position_argsOrderBy(
	ctx context.Context,
	rawArgs map[string]any,
) (*model.PositionOrderBy, error) {
	if _, ok := rawArgs["orderBy"]; !ok {
		var zeroVal *model.PositionOrderBy
		return zeroVal, nil
	}

	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("orderBy"))
	if tmp, ok := rawArgs["orderBy"]; ok {
		return ec.unmarshalOPositionOrderBy2ᚖgithubᚗcomᚋtsisarᚋstarknetᚑindexerᚋgraphqlᚋmodelᚐPositionOrderBy(ctx, tmp)
	}

	var zeroVal *model.PositionOrderBy
	return zeroVal, nil
}

func (ec *executionContext) field_PositionActivity_position_argsFirst(
	ctx context.Context,
	rawArgs map[string]any,
) (*int32, error) {
	if _, ok := rawArgs["first"]; !ok {
		var zeroVal *int32
		return zeroVal, nil
	}

	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("first"))
	if tmp, ok := rawArgs["first"]; ok {
		return ec.unmarshalOInt2ᚖint32(ctx, tmp)
	}

	var zeroVal *int32
	return zeroVal, nil
}

func (ec *executionContext) field_PositionActivity_position_argsSkip(
	ctx context.Context,
	rawArgs map[string]any,
) (*int32, error) {
	if _, ok := rawArgs["skip"]; !ok {
		var zeroVal *int32
		return zeroVal, nil
	}

	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("skip"))
	if tmp, ok := rawArgs["skip"]; ok {
		return ec.unmarshalOInt2ᚖint32(ctx, tmp)
	}

	var zeroVal *int32
	return zeroVal, nil
}

func (ec *executionContext) field_Position_activities_args(ctx context.Context, rawArgs map[string]any) (map[string]any, error) {
	var err error
	args := map[string]any{}
	arg0, err := ec.field_Position_activities_argsWhere(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["where"] = arg0
	arg1, err := ec.field_Position_activities_argsOrderBy(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["orderBy"] = arg1
	arg2, err := ec.field_Position_activities_argsFirst(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["first"] = arg2
	arg3, err := ec.field_Position_activities_argsSkip(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["skip"] = arg3
	return args, nil
}
func (ec *executionContext) field_Position_activities_argsWhere(
	ctx context.Context,
	rawArgs map[string]any,
) (*model.PositionActivityWhereInput, error) {
	if _, ok := rawArgs["where"]; !ok {
		var zeroVal *model.PositionActivityWhereInput
		return zeroVal, nil
	}

	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("where"))
	if tmp, ok := rawArgs["where"]; ok {
		return ec.unmarshalOPositionActivityWhereInput2ᚖgithubᚗcomᚋtsisarᚋstarknetᚑindexerᚋgraphqlᚋmodelᚐPositionActivityWhereInput(ctx, tmp)
	}

	var zeroVal *model.PositionActivityWhereInput
	return zeroVal, nil
}

func (ec *executionContext) field_Position_activities_argsOrderBy(
	ctx context.Context,
	rawArgs map[string]any,
) (*model.PositionActivityOrderBy, error) {
	if _, ok := rawArgs["orderBy"]; !ok {
		var zeroVal *model.PositionActivityOrderBy
		return zeroVal, nil
	}

	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("orderBy"))
	if tmp, ok := rawArgs["orderBy"]; ok {
		return ec.unmarshalOPositionActivityOrderBy2ᚖgithubᚗcomᚋtsisarᚋstarknetᚑindexerᚋgraphqlᚋmodelᚐPositionActivityOrderBy(ctx, tmp)
	}

	var zeroVal *model.PositionActivityOrderBy
	return zeroVal, nil
}

func (ec *executionContext) field_Position_activities_argsFirst(
	ctx context.Context,
	rawArgs map[string]any,
) (*int32, error) {
	if _, ok := rawArgs["first"]; !ok {
		var zeroVal *int32
		return zeroVal, nil
	}

	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("first"))
	if tmp, ok := rawArgs["first"]; ok {
		return ec.unmarshalOInt2ᚖint32(ctx, tmp)
	}

	var zeroVal *int32
	return zeroVal, nil
}

func (ec *executionContext) field_Position_activities_argsSkip(
	ctx context.Context,
	rawArgs map[string]any,
) (*int32, error) {
	if _, ok := rawArgs["skip"]; !ok {
		var zeroVal *int32
		return zeroVal, nil
	}

	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("skip"))
	if tmp, ok := rawArgs["skip"]; ok {
		return ec.unmarshalOInt2ᚖint32(ctx, tmp)
	}

	var zeroVal *int32
	return zeroVal, nil
}

func (ec *executionContext) field_Position_pools_args(ctx context.Context, rawArgs map[string]any) (map[string]any, error) {
	var err error
	args := map[string]any{}
	arg0, err := ec.field_Position_pools_argsWhere(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["where"] = arg0
	arg1, err := ec.field_Position_pools_argsOrderBy(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["orderBy"] = arg1
	arg2, err := ec.field_Position_pools_argsFirst(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["first"] = arg2
	arg3, err := ec.field_Position_pools_argsSkip(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["skip"] = arg3
	return args, nil
}
func (ec *executionContext) field_Position_pools_argsWhere(
	ctx context.Context,
	rawArgs map[string]any,
) (*model.PoolWhereInput, error) {
	if _, ok := rawArgs["where"]; !ok {
		var zeroVal *model.PoolWhereInput
		return zeroVal, nil
	}

	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("where"))
	if tmp, ok := rawArgs["where"]; ok {
		return ec.unmarshalOPoolWhereInput2ᚖgithubᚗcomᚋtsisarᚋstarknetᚑindexerᚋgraphqlᚋmodelᚐPoolWhereInput(ctx, tmp)
	}

	var zeroVal *model.PoolWhereInput
	return zeroVal, nil
}

func (ec *executionContext) field_Position_pools_argsOrderBy(
	ctx context.Context,
	rawArgs map[string]any,
) (*model.PoolOrderBy, error) {
	if _, ok := rawArgs["orderBy"]; !ok {
		var zeroVal *model.PoolOrderBy
		return zeroVal, nil
	}

	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("orderBy"))
	if tmp, ok := rawArgs["orderBy"]; ok {
		return ec.unmarshalOPoolOrderBy2ᚖgithubᚗcomᚋtsisarᚋstarknetᚑindexerᚋgraphqlᚋmodelᚐPoolOrderBy(ctx, tmp)
	}

	var zeroVal *model.PoolOrderBy
	return zeroVal, nil
}

func (ec *executionContext) field_Position_pools_argsFirst(
	ctx context.Context,
	rawArgs map[string]any,
) (*int32, error) {
	if _, ok := rawArgs["first"]; !ok {
		var zeroVal *int32
		return zeroVal, nil
	}

	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("first"))
	if tmp, ok := rawArgs["first"]; ok {
		return ec.unmarshalOInt2ᚖint32(ctx, tmp)
	}

	var zeroVal *int32
	return zeroVal, nil
}

func (ec *executionContext) field_Position_pools_argsSkip(
	ctx context.Context,
	rawArgs map[string]any,
) (*int32, error) {
	if _, ok := rawArgs["skip"]; !ok {
		var zeroVal *int32
		return zeroVal, nil
	}

	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("skip"))
	if tmp, ok := rawArgs["skip"]; ok {
		return ec.unmarshalOInt2ᚖint32(ctx, tmp)
	}

	var zeroVal *int32
	return zeroVal, nil
}

func (ec *executionContext) field_Query___type_args(ctx context.Context, rawArgs map[string]any) (map[string]any, error) {
	var err error
	args := map[string]any{}
	arg0, err := ec.field_Query___type_argsName(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["name"] = arg0
	return args, nil
}
func (ec *executionContext) field_Query___type_argsName(
	ctx context.Context,
	rawArgs map[string]any,
) (string, error) {
	if _, ok := rawArgs["name"]; !ok {
		var zeroVal string
		return zeroVal, nil
	}

	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("name"))
	if tmp, ok := rawArgs["name"]; ok {
		return ec.unmarshalNString2string(ctx, tmp)
	}

	var zeroVal string
	return zeroVal, nil
}

func (ec *executionContext) field_Query_pool_args(ctx context.Context, rawArgs map[string]any) (map[string]any, error) {
	var err error
	args := map[string]any{}
	arg0, err := ec.field_Query_pool_argsID(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["id"] = arg0
	return args, nil
}
func (ec *executionContext) field_Query_pool_argsID(
	ctx context.Context,
	rawArgs map[string]any,
) (*string, error) {
	if _, ok := rawArgs["id"]; !ok {
		var zeroVal *string
		return zeroVal, nil
	}

	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
	if tmp, ok := rawArgs["id"]; ok {
		return ec.unmarshalOID2ᚖstring(ctx, tmp)
	}

	var zeroVal *string
	return zeroVal, nil
}

func (ec *executionContext) field_Query_pools_args(ctx context.Context, rawArgs map[string]any) (map[string]any, error) {
	var err error
	args := map[string]any{}
	arg0, err := ec.field_Query_pools_argsWhere(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["where"] = arg0
	arg1, err := ec.field_Query_pools_argsOrderBy(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["orderBy"] = arg1
	arg2, err := ec.field_Query_pools_argsFirst(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["first"] = arg2
	arg3, err := ec.field_Query_pools_argsSkip(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["skip"] = arg3
	return args, nil
}
func (ec *executionContext) field_Query_pools_argsWhere(
	ctx context.Context,
	rawArgs map[string]any,
) (*model.PoolWhereInput, error) {
	if _, ok := rawArgs["where"]; !ok {
		var zeroVal *model.PoolWhereInput
		return zeroVal, nil
	}

	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("where"))
	if tmp, ok := rawArgs["where"]; ok {
		return ec.unmarshalOPoolWhereInput2ᚖgithubᚗcomᚋtsisarᚋstarknetᚑindexerᚋgraphqlᚋmodelᚐPoolWhereInput(ctx, tmp)
	}

	var zeroVal *model.PoolWhereInput
	return zeroVal, nil
}

func (ec *executionContext) field_Query_pools_argsOrderBy(
	ctx context.Context,
	rawArgs map[string]any,
) (*model.PoolOrderBy, error) {
	if _, ok := rawArgs["orderBy"]; !ok {
		var zeroVal *model.PoolOrderBy
		return zeroVal, nil
	}

	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("orderBy"))
	if tmp, ok := rawArgs["orderBy"]; ok {
		return ec.unmarshalOPoolOrderBy2ᚖgithubᚗcomᚋtsisarᚋstarknetᚑindexerᚋgraphqlᚋmodelᚐPoolOrderBy(ctx, tmp)
	}

	var zeroVal *model.PoolOrderBy
	return zeroVal, nil
}

func (ec *executionContext) field_Query_pools_argsFirst(
	ctx context.Context,
	rawArgs map[string]any,
) (*int32, error) {
	if _, ok := rawArgs["first"]; !ok {
		var zeroVal *int32
		return zeroVal, nil
	}

	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("first"))
	if tmp, ok := rawArgs["first"]; ok {
		return ec.unmarshalOInt2ᚖint32(ctx, tmp)
	}

	var zeroVal *int32
	return zeroVal, nil
}

func (ec *executionContext) field_Query_pools_argsSkip(
	ctx context.Context,
	rawArgs map[string]any,
) (*int32, error) {
	if _, ok := rawArgs["skip"]; !ok {
		var zeroVal *int32
		return zeroVal, nil
	}

	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("skip"))
	if tmp, ok := rawArgs["skip"]; ok {
		return ec.unmarshalOInt2ᚖint32(ctx, tmp)
	}

	var zeroVal *int32
	return zeroVal, nil
}

func (ec *executionContext) field_Query_positionActivities_args(ctx context.Context, rawArgs map[string]any) (map[string]any, error) {
	var err error
	args := map[string]any{}
	arg0, err := ec.field_Query_positionActivities_argsWhere(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["where"] = arg0
	arg1, err := ec.field_Query_positionActivities_argsOrderBy(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["orderBy"] = arg1
	arg2, err := ec.field_Query_positionActivities_argsFirst(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["first"] = arg2
	arg3, err := ec.field_Query_positionActivities_argsSkip(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["skip"] = arg3
	return args, nil
}
func (ec *executionContext) field_Query_positionActivities_argsWhere(
	ctx context.Context,
	rawArgs map[string]any,
) (*model.PositionActivityWhereInput, error) {
	if _, ok := rawArgs["where"]; !ok {
		var zeroVal *model.PositionActivityWhereInput
		return zeroVal, nil
	}

	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("where"))
	if tmp, ok := rawArgs["where"]; ok {
		return ec.unmarshalOPositionActivityWhereInput2ᚖgithubᚗcomᚋtsisarᚋstarknetᚑindexerᚋgraphqlᚋmodelᚐPositionActivityWhereInput(ctx, tmp)
	}

	var zeroVal *model.PositionActivityWhereInput
	return zeroVal, nil
}

func (ec *executionContext) field_Query_positionActivities_argsOrderBy(
	ctx context.Context,
	rawArgs map[string]any,
) (*model.PositionActivityOrderBy, error) {
	if _, ok := rawArgs["orderBy"]; !ok {
		var zeroVal *model.PositionActivityOrderBy
		return zeroVal, nil
	}

	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("orderBy"))
	if tmp, ok := rawArgs["orderBy"]; ok {
		return ec.unmarshalOPositionActivityOrderBy2ᚖgithubᚗcomᚋtsisarᚋstarknetᚑindexerᚋgraphqlᚋmodelᚐPositionActivityOrderBy(ctx, tmp)
	}

	var zeroVal *model.PositionActivityOrderBy
	return zeroVal, nil
}

func (ec *executionContext) field_Query_positionActivities_argsFirst(
	ctx context.Context,
	rawArgs map[string]any,
) (*int32, error) {
	if _, ok := rawArgs["first"]; !ok {
		var zeroVal *int32
		return zeroVal, nil
	}

	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("first"))
	if tmp, ok := rawArgs["first"]; ok {
		return ec.unmarshalOInt2ᚖint32(ctx, tmp)
	}

	var zeroVal *int32
	return zeroVal, nil
}

func (ec *executionContext) field_Query_positionActivities_argsSkip(
	ctx context.Context,
	rawArgs map[string]any,
) (*int32, error) {
	if _, ok := rawArgs["skip"]; !ok {
		var zeroVal *int32
		return zeroVal, nil
	}

	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("skip"))
	if tmp, ok := rawArgs["skip"]; ok {
		return ec.unmarshalOInt2ᚖint32(ctx, tmp)
	}

	var zeroVal *int32
	return zeroVal, nil
}

func (ec *executionContext) field_Query_positionActivity_args(ctx context.Context, rawArgs map[string]any) (map[string]any, error) {
	var err error
	args := map[string]any{}
	arg0, err := ec.field_Query_positionActivity_argsID(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["id"] = arg0
	return args, nil
}
func (ec *executionContext) field_Query_positionActivity_argsID(
	ctx context.Context,
	rawArgs map[string]any,
) (*string, error) {
	if _, ok := rawArgs["id"]; !ok {
		var zeroVal *string
		return zeroVal, nil
	}

	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
	if tmp, ok := rawArgs["id"]; ok {
		return ec.unmarshalOID2ᚖstring(ctx, tmp)
	}

	var zeroVal *string
	return zeroVal, nil
}

func (ec *executionContext) field_Query_position_args(ctx context.Context, rawArgs map[string]any) (map[string]any, error) {
	var err error
	args := map[string]any{}
	arg0, err := ec.field_Query_position_argsID(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["id"] = arg0
	return args, nil
}
func (ec *executionContext) field_Query_position_argsID(
	ctx context.Context,
	rawArgs map[string]any,
) (*string, error) {
	if _, ok := rawArgs["id"]; !ok {
		var zeroVal *string
		return zeroVal, nil
	}

	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
	if tmp, ok := rawArgs["id"]; ok {
		return ec.unmarshalOID2ᚖstring(ctx, tmp)
	}

	var zeroVal *string
	return zeroVal, nil
}

func (ec *executionContext) field_Query_positions_args(ctx context.Context, rawArgs map[string]any) (map[string]any, error) {
	var err error
	args := map[string]any{}
	arg0, err := ec.field_Query_positions_argsWhere(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["where"] = arg0
	arg1, err := ec.field_Query_positions_argsOrderBy(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["orderBy"] = arg1
	arg2, err := ec.field_Query_positions_argsFirst(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["first"] = arg2
	arg3, err := ec.field_Query_positions_argsSkip(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["skip"] = arg3
	return args, nil
}
func (ec *executionContext) field_Query_positions_argsWhere(
	ctx context.Context,
	rawArgs map[string]any,
) (*model.PositionWhereInput, error) {
	if _, ok := rawArgs["where"]; !ok {
		var zeroVal *model.PositionWhereInput
		return zeroVal, nil
	}

	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("where"))
	if tmp, ok := rawArgs["where"]; ok {
		return ec.unmarshalOPositionWhereInput2ᚖgithubᚗcomᚋtsisarᚋstarknetᚑindexerᚋgraphqlᚋmodelᚐPositionWhereInput(ctx, tmp)
	}

	var zeroVal *model.PositionWhereInput
	return zeroVal, nil
}

func (ec *executionContext) field_Query_positions_argsOrderBy(
	ctx context.Context,
	rawArgs map[string]any,
) (*model.PositionOrderBy, error) {
	if _, ok := rawArgs["orderBy"]; !ok {
		var zeroVal *model.PositionOrderBy
		return zeroVal, nil
	}

	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("orderBy"))
	if tmp, ok := rawArgs["orderBy"]; ok {
		return ec.unmarshalOPositionOrderBy2ᚖgithubᚗcomᚋtsisarᚋstarknetᚑindexerᚋgraphqlᚋmodelᚐPositionOrderBy(ctx, tmp)
	}

	var zeroVal *model.PositionOrderBy
	return zeroVal, nil
}

func (ec *executionContext) field_Query_positions_argsFirst(
	ctx context.Context,
	rawArgs map[string]any,
) (*int32, error) {
	if _, ok := rawArgs["first"]; !ok {
		var zeroVal *int32
		return zeroVal, nil
	}

	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("first"))
	if tmp, ok := rawArgs["first"]; ok {
		return ec.unmarshalOInt2ᚖint32(ctx, tmp)
	}

	var zeroVal *int32
	return zeroVal, nil
}

func (ec *executionContext) field_Query_positions_argsSkip(
	ctx context.Context,
	rawArgs map[string]any,
) (*int32, error) {
	if _, ok := rawArgs["skip"]; !ok {
		var zeroVal *int32
		return zeroVal, nil
	}

	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("skip"))
	if tmp, ok := rawArgs["skip"]; ok {
		return ec.unmarshalOInt2ᚖint32(ctx, tmp)
	}

	var zeroVal *int32
	return zeroVal, nil
}

func (ec *executionContext) field_Query_protocolStat_args(ctx context.Context, rawArgs map[string]any) (map[string]any, error) {
	var err error
	args := map[string]any{}
	arg0, err := ec.field_Query_protocolStat_argsID(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["id"] = arg0
	return args, nil
}
func (ec *executionContext) field_Query_protocolStat_argsID(
	ctx context.Context,
	rawArgs map[string]any,
) (*string, error) {
	if _, ok := rawArgs["id"]; !ok {
		var zeroVal *string
		return zeroVal, nil
	}

	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
	if tmp, ok := rawArgs["id"]; ok {
		return ec.unmarshalOID2ᚖstring(ctx, tmp)
	}

	var zeroVal *string
	return zeroVal, nil
}

func (ec *executionContext) field_Query_protocolStats_args(ctx context.Context, rawArgs map[string]any) (map[string]any, error) {
	var err error
	args := map[string]any{}
	arg0, err := ec.field_Query_protocolStats_argsWhere(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["where"] = arg0
	arg1, err := ec.field_Query_protocolStats_argsOrderBy(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["orderBy"] = arg1
	arg2, err := ec.field_Query_protocolStats_argsFirst(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["first"] = arg2
	arg3, err := ec.field_Query_protocolStats_argsSkip(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["skip"] = arg3
	return args, nil
}
func (ec *executionContext) field_Query_protocolStats_argsWhere(
	ctx context.Context,
	rawArgs map[string]any,
) (*model.ProtocolStatWhereInput, error) {
	if _, ok := rawArgs["where"]; !ok {
		var zeroVal *model.ProtocolStatWhereInput
		return zeroVal, nil
	}

	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("where"))
	if tmp, ok := rawArgs["where"]; ok {
		return ec.unmarshalOProtocolStatWhereInput2ᚖgithubᚗcomᚋtsisarᚋstarknetᚑindexerᚋgraphqlᚋmodelᚐProtocolStatWhereInput(ctx, tmp)
	}

	var zeroVal *model.ProtocolStatWhereInput
	return zeroVal, nil
}

func (ec *executionContext) field_Query_protocolStats_argsOrderBy(
	ctx context.Context,
	rawArgs map[string]any,
) (*model.ProtocolStatOrderBy, error) {
	if _, ok := rawArgs["orderBy"]; !ok {
		var zeroVal *model.ProtocolStatOrderBy
		return zeroVal, nil
	}

	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("orderBy"))
	if tmp, ok := rawArgs["orderBy"]; ok {
		return ec.unmarshalOProtocolStatOrderBy2ᚖgithubᚗcomᚋtsisarᚋstarknetᚑindexerᚋgraphqlᚋmodelᚐProtocolStatOrderBy(ctx, tmp)
	}

	var zeroVal *model.ProtocolStatOrderBy
	return zeroVal, nil
}

func (ec *executionContext) field_Query_protocolStats_argsFirst(
	ctx context.Context,
	rawArgs map[string]any,
) (*int32, error) {
	if _, ok := rawArgs["first"]; !ok {
		var zeroVal *int32
		return zeroVal, nil
	}

	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("first"))
	if tmp, ok := rawArgs["first"]; ok {
		return ec.unmarshalOInt2ᚖint32(ctx, tmp)
	}

	var zeroVal *int32
	return zeroVal, nil
}

func (ec *executionContext) field_Query_protocolStats_argsSkip(
	ctx context.Context,
	rawArgs map[string]any,
) (*int32, error) {
	if _, ok := rawArgs["skip"]; !ok {
		var zeroVal *int32
		return zeroVal, nil
	}

	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("skip"))
	if tmp, ok := rawArgs["skip"]; ok {
		return ec.unmarshalOInt2ᚖint32(ctx, tmp)
	}

	var zeroVal *int32
	return zeroVal, nil
}

func (ec *executionContext) field_Query_stableSwapStat_args(ctx context.Context, rawArgs map[string]any) (map[string]any, error) {
	var err error
	args := map[string]any{}
	arg0, err := ec.field_Query_stableSwapStat_argsID(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["id"] = arg0
	return args, nil
}
func (ec *executionContext) field_Query_stableSwapStat_argsID(
	ctx context.Context,
	rawArgs map[string]any,
) (*string, error) {
	if _, ok := rawArgs["id"]; !ok {
		var zeroVal *string
		return zeroVal, nil
	}

	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
	if tmp, ok := rawArgs["id"]; ok {
		return ec.unmarshalOID2ᚖstring(ctx, tmp)
	}

	var zeroVal *string
	return zeroVal, nil
}

func (ec *executionContext) field_Query_stableSwapStats_args(ctx context.Context, rawArgs map[string]any) (map[string]any, error) {
	var err error
	args := map[string]any{}
	arg0, err := ec.field_Query_stableSwapStats_argsWhere(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["where"] = arg0
	arg1, err := ec.field_Query_stableSwapStats_argsOrderBy(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["orderBy"] = arg1
	arg2, err := ec.field_Query_stableSwapStats_argsFirst(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["first"] = arg2
	arg3, err := ec.field_Query_stableSwapStats_argsSkip(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["skip"] = arg3
	return args, nil
}
func (ec *executionContext) field_Query_stableSwapStats_argsWhere(
	ctx context.Context,
	rawArgs map[string]any,
) (*model.StableSwapStatWhereInput, error) {
	if _, ok := rawArgs["where"]; !ok {
		var zeroVal *model.StableSwapStatWhereInput
		return zeroVal, nil
	}

	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("where"))
	if tmp, ok := rawArgs["where"]; ok {
		return ec.unmarshalOStableSwapStatWhereInput2ᚖgithubᚗcomᚋtsisarᚋstarknetᚑindexerᚋgraphqlᚋmodelᚐStableSwapStatWhereInput(ctx, tmp)
	}

	var zeroVal *model.StableSwapStatWhereInput
	return zeroVal, nil
}

func (ec *executionContext) field_Query_stableSwapStats_argsOrderBy(
	ctx context.Context,
	rawArgs map[string]any,
) (*model.StableSwapStatOrderBy, error) {
	if _, ok := rawArgs["orderBy"]; !ok {
		var zeroVal *model.StableSwapStatOrderBy
		return zeroVal, nil
	}

	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("orderBy"))
	if tmp, ok := rawArgs["orderBy"]; ok {
		return ec.unmarshalOStableSwapStatOrderBy2ᚖgithubᚗcomᚋtsisarᚋstarknetᚑindexerᚋgraphqlᚋmodelᚐStableSwapStatOrderBy(ctx, tmp)
	}

	var zeroVal *model.StableSwapStatOrderBy
	return zeroVal, nil
}

func (ec *executionContext) field_Query_stableSwapStats_argsFirst(
	ctx context.Context,
	rawArgs map[string]any,
) (*int32, error) {
	if _, ok := rawArgs["first"]; !ok {
		var zeroVal *int32
		return zeroVal, nil
	}

	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("first"))
	if tmp, ok := rawArgs["first"]; ok {
		return ec.unmarshalOInt2ᚖint32(ctx, tmp)
	}

	var zeroVal *int32
	return zeroVal, nil
}

func (ec *executionContext) field_Query_stableSwapStats_argsSkip(
	ctx context.Context,
	rawArgs map[string]any,
) (*int32, error) {
	if _, ok := rawArgs["skip"]; !ok {
		var zeroVal *int32
		return zeroVal, nil
	}

	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("skip"))
	if tmp, ok := rawArgs["skip"]; ok {
		return ec.unmarshalOInt2ᚖint32(ctx, tmp)
	}

	var zeroVal *int32
	return zeroVal, nil
}

func (ec *executionContext) field_Query_swapEvent_args(ctx context.Context, rawArgs map[string]any) (map[string]any, error) {
	var err error
	args := map[string]any{}
	arg0, err := ec.field_Query_swapEvent_argsID(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["id"] = arg0
	return args, nil
}
func (ec *executionContext) field_Query_swapEvent_argsID(
	ctx context.Context,
	rawArgs map[string]any,
) (*string, error) {
	if _, ok := rawArgs["id"]; !ok {
		var zeroVal *string
		return zeroVal, nil
	}

	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
	if tmp, ok := rawArgs["id"]; ok {
		return ec.unmarshalOID2ᚖstring(ctx, tmp)
	}

	var zeroVal *string
	return zeroVal, nil
}

func (ec *executionContext) field_Query_swapEvents_args(ctx context.Context, rawArgs map[string]any) (map[string]any, error) {
	var err error
	args := map[string]any{}
	arg0, err := ec.field_Query_swapEvents_argsWhere(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["where"] = arg0
	arg1, err := ec.field_Query_swapEvents_argsOrderBy(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["orderBy"] = arg1
	arg2, err := ec.field_Query_swapEvents_argsFirst(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["first"] = arg2
	arg3, err := ec.field_Query_swapEvents_argsSkip(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["skip"] = arg3
	return args, nil
}
func (ec *executionContext) field_Query_swapEvents_argsWhere(
	ctx context.Context,
	rawArgs map[string]any,
) (*model.SwapEventWhereInput, error) {
	if _, ok := rawArgs["where"]; !ok {
		var zeroVal *model.SwapEventWhereInput
		return zeroVal, nil
	}

	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("where"))
	if tmp, ok := rawArgs["where"]; ok {
		return ec.unmarshalOSwapEventWhereInput2ᚖgithubᚗcomᚋtsisarᚋstarknetᚑindexerᚋgraphqlᚋmodelᚐSwapEventWhereInput(ctx, tmp)
	}

	var zeroVal *model.SwapEventWhereInput
	return zeroVal, nil
}

func (ec *executionContext) field_Query_swapEvents_argsOrderBy(
	ctx context.Context,
	rawArgs map[string]any,
) (*model.SwapEventOrderBy, error) {
	if _, ok := rawArgs["orderBy"]; !ok {
		var zeroVal *model.SwapEventOrderBy
		return zeroVal, nil
	}

	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("orderBy"))
	if tmp, ok := rawArgs["orderBy"]; ok {
		return ec.unmarshalOSwapEventOrderBy2ᚖgithubᚗcomᚋtsisarᚋstarknetᚑindexerᚋgraphqlᚋmodelᚐSwapEventOrderBy(ctx, tmp)
	}

	var zeroVal *model.SwapEventOrderBy
	return zeroVal, nil
}

func (ec *executionContext) field_Query_swapEvents_argsFirst(
	ctx context.Context,
	rawArgs map[string]any,
) (*int32, error) {
	if _, ok := rawArgs["first"]; !ok {
		var zeroVal *int32
		return zeroVal, nil
	}

	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("first"))
	if tmp, ok := rawArgs["first"]; ok {
		return ec.unmarshalOInt2ᚖint32(ctx, tmp)
	}

	var zeroVal *int32
	return zeroVal, nil
}

func (ec *executionContext) field_Query_swapEvents_argsSkip(
	ctx context.Context,
	rawArgs map[string]any,
) (*int32, error) {
	if _, ok := rawArgs["skip"]; !ok {
		var zeroVal *int32
		return zeroVal, nil
	}

	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("skip"))
	if tmp, ok := rawArgs["skip"]; ok {
		return ec.unmarshalOInt2ᚖint32(ctx, tmp)
	}

	var zeroVal *int32
	return zeroVal, nil
}

func (ec *executionContext) field_Query_user_args(ctx context.Context, rawArgs map[string]any) (map[string]any, error) {
	var err error
	args := map[string]any{}
	arg0, err := ec.field_Query_user_argsID(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["id"] = arg0
	return args, nil
}
func (ec *executionContext) field_Query_user_argsID(
	ctx context.Context,
	rawArgs map[string]any,
) (*string, error) {
	if _, ok := rawArgs["id"]; !ok {
		var zeroVal *string
		return zeroVal, nil
	}

	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
	if tmp, ok := rawArgs["id"]; ok {
		return ec.unmarshalOID2ᚖstring(ctx, tmp)
	}

	var zeroVal *string
	return zeroVal, nil
}

func (ec *executionContext) field_Query_users_args(ctx context.Context, rawArgs map[string]any) (map[string]any, error) {
	var err error
	args := map[string]any{}
	arg0, err := ec.field_Query_users_argsWhere(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["where"] = arg0
	arg1, err := ec.field_Query_users_argsOrderBy(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["orderBy"] = arg1
	arg2, err := ec.field_Query_users_argsFirst(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["first"] = arg2
	arg3, err := ec.field_Query_users_argsSkip(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["skip"] = arg3
	return args, nil
}
func (ec *executionContext) field_Query_users_argsWhere(
	ctx context.Context,
	rawArgs map[string]any,
) (*model.UserWhereInput, error) {
	if _, ok := rawArgs["where"]; !ok {
		var zeroVal *model.UserWhereInput
		return zeroVal, nil
	}

	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("where"))
	if tmp, ok := rawArgs["where"]; ok {
		return ec.unmarshalOUserWhereInput2ᚖgithubᚗcomᚋtsisarᚋstarknetᚑindexerᚋgraphqlᚋmodelᚐUserWhereInput(ctx, tmp)
	}

	var zeroVal *model.UserWhereInput
	return zeroVal, nil
}

func (ec *executionContext) field_Query_users_argsOrderBy(
	ctx context.Context,
	rawArgs map[string]any,
) (*model.UserOrderBy, error) {
	if _, ok := rawArgs["orderBy"]; !ok {
		var zeroVal *model.UserOrderBy
		return zeroVal, nil
	}

	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("orderBy"))
	if tmp, ok := rawArgs["orderBy"]; ok {
		return ec.unmarshalOUserOrderBy2ᚖgithubᚗcomᚋtsisarᚋstarknetᚑindexerᚋgraphqlᚋmodelᚐUserOrderBy(ctx, tmp)
	}

	var zeroVal *model.UserOrderBy
	return zeroVal, nil
}

func (ec *executionContext) field_Query_users_argsFirst(
	ctx context.Context,
	rawArgs map[string]any,
) (*int32, error) {
	if _, ok := rawArgs["first"]; !ok {
		var zeroVal *int32
		return zeroVal, nil
	}

	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("first"))
	if tmp, ok := rawArgs["first"]; ok {
		return ec.unmarshalOInt2ᚖint32(ctx, tmp)
	}

	var zeroVal *int32
	return zeroVal, nil
}

func (ec *executionContext) field_Query_users_argsSkip(
	ctx context.Context,
	rawArgs map[string]any,
) (*int32, error) {
	if _, ok := rawArgs["skip"]; !ok {
		var zeroVal *int32
		return zeroVal, nil
	}

	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("skip"))
	if tmp, ok := rawArgs["skip"]; ok {
		return ec.unmarshalOInt2ᚖint32(ctx, tmp)
	}

	var zeroVal *int32
	return zeroVal, nil
}

func (ec *executionContext) field___Directive_args_args(ctx context.Context, rawArgs map[string]any) (map[string]any, error) {
	var err error
	args := map[string]any{}
	arg0, err := ec.field___Directive_args_argsIncludeDeprecated(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["includeDeprecated"] = arg0
	return args, nil
}
func (ec *executionContext) field___Directive_args_argsIncludeDeprecated(
	ctx context.Context,
	rawArgs map[string]any,
) (*bool, error) {
	if _, ok := rawArgs["includeDeprecated"]; !ok {
		var zeroVal *bool
		return zeroVal, nil
	}

	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("includeDeprecated"))
	if tmp, ok := rawArgs["includeDeprecated"]; ok {
		return ec.unmarshalOBoolean2ᚖbool(ctx, tmp)
	}

	var zeroVal *bool
	return zeroVal, nil
}

func (ec *executionContext) field___Field_args_args(ctx context.Context, rawArgs map[string]any) (map[string]any, error) {
	var err error
	args := map[string]any{}
	arg0, err := ec.field___Field_args_argsIncludeDeprecated(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["includeDeprecated"] = arg0
	return args, nil
}
func (ec *executionContext) field___Field_args_argsIncludeDeprecated(
	ctx context.Context,
	rawArgs map[string]any,
) (*bool, error) {
	if _, ok := rawArgs["includeDeprecated"]; !ok {
		var zeroVal *bool
		return zeroVal, nil
	}

	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("includeDeprecated"))
	if tmp, ok := rawArgs["includeDeprecated"]; ok {
		return ec.unmarshalOBoolean2ᚖbool(ctx, tmp)
	}

	var zeroVal *bool
	return zeroVal, nil
}

func (ec *executionContext) field___Type_enumValues_args(ctx context.Context, rawArgs map[string]any) (map[string]any, error) {
	var err error
	args := map[string]any{}
	arg0, err := ec.field___Type_enumValues_argsIncludeDeprecated(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["includeDeprecated"] = arg0
	return args, nil
}
func (ec *executionContext) field___Type_enumValues_argsIncludeDeprecated(
	ctx context.Context,
	rawArgs map[string]any,
) (bool, error) {
	if _, ok := rawArgs["includeDeprecated"]; !ok {
		var zeroVal bool
		return zeroVal, nil
	}

	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("includeDeprecated"))
	if tmp, ok := rawArgs["includeDeprecated"]; ok {
		return ec.unmarshalOBoolean2bool(ctx, tmp)
	}

	var zeroVal bool
	return zeroVal, nil
}

func (ec *executionContext) field___Type_fields_args(ctx context.Context, rawArgs map[string]any) (map[string]any, error) {
	var err error
	args := map[string]any{}
	arg0, err := ec.field___Type_fields_argsIncludeDeprecated(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["includeDeprecated"] = arg0
	return args, nil
}
func (ec *executionContext) field___Type_fields_argsIncludeDeprecated(
	ctx context.Context,
	rawArgs map[string]any,
) (bool, error) {
	if _, ok := rawArgs["includeDeprecated"]; !ok {
		var zeroVal bool
		return zeroVal, nil
	}

	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("includeDeprecated"))
	if tmp, ok := rawArgs["includeDeprecated"]; ok {
		return ec.unmarshalOBoolean2bool(ctx, tmp)
	}

	var zeroVal bool
	return zeroVal, nil
}

// endregion ***************************** args.gotpl *****************************

// region    ************************** directives.gotpl **************************

// endregion ************************** directives.gotpl **************************

// region    **************************** field.gotpl *****************************

func (ec *executionContext) _Block_hash(ctx context.Context, field graphql.CollectedField, obj *model.Block) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Block_hash(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Hash, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Block_hash(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Block",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Block_number(ctx context.Context, field graphql.CollectedField, obj *model.Block) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Block_number(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Number, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Block_number(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Block",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Block_parentHash(ctx context.Context, field graphql.CollectedField, obj *model.Block) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Block_parentHash(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ParentHash, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Block_parentHash(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Block",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Block_timestamp(ctx context.Context, field graphql.CollectedField, obj *model.Block) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Block_timestamp(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Timestamp, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Block_timestamp(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Block",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Meta_block(ctx context.Context, field graphql.CollectedField, obj *model.Meta) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Meta_block(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Block, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.Block)
	fc.Result = res
	return ec.marshalNBlock2ᚖgithubᚗcomᚋtsisarᚋstarknetᚑindexerᚋgraphqlᚋmodelᚐBlock(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Meta_block(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Meta",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "hash":
				return ec.fieldContext_Block_hash(ctx, field)
			case "number":
				return ec.fieldContext_Block_number(ctx, field)
			case "parentHash":
				return ec.fieldContext_Block_parentHash(ctx, field)
			case "timestamp":
				return ec.fieldContext_Block_timestamp(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Block", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _Meta_deployment(ctx context.Context, field graphql.CollectedField, obj *model.Meta) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Meta_deployment(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Deployment, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Meta_deployment(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Meta",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Meta_hasIndexingErrors(ctx context.Context, field graphql.CollectedField, obj *model.Meta) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Meta_hasIndexingErrors(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.HasIndexingErrors, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Meta_hasIndexingErrors(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Meta",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Pool_id(ctx context.Context, field graphql.CollectedField, obj *ent.Pool) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Pool_id(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Pool_id(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Pool",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Pool_poolName(ctx context.Context, field graphql.CollectedField, obj *ent.Pool) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Pool_poolName(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PoolName, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Pool_poolName(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Pool",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Pool_debtCeiling(ctx context.Context, field graphql.CollectedField, obj *ent.Pool) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Pool_debtCeiling(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DebtCeiling, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Pool_debtCeiling(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Pool",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Pool_liquidationRatio(ctx context.Context, field graphql.CollectedField, obj *ent.Pool) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Pool_liquidationRatio(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.LiquidationRatio, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Pool_liquidationRatio(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Pool",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Pool_stabilityFeeRate(ctx context.Context, field graphql.CollectedField, obj *ent.Pool) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Pool_stabilityFeeRate(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.StabilityFeeRate, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Pool_stabilityFeeRate(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Pool",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Pool_tokenAdapterAddress(ctx context.Context, field graphql.CollectedField, obj *ent.Pool) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Pool_tokenAdapterAddress(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TokenAdapterAddress, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Pool_tokenAdapterAddress(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Pool",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Pool_lockedCollateral(ctx context.Context, field graphql.CollectedField, obj *ent.Pool) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Pool_lockedCollateral(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.LockedCollateral, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Pool_lockedCollateral(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Pool",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Pool_collateralPrice(ctx context.Context, field graphql.CollectedField, obj *ent.Pool) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Pool_collateralPrice(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CollateralPrice, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Pool_collateralPrice(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Pool",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Pool_collateralLastPrice(ctx context.Context, field graphql.CollectedField, obj *ent.Pool) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Pool_collateralLastPrice(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CollateralLastPrice, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Pool_collateralLastPrice(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Pool",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Pool_priceWithSafetyMargin(ctx context.Context, field graphql.CollectedField, obj *ent.Pool) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Pool_priceWithSafetyMargin(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PriceWithSafetyMargin, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Pool_priceWithSafetyMargin(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Pool",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Pool_rawPrice(ctx context.Context, field graphql.CollectedField, obj *ent.Pool) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Pool_rawPrice(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.RawPrice, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Pool_rawPrice(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Pool",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Pool_debtAccumulatedRate(ctx context.Context, field graphql.CollectedField, obj *ent.Pool) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Pool_debtAccumulatedRate(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DebtAccumulatedRate, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Pool_debtAccumulatedRate(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Pool",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Pool_totalBorrowed(ctx context.Context, field graphql.CollectedField, obj *ent.Pool) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Pool_totalBorrowed(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TotalBorrowed, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Pool_totalBorrowed(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Pool",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Pool_totalAvailable(ctx context.Context, field graphql.CollectedField, obj *ent.Pool) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Pool_totalAvailable(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TotalAvailable, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Pool_totalAvailable(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Pool",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Pool_tvl(ctx context.Context, field graphql.CollectedField, obj *ent.Pool) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Pool_tvl(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Tvl, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Pool_tvl(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Pool",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Pool_positions(ctx context.Context, field graphql.CollectedField, obj *ent.Pool) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Pool_positions(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Pool().Positions(rctx, obj, fc.Args["where"].(*model.PositionWhereInput), fc.Args["orderBy"].(*model.PositionOrderBy), fc.Args["first"].(*int32), fc.Args["skip"].(*int32))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*ent.Position)
	fc.Result = res
	return ec.marshalNPosition2ᚕᚖgithubᚗcomᚋtsisarᚋstarknetᚑindexerᚋgeneratedᚋentᚐPositionᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Pool_positions(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Pool",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Position_id(ctx, field)
			case "positionAddress":
				return ec.fieldContext_Position_positionAddress(ctx, field)
			case "userAddress":
				return ec.fieldContext_Position_userAddress(ctx, field)
			case "walletAddress":
				return ec.fieldContext_Position_walletAddress(ctx, field)
			case "collateralPool":
				return ec.fieldContext_Position_collateralPool(ctx, field)
			case "collateralPoolName":
				return ec.fieldContext_Position_collateralPoolName(ctx, field)
			case "positionId":
				return ec.fieldContext_Position_positionId(ctx, field)
			case "lockedCollateral":
				return ec.fieldContext_Position_lockedCollateral(ctx, field)
			case "debtValue":
				return ec.fieldContext_Position_debtValue(ctx, field)
			case "debtShare":
				return ec.fieldContext_Position_debtShare(ctx, field)
			case "safetyBuffer":
				return ec.fieldContext_Position_safetyBuffer(ctx, field)
			case "safetyBufferInPercent":
				return ec.fieldContext_Position_safetyBufferInPercent(ctx, field)
			case "tvl":
				return ec.fieldContext_Position_tvl(ctx, field)
			case "positionStatus":
				return ec.fieldContext_Position_positionStatus(ctx, field)
			case "liquidationCount":
				return ec.fieldContext_Position_liquidationCount(ctx, field)
			case "blockNumber":
				return ec.fieldContext_Position_blockNumber(ctx, field)
			case "blockTimestamp":
				return ec.fieldContext_Position_blockTimestamp(ctx, field)
			case "transaction":
				return ec.fieldContext_Position_transaction(ctx, field)
			case "pools":
				return ec.fieldContext_Position_pools(ctx, field)
			case "activities":
				return ec.fieldContext_Position_activities(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Position", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Pool_positions_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Position_id(ctx context.Context, field graphql.CollectedField, obj *ent.Position) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Position_id(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Position_id(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Position",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Position_positionAddress(ctx context.Context, field graphql.CollectedField, obj *ent.Position) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Position_positionAddress(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PositionAddress, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Position_positionAddress(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Position",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Position_userAddress(ctx context.Context, field graphql.CollectedField, obj *ent.Position) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Position_userAddress(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UserAddress, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Position_userAddress(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Position",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Position_walletAddress(ctx context.Context, field graphql.CollectedField, obj *ent.Position) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Position_walletAddress(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.WalletAddress, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Position_walletAddress(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Position",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Position_collateralPool(ctx context.Context, field graphql.CollectedField, obj *ent.Position) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Position_collateralPool(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CollateralPool, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Position_collateralPool(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Position",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Position_collateralPoolName(ctx context.Context, field graphql.CollectedField, obj *ent.Position) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Position_collateralPoolName(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CollateralPoolName, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Position_collateralPoolName(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Position",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Position_positionId(ctx context.Context, field graphql.CollectedField, obj *ent.Position) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Position_positionId(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PositionId, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Position_positionId(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Position",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Position_lockedCollateral(ctx context.Context, field graphql.CollectedField, obj *ent.Position) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Position_lockedCollateral(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.LockedCollateral, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Position_lockedCollateral(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Position",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Position_debtValue(ctx context.Context, field graphql.CollectedField, obj *ent.Position) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Position_debtValue(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DebtValue, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Position_debtValue(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Position",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Position_debtShare(ctx context.Context, field graphql.CollectedField, obj *ent.Position) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Position_debtShare(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DebtShare, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Position_debtShare(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Position",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Position_safetyBuffer(ctx context.Context, field graphql.CollectedField, obj *ent.Position) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Position_safetyBuffer(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SafetyBuffer, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Position_safetyBuffer(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Position",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Position_safetyBufferInPercent(ctx context.Context, field graphql.CollectedField, obj *ent.Position) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Position_safetyBufferInPercent(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SafetyBufferInPercent, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Position_safetyBufferInPercent(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Position",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Position_tvl(ctx context.Context, field graphql.CollectedField, obj *ent.Position) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Position_tvl(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Tvl, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Position_tvl(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Position",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Position_positionStatus(ctx context.Context, field graphql.CollectedField, obj *ent.Position) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Position_positionStatus(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Position().PositionStatus(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(model.PositionStatus)
	fc.Result = res
	return ec.marshalNPositionStatus2githubᚗcomᚋtsisarᚋstarknetᚑindexerᚋgraphqlᚋmodelᚐPositionStatus(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Position_positionStatus(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Position",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type PositionStatus does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Position_liquidationCount(ctx context.Context, field graphql.CollectedField, obj *ent.Position) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Position_liquidationCount(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.LiquidationCount, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Position_liquidationCount(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Position",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Position_blockNumber(ctx context.Context, field graphql.CollectedField, obj *ent.Position) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Position_blockNumber(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.BlockNumber, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Position_blockNumber(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Position",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Position_blockTimestamp(ctx context.Context, field graphql.CollectedField, obj *ent.Position) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Position_blockTimestamp(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.BlockTimestamp, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Position_blockTimestamp(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Position",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Position_transaction(ctx context.Context, field graphql.CollectedField, obj *ent.Position) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Position_transaction(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Transaction, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Position_transaction(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Position",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Position_pools(ctx context.Context, field graphql.CollectedField, obj *ent.Position) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Position_pools(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Position().Pools(rctx, obj, fc.Args["where"].(*model.PoolWhereInput), fc.Args["orderBy"].(*model.PoolOrderBy), fc.Args["first"].(*int32), fc.Args["skip"].(*int32))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*ent.Pool)
	fc.Result = res
	return ec.marshalNPool2ᚕᚖgithubᚗcomᚋtsisarᚋstarknetᚑindexerᚋgeneratedᚋentᚐPoolᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Position_pools(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Position",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Pool_id(ctx, field)
			case "poolName":
				return ec.fieldContext_Pool_poolName(ctx, field)
			case "debtCeiling":
				return ec.fieldContext_Pool_debtCeiling(ctx, field)
			case "liquidationRatio":
				return ec.fieldContext_Pool_liquidationRatio(ctx, field)
			case "stabilityFeeRate":
				return ec.fieldContext_Pool_stabilityFeeRate(ctx, field)
			case "tokenAdapterAddress":
				return ec.fieldContext_Pool_tokenAdapterAddress(ctx, field)
			case "lockedCollateral":
				return ec.fieldContext_Pool_lockedCollateral(ctx, field)
			case "collateralPrice":
				return ec.fieldContext_Pool_collateralPrice(ctx, field)
			case "collateralLastPrice":
				return ec.fieldContext_Pool_collateralLastPrice(ctx, field)
			case "priceWithSafetyMargin":
				return ec.fieldContext_Pool_priceWithSafetyMargin(ctx, field)
			case "rawPrice":
				return ec.fieldContext_Pool_rawPrice(ctx, field)
			case "debtAccumulatedRate":
				return ec.fieldContext_Pool_debtAccumulatedRate(ctx, field)
			case "totalBorrowed":
				return ec.fieldContext_Pool_totalBorrowed(ctx, field)
			case "totalAvailable":
				return ec.fieldContext_Pool_totalAvailable(ctx, field)
			case "tvl":
				return ec.fieldContext_Pool_tvl(ctx, field)
			case "positions":
				return ec.fieldContext_Pool_positions(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Pool", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Position_pools_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Position_activities(ctx context.Context, field graphql.CollectedField, obj *ent.Position) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Position_activities(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Position().Activities(rctx, obj, fc.Args["where"].(*model.PositionActivityWhereInput), fc.Args["orderBy"].(*model.PositionActivityOrderBy), fc.Args["first"].(*int32), fc.Args["skip"].(*int32))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*ent.PositionActivity)
	fc.Result = res
	return ec.marshalNPositionActivity2ᚕᚖgithubᚗcomᚋtsisarᚋstarknetᚑindexerᚋgeneratedᚋentᚐPositionActivityᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Position_activities(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Position",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_PositionActivity_id(ctx, field)
			case "position":
				return ec.fieldContext_PositionActivity_position(ctx, field)
			case "activityState":
				return ec.fieldContext_PositionActivity_activityState(ctx, field)
			case "collateralAmount":
				return ec.fieldContext_PositionActivity_collateralAmount(ctx, field)
			case "debtAmount":
				return ec.fieldContext_PositionActivity_debtAmount(ctx, field)
			case "blockNumber":
				return ec.fieldContext_PositionActivity_blockNumber(ctx, field)
			case "blockTimestamp":
				return ec.fieldContext_PositionActivity_blockTimestamp(ctx, field)
			case "transaction":
				return ec.fieldContext_PositionActivity_transaction(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type PositionActivity", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Position_activities_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _PositionActivity_id(ctx context.Context, field graphql.CollectedField, obj *ent.PositionActivity) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PositionActivity_id(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PositionActivity_id(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PositionActivity",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _PositionActivity_position(ctx context.Context, field graphql.CollectedField, obj *ent.PositionActivity) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PositionActivity_position(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.PositionActivity().Position(rctx, obj, fc.Args["where"].(*model.PositionWhereInput), fc.Args["orderBy"].(*model.PositionOrderBy), fc.Args["first"].(*int32), fc.Args["skip"].(*int32))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*ent.Position)
	fc.Result = res
	return ec.marshalNPosition2ᚖgithubᚗcomᚋtsisarᚋstarknetᚑindexerᚋgeneratedᚋentᚐPosition(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PositionActivity_position(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PositionActivity",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Position_id(ctx, field)
			case "positionAddress":
				return ec.fieldContext_Position_positionAddress(ctx, field)
			case "userAddress":
				return ec.fieldContext_Position_userAddress(ctx, field)
			case "walletAddress":
				return ec.fieldContext_Position_walletAddress(ctx, field)
			case "collateralPool":
				return ec.fieldContext_Position_collateralPool(ctx, field)
			case "collateralPoolName":
				return ec.fieldContext_Position_collateralPoolName(ctx, field)
			case "positionId":
				return ec.fieldContext_Position_positionId(ctx, field)
			case "lockedCollateral":
				return ec.fieldContext_Position_lockedCollateral(ctx, field)
			case "debtValue":
				return ec.fieldContext_Position_debtValue(ctx, field)
			case "debtShare":
				return ec.fieldContext_Position_debtShare(ctx, field)
			case "safetyBuffer":
				return ec.fieldContext_Position_safetyBuffer(ctx, field)
			case "safetyBufferInPercent":
				return ec.fieldContext_Position_safetyBufferInPercent(ctx, field)
			case "tvl":
				return ec.fieldContext_Position_tvl(ctx, field)
			case "positionStatus":
				return ec.fieldContext_Position_positionStatus(ctx, field)
			case "liquidationCount":
				return ec.fieldContext_Position_liquidationCount(ctx, field)
			case "blockNumber":
				return ec.fieldContext_Position_blockNumber(ctx, field)
			case "blockTimestamp":
				return ec.fieldContext_Position_blockTimestamp(ctx, field)
			case "transaction":
				return ec.fieldContext_Position_transaction(ctx, field)
			case "pools":
				return ec.fieldContext_Position_pools(ctx, field)
			case "activities":
				return ec.fieldContext_Position_activities(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Position", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_PositionActivity_position_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _PositionActivity_activityState(ctx context.Context, field graphql.CollectedField, obj *ent.PositionActivity) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PositionActivity_activityState(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.PositionActivity().ActivityState(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(model.PositionActivityState)
	fc.Result = res
	return ec.marshalNPositionActivityState2githubᚗcomᚋtsisarᚋstarknetᚑindexerᚋgraphqlᚋmodelᚐPositionActivityState(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PositionActivity_activityState(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PositionActivity",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type PositionActivityState does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _PositionActivity_collateralAmount(ctx context.Context, field graphql.CollectedField, obj *ent.PositionActivity) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PositionActivity_collateralAmount(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CollateralAmount, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PositionActivity_collateralAmount(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PositionActivity",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _PositionActivity_debtAmount(ctx context.Context, field graphql.CollectedField, obj *ent.PositionActivity) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PositionActivity_debtAmount(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DebtAmount, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PositionActivity_debtAmount(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PositionActivity",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _PositionActivity_blockNumber(ctx context.Context, field graphql.CollectedField, obj *ent.PositionActivity) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PositionActivity_blockNumber(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.BlockNumber, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PositionActivity_blockNumber(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PositionActivity",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _PositionActivity_blockTimestamp(ctx context.Context, field graphql.CollectedField, obj *ent.PositionActivity) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PositionActivity_blockTimestamp(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.BlockTimestamp, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PositionActivity_blockTimestamp(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PositionActivity",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _PositionActivity_transaction(ctx context.Context, field graphql.CollectedField, obj *ent.PositionActivity) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PositionActivity_transaction(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Transaction, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PositionActivity_transaction(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PositionActivity",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ProtocolStat_id(ctx context.Context, field graphql.CollectedField, obj *ent.ProtocolStat) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ProtocolStat_id(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ProtocolStat_id(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ProtocolStat",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ProtocolStat_totalSupply(ctx context.Context, field graphql.CollectedField, obj *ent.ProtocolStat) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ProtocolStat_totalSupply(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TotalSupply, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ProtocolStat_totalSupply(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ProtocolStat",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ProtocolStat_tvl(ctx context.Context, field graphql.CollectedField, obj *ent.ProtocolStat) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ProtocolStat_tvl(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Tvl, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ProtocolStat_tvl(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ProtocolStat",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ProtocolStat_pools(ctx context.Context, field graphql.CollectedField, obj *ent.ProtocolStat) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ProtocolStat_pools(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.ProtocolStat().Pools(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]string)
	fc.Result = res
	return ec.marshalNString2ᚕstringᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ProtocolStat_pools(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ProtocolStat",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Query__meta(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query__meta(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().Meta(rctx)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.Meta)
	fc.Result = res
	return ec.marshalNMeta2ᚖgithubᚗcomᚋtsisarᚋstarknetᚑindexerᚋgraphqlᚋmodelᚐMeta(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query__meta(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "block":
				return ec.fieldContext_Meta_block(ctx, field)
			case "deployment":
				return ec.fieldContext_Meta_deployment(ctx, field)
			case "hasIndexingErrors":
				return ec.fieldContext_Meta_hasIndexingErrors(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Meta", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _Query_user(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_user(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().User(rctx, fc.Args["id"].(*string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*ent.User)
	fc.Result = res
	return ec.marshalNUser2ᚖgithubᚗcomᚋtsisarᚋstarknetᚑindexerᚋgeneratedᚋentᚐUser(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_user(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_User_id(ctx, field)
			case "address":
				return ec.fieldContext_User_address(ctx, field)
			case "activePositionsCount":
				return ec.fieldContext_User_activePositionsCount(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type User", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query_user_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Query_users(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_users(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().Users(rctx, fc.Args["where"].(*model.UserWhereInput), fc.Args["orderBy"].(*model.UserOrderBy), fc.Args["first"].(*int32), fc.Args["skip"].(*int32))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*ent.User)
	fc.Result = res
	return ec.marshalNUser2ᚕᚖgithubᚗcomᚋtsisarᚋstarknetᚑindexerᚋgeneratedᚋentᚐUserᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_users(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_User_id(ctx, field)
			case "address":
				return ec.fieldContext_User_address(ctx, field)
			case "activePositionsCount":
				return ec.fieldContext_User_activePositionsCount(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type User", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query_users_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Query_pool(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_pool(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().Pool(rctx, fc.Args["id"].(*string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*ent.Pool)
	fc.Result = res
	return ec.marshalNPool2ᚖgithubᚗcomᚋtsisarᚋstarknetᚑindexerᚋgeneratedᚋentᚐPool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_pool(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Pool_id(ctx, field)
			case "poolName":
				return ec.fieldContext_Pool_poolName(ctx, field)
			case "debtCeiling":
				return ec.fieldContext_Pool_debtCeiling(ctx, field)
			case "liquidationRatio":
				return ec.fieldContext_Pool_liquidationRatio(ctx, field)
			case "stabilityFeeRate":
				return ec.fieldContext_Pool_stabilityFeeRate(ctx, field)
			case "tokenAdapterAddress":
				return ec.fieldContext_Pool_tokenAdapterAddress(ctx, field)
			case "lockedCollateral":
				return ec.fieldContext_Pool_lockedCollateral(ctx, field)
			case "collateralPrice":
				return ec.fieldContext_Pool_collateralPrice(ctx, field)
			case "collateralLastPrice":
				return ec.fieldContext_Pool_collateralLastPrice(ctx, field)
			case "priceWithSafetyMargin":
				return ec.fieldContext_Pool_priceWithSafetyMargin(ctx, field)
			case "rawPrice":
				return ec.fieldContext_Pool_rawPrice(ctx, field)
			case "debtAccumulatedRate":
				return ec.fieldContext_Pool_debtAccumulatedRate(ctx, field)
			case "totalBorrowed":
				return ec.fieldContext_Pool_totalBorrowed(ctx, field)
			case "totalAvailable":
				return ec.fieldContext_Pool_totalAvailable(ctx, field)
			case "tvl":
				return ec.fieldContext_Pool_tvl(ctx, field)
			case "positions":
				return ec.fieldContext_Pool_positions(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Pool", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query_pool_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Query_pools(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_pools(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().Pools(rctx, fc.Args["where"].(*model.PoolWhereInput), fc.Args["orderBy"].(*model.PoolOrderBy), fc.Args["first"].(*int32), fc.Args["skip"].(*int32))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*ent.Pool)
	fc.Result = res
	return ec.marshalNPool2ᚕᚖgithubᚗcomᚋtsisarᚋstarknetᚑindexerᚋgeneratedᚋentᚐPoolᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_pools(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Pool_id(ctx, field)
			case "poolName":
				return ec.fieldContext_Pool_poolName(ctx, field)
			case "debtCeiling":
				return ec.fieldContext_Pool_debtCeiling(ctx, field)
			case "liquidationRatio":
				return ec.fieldContext_Pool_liquidationRatio(ctx, field)
			case "stabilityFeeRate":
				return ec.fieldContext_Pool_stabilityFeeRate(ctx, field)
			case "tokenAdapterAddress":
				return ec.fieldContext_Pool_tokenAdapterAddress(ctx, field)
			case "lockedCollateral":
				return ec.fieldContext_Pool_lockedCollateral(ctx, field)
			case "collateralPrice":
				return ec.fieldContext_Pool_collateralPrice(ctx, field)
			case "collateralLastPrice":
				return ec.fieldContext_Pool_collateralLastPrice(ctx, field)
			case "priceWithSafetyMargin":
				return ec.fieldContext_Pool_priceWithSafetyMargin(ctx, field)
			case "rawPrice":
				return ec.fieldContext_Pool_rawPrice(ctx, field)
			case "debtAccumulatedRate":
				return ec.fieldContext_Pool_debtAccumulatedRate(ctx, field)
			case "totalBorrowed":
				return ec.fieldContext_Pool_totalBorrowed(ctx, field)
			case "totalAvailable":
				return ec.fieldContext_Pool_totalAvailable(ctx, field)
			case "tvl":
				return ec.fieldContext_Pool_tvl(ctx, field)
			case "positions":
				return ec.fieldContext_Pool_positions(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Pool", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query_pools_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Query_protocolStat(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_protocolStat(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().ProtocolStat(rctx, fc.Args["id"].(*string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*ent.ProtocolStat)
	fc.Result = res
	return ec.marshalNProtocolStat2ᚖgithubᚗcomᚋtsisarᚋstarknetᚑindexerᚋgeneratedᚋentᚐProtocolStat(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_protocolStat(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_ProtocolStat_id(ctx, field)
			case "totalSupply":
				return ec.fieldContext_ProtocolStat_totalSupply(ctx, field)
			case "tvl":
				return ec.fieldContext_ProtocolStat_tvl(ctx, field)
			case "pools":
				return ec.fieldContext_ProtocolStat_pools(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type ProtocolStat", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query_protocolStat_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Query_protocolStats(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_protocolStats(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().ProtocolStats(rctx, fc.Args["where"].(*model.ProtocolStatWhereInput), fc.Args["orderBy"].(*model.ProtocolStatOrderBy), fc.Args["first"].(*int32), fc.Args["skip"].(*int32))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*ent.ProtocolStat)
	fc.Result = res
	return ec.marshalNProtocolStat2ᚕᚖgithubᚗcomᚋtsisarᚋstarknetᚑindexerᚋgeneratedᚋentᚐProtocolStatᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_protocolStats(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_ProtocolStat_id(ctx, field)
			case "totalSupply":
				return ec.fieldContext_ProtocolStat_totalSupply(ctx, field)
			case "tvl":
				return ec.fieldContext_ProtocolStat_tvl(ctx, field)
			case "pools":
				return ec.fieldContext_ProtocolStat_pools(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type ProtocolStat", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query_protocolStats_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Query_position(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_position(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().Position(rctx, fc.Args["id"].(*string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*ent.Position)
	fc.Result = res
	return ec.marshalNPosition2ᚖgithubᚗcomᚋtsisarᚋstarknetᚑindexerᚋgeneratedᚋentᚐPosition(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_position(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Position_id(ctx, field)
			case "positionAddress":
				return ec.fieldContext_Position_positionAddress(ctx, field)
			case "userAddress":
				return ec.fieldContext_Position_userAddress(ctx, field)
			case "walletAddress":
				return ec.fieldContext_Position_walletAddress(ctx, field)
			case "collateralPool":
				return ec.fieldContext_Position_collateralPool(ctx, field)
			case "collateralPoolName":
				return ec.fieldContext_Position_collateralPoolName(ctx, field)
			case "positionId":
				return ec.fieldContext_Position_positionId(ctx, field)
			case "lockedCollateral":
				return ec.fieldContext_Position_lockedCollateral(ctx, field)
			case "debtValue":
				return ec.fieldContext_Position_debtValue(ctx, field)
			case "debtShare":
				return ec.fieldContext_Position_debtShare(ctx, field)
			case "safetyBuffer":
				return ec.fieldContext_Position_safetyBuffer(ctx, field)
			case "safetyBufferInPercent":
				return ec.fieldContext_Position_safetyBufferInPercent(ctx, field)
			case "tvl":
				return ec.fieldContext_Position_tvl(ctx, field)
			case "positionStatus":
				return ec.fieldContext_Position_positionStatus(ctx, field)
			case "liquidationCount":
				return ec.fieldContext_Position_liquidationCount(ctx, field)
			case "blockNumber":
				return ec.fieldContext_Position_blockNumber(ctx, field)
			case "blockTimestamp":
				return ec.fieldContext_Position_blockTimestamp(ctx, field)
			case "transaction":
				return ec.fieldContext_Position_transaction(ctx, field)
			case "pools":
				return ec.fieldContext_Position_pools(ctx, field)
			case "activities":
				return ec.fieldContext_Position_activities(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Position", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query_position_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Query_positions(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_positions(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().Positions(rctx, fc.Args["where"].(*model.PositionWhereInput), fc.Args["orderBy"].(*model.PositionOrderBy), fc.Args["first"].(*int32), fc.Args["skip"].(*int32))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*ent.Position)
	fc.Result = res
	return ec.marshalNPosition2ᚕᚖgithubᚗcomᚋtsisarᚋstarknetᚑindexerᚋgeneratedᚋentᚐPositionᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_positions(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Position_id(ctx, field)
			case "positionAddress":
				return ec.fieldContext_Position_positionAddress(ctx, field)
			case "userAddress":
				return ec.fieldContext_Position_userAddress(ctx, field)
			case "walletAddress":
				return ec.fieldContext_Position_walletAddress(ctx, field)
			case "collateralPool":
				return ec.fieldContext_Position_collateralPool(ctx, field)
			case "collateralPoolName":
				return ec.fieldContext_Position_collateralPoolName(ctx, field)
			case "positionId":
				return ec.fieldContext_Position_positionId(ctx, field)
			case "lockedCollateral":
				return ec.fieldContext_Position_lockedCollateral(ctx, field)
			case "debtValue":
				return ec.fieldContext_Position_debtValue(ctx, field)
			case "debtShare":
				return ec.fieldContext_Position_debtShare(ctx, field)
			case "safetyBuffer":
				return ec.fieldContext_Position_safetyBuffer(ctx, field)
			case "safetyBufferInPercent":
				return ec.fieldContext_Position_safetyBufferInPercent(ctx, field)
			case "tvl":
				return ec.fieldContext_Position_tvl(ctx, field)
			case "positionStatus":
				return ec.fieldContext_Position_positionStatus(ctx, field)
			case "liquidationCount":
				return ec.fieldContext_Position_liquidationCount(ctx, field)
			case "blockNumber":
				return ec.fieldContext_Position_blockNumber(ctx, field)
			case "blockTimestamp":
				return ec.fieldContext_Position_blockTimestamp(ctx, field)
			case "transaction":
				return ec.fieldContext_Position_transaction(ctx, field)
			case "pools":
				return ec.fieldContext_Position_pools(ctx, field)
			case "activities":
				return ec.fieldContext_Position_activities(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Position", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query_positions_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Query_positionActivity(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_positionActivity(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().PositionActivity(rctx, fc.Args["id"].(*string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*ent.PositionActivity)
	fc.Result = res
	return ec.marshalNPositionActivity2ᚖgithubᚗcomᚋtsisarᚋstarknetᚑindexerᚋgeneratedᚋentᚐPositionActivity(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_positionActivity(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_PositionActivity_id(ctx, field)
			case "position":
				return ec.fieldContext_PositionActivity_position(ctx, field)
			case "activityState":
				return ec.fieldContext_PositionActivity_activityState(ctx, field)
			case "collateralAmount":
				return ec.fieldContext_PositionActivity_collateralAmount(ctx, field)
			case "debtAmount":
				return ec.fieldContext_PositionActivity_debtAmount(ctx, field)
			case "blockNumber":
				return ec.fieldContext_PositionActivity_blockNumber(ctx, field)
			case "blockTimestamp":
				return ec.fieldContext_PositionActivity_blockTimestamp(ctx, field)
			case "transaction":
				return ec.fieldContext_PositionActivity_transaction(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type PositionActivity", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query_positionActivity_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Query_positionActivities(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_positionActivities(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().PositionActivities(rctx, fc.Args["where"].(*model.PositionActivityWhereInput), fc.Args["orderBy"].(*model.PositionActivityOrderBy), fc.Args["first"].(*int32), fc.Args["skip"].(*int32))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*ent.PositionActivity)
	fc.Result = res
	return ec.marshalNPositionActivity2ᚕᚖgithubᚗcomᚋtsisarᚋstarknetᚑindexerᚋgeneratedᚋentᚐPositionActivityᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_positionActivities(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_PositionActivity_id(ctx, field)
			case "position":
				return ec.fieldContext_PositionActivity_position(ctx, field)
			case "activityState":
				return ec.fieldContext_PositionActivity_activityState(ctx, field)
			case "collateralAmount":
				return ec.fieldContext_PositionActivity_collateralAmount(ctx, field)
			case "debtAmount":
				return ec.fieldContext_PositionActivity_debtAmount(ctx, field)
			case "blockNumber":
				return ec.fieldContext_PositionActivity_blockNumber(ctx, field)
			case "blockTimestamp":
				return ec.fieldContext_PositionActivity_blockTimestamp(ctx, field)
			case "transaction":
				return ec.fieldContext_PositionActivity_transaction(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type PositionActivity", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query_positionActivities_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Query_swapEvent(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_swapEvent(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().SwapEvent(rctx, fc.Args["id"].(*string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*ent.SwapEvent)
	fc.Result = res
	return ec.marshalNSwapEvent2ᚖgithubᚗcomᚋtsisarᚋstarknetᚑindexerᚋgeneratedᚋentᚐSwapEvent(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_swapEvent(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_SwapEvent_id(ctx, field)
			case "fee":
				return ec.fieldContext_SwapEvent_fee(ctx, field)
			case "owner":
				return ec.fieldContext_SwapEvent_owner(ctx, field)
			case "value":
				return ec.fieldContext_SwapEvent_value(ctx, field)
			case "isStablecoinToTokenSwap":
				return ec.fieldContext_SwapEvent_isStablecoinToTokenSwap(ctx, field)
			case "isTokenToStablecoinSwap":
				return ec.fieldContext_SwapEvent_isTokenToStablecoinSwap(ctx, field)
			case "blockNumber":
				return ec.fieldContext_SwapEvent_blockNumber(ctx, field)
			case "blockTimestamp":
				return ec.fieldContext_SwapEvent_blockTimestamp(ctx, field)
			case "transaction":
				return ec.fieldContext_SwapEvent_transaction(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type SwapEvent", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query_swapEvent_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Query_swapEvents(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_swapEvents(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().SwapEvents(rctx, fc.Args["where"].(*model.SwapEventWhereInput), fc.Args["orderBy"].(*model.SwapEventOrderBy), fc.Args["first"].(*int32), fc.Args["skip"].(*int32))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*ent.SwapEvent)
	fc.Result = res
	return ec.marshalNSwapEvent2ᚕᚖgithubᚗcomᚋtsisarᚋstarknetᚑindexerᚋgeneratedᚋentᚐSwapEventᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_swapEvents(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_SwapEvent_id(ctx, field)
			case "fee":
				return ec.fieldContext_SwapEvent_fee(ctx, field)
			case "owner":
				return ec.fieldContext_SwapEvent_owner(ctx, field)
			case "value":
				return ec.fieldContext_SwapEvent_value(ctx, field)
			case "isStablecoinToTokenSwap":
				return ec.fieldContext_SwapEvent_isStablecoinToTokenSwap(ctx, field)
			case "isTokenToStablecoinSwap":
				return ec.fieldContext_SwapEvent_isTokenToStablecoinSwap(ctx, field)
			case "blockNumber":
				return ec.fieldContext_SwapEvent_blockNumber(ctx, field)
			case "blockTimestamp":
				return ec.fieldContext_SwapEvent_blockTimestamp(ctx, field)
			case "transaction":
				return ec.fieldContext_SwapEvent_transaction(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type SwapEvent", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query_swapEvents_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Query_stableSwapStat(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_stableSwapStat(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().StableSwapStat(rctx, fc.Args["id"].(*string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*ent.StableSwapStat)
	fc.Result = res
	return ec.marshalNStableSwapStat2ᚖgithubᚗcomᚋtsisarᚋstarknetᚑindexerᚋgeneratedᚋentᚐStableSwapStat(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_stableSwapStat(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_StableSwapStat_id(ctx, field)
			case "totalTokenToStablecoinSwapEvents":
				return ec.fieldContext_StableSwapStat_totalTokenToStablecoinSwapEvents(ctx, field)
			case "totalStablecoinToTokenSwapEvents":
				return ec.fieldContext_StableSwapStat_totalStablecoinToTokenSwapEvents(ctx, field)
			case "remainingDailySwapAmount":
				return ec.fieldContext_StableSwapStat_remainingDailySwapAmount(ctx, field)
			case "tokenToStablecoinTotalSwapValue":
				return ec.fieldContext_StableSwapStat_tokenToStablecoinTotalSwapValue(ctx, field)
			case "stablecoinToTokenTotalSwapValue":
				return ec.fieldContext_StableSwapStat_stablecoinToTokenTotalSwapValue(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type StableSwapStat", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query_stableSwapStat_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Query_stableSwapStats(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_stableSwapStats(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().StableSwapStats(rctx, fc.Args["where"].(*model.StableSwapStatWhereInput), fc.Args["orderBy"].(*model.StableSwapStatOrderBy), fc.Args["first"].(*int32), fc.Args["skip"].(*int32))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*ent.StableSwapStat)
	fc.Result = res
	return ec.marshalNStableSwapStat2ᚕᚖgithubᚗcomᚋtsisarᚋstarknetᚑindexerᚋgeneratedᚋentᚐStableSwapStatᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_stableSwapStats(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_StableSwapStat_id(ctx, field)
			case "totalTokenToStablecoinSwapEvents":
				return ec.fieldContext_StableSwapStat_totalTokenToStablecoinSwapEvents(ctx, field)
			case "totalStablecoinToTokenSwapEvents":
				return ec.fieldContext_StableSwapStat_totalStablecoinToTokenSwapEvents(ctx, field)
			case "remainingDailySwapAmount":
				return ec.fieldContext_StableSwapStat_remainingDailySwapAmount(ctx, field)
			case "tokenToStablecoinTotalSwapValue":
				return ec.fieldContext_StableSwapStat_tokenToStablecoinTotalSwapValue(ctx, field)
			case "stablecoinToTokenTotalSwapValue":
				return ec.fieldContext_StableSwapStat_stablecoinToTokenTotalSwapValue(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type StableSwapStat", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query_stableSwapStats_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Query___type(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query___type(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.introspectType(fc.Args["name"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*introspection.Type)
	fc.Result = res
	return ec.marshalO__Type2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query___type(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "kind":
				return ec.fieldContext___Type_kind(ctx, field)
			case "name":
				return ec.fieldContext___Type_name(ctx, field)
			case "description":
				return ec.fieldContext___Type_description(ctx, field)
			case "specifiedByURL":
				return ec.fieldContext___Type_specifiedByURL(ctx, field)
			case "fields":
				return ec.fieldContext___Type_fields(ctx, field)
			case "interfaces":
				return ec.fieldContext___Type_interfaces(ctx, field)
			case "possibleTypes":
				return ec.fieldContext___Type_possibleTypes(ctx, field)
			case "enumValues":
				return ec.fieldContext___Type_enumValues(ctx, field)
			case "inputFields":
				return ec.fieldContext___Type_inputFields(ctx, field)
			case "ofType":
				return ec.fieldContext___Type_ofType(ctx, field)
			case "isOneOf":
				return ec.fieldContext___Type_isOneOf(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type __Type", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query___type_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Query___schema(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query___schema(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.introspectSchema()
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*introspection.Schema)
	fc.Result = res
	return ec.marshalO__Schema2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐSchema(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query___schema(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "description":
				return ec.fieldContext___Schema_description(ctx, field)
			case "types":
				return ec.fieldContext___Schema_types(ctx, field)
			case "queryType":
				return ec.fieldContext___Schema_queryType(ctx, field)
			case "mutationType":
				return ec.fieldContext___Schema_mutationType(ctx, field)
			case "subscriptionType":
				return ec.fieldContext___Schema_subscriptionType(ctx, field)
			case "directives":
				return ec.fieldContext___Schema_directives(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type __Schema", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _StableSwapStat_id(ctx context.Context, field graphql.CollectedField, obj *ent.StableSwapStat) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_StableSwapStat_id(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_StableSwapStat_id(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "StableSwapStat",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _StableSwapStat_totalTokenToStablecoinSwapEvents(ctx context.Context, field graphql.CollectedField, obj *ent.StableSwapStat) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_StableSwapStat_totalTokenToStablecoinSwapEvents(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TotalTokenToStablecoinSwapEvents, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_StableSwapStat_totalTokenToStablecoinSwapEvents(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "StableSwapStat",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _StableSwapStat_totalStablecoinToTokenSwapEvents(ctx context.Context, field graphql.CollectedField, obj *ent.StableSwapStat) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_StableSwapStat_totalStablecoinToTokenSwapEvents(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TotalStablecoinToTokenSwapEvents, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_StableSwapStat_totalStablecoinToTokenSwapEvents(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "StableSwapStat",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _StableSwapStat_remainingDailySwapAmount(ctx context.Context, field graphql.CollectedField, obj *ent.StableSwapStat) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_StableSwapStat_remainingDailySwapAmount(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.RemainingDailySwapAmount, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_StableSwapStat_remainingDailySwapAmount(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "StableSwapStat",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _StableSwapStat_tokenToStablecoinTotalSwapValue(ctx context.Context, field graphql.CollectedField, obj *ent.StableSwapStat) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_StableSwapStat_tokenToStablecoinTotalSwapValue(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TokenToStablecoinTotalSwapValue, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_StableSwapStat_tokenToStablecoinTotalSwapValue(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "StableSwapStat",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _StableSwapStat_stablecoinToTokenTotalSwapValue(ctx context.Context, field graphql.CollectedField, obj *ent.StableSwapStat) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_StableSwapStat_stablecoinToTokenTotalSwapValue(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.StablecoinToTokenTotalSwapValue, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_StableSwapStat_stablecoinToTokenTotalSwapValue(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "StableSwapStat",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _SwapEvent_id(ctx context.Context, field graphql.CollectedField, obj *ent.SwapEvent) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_SwapEvent_id(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_SwapEvent_id(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "SwapEvent",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _SwapEvent_fee(ctx context.Context, field graphql.CollectedField, obj *ent.SwapEvent) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_SwapEvent_fee(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Fee, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_SwapEvent_fee(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "SwapEvent",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _SwapEvent_owner(ctx context.Context, field graphql.CollectedField, obj *ent.SwapEvent) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_SwapEvent_owner(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Owner, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_SwapEvent_owner(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "SwapEvent",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _SwapEvent_value(ctx context.Context, field graphql.CollectedField, obj *ent.SwapEvent) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_SwapEvent_value(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Value, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_SwapEvent_value(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "SwapEvent",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _SwapEvent_isStablecoinToTokenSwap(ctx context.Context, field graphql.CollectedField, obj *ent.SwapEvent) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_SwapEvent_isStablecoinToTokenSwap(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsStablecoinToTokenSwap, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_SwapEvent_isStablecoinToTokenSwap(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "SwapEvent",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _SwapEvent_isTokenToStablecoinSwap(ctx context.Context, field graphql.CollectedField, obj *ent.SwapEvent) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_SwapEvent_isTokenToStablecoinSwap(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsTokenToStablecoinSwap, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_SwapEvent_isTokenToStablecoinSwap(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "SwapEvent",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _SwapEvent_blockNumber(ctx context.Context, field graphql.CollectedField, obj *ent.SwapEvent) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_SwapEvent_blockNumber(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.BlockNumber, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_SwapEvent_blockNumber(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "SwapEvent",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _SwapEvent_blockTimestamp(ctx context.Context, field graphql.CollectedField, obj *ent.SwapEvent) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_SwapEvent_blockTimestamp(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.BlockTimestamp, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_SwapEvent_blockTimestamp(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "SwapEvent",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _SwapEvent_transaction(ctx context.Context, field graphql.CollectedField, obj *ent.SwapEvent) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_SwapEvent_transaction(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Transaction, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_SwapEvent_transaction(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "SwapEvent",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _User_id(ctx context.Context, field graphql.CollectedField, obj *ent.User) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_User_id(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_User_id(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "User",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _User_address(ctx context.Context, field graphql.CollectedField, obj *ent.User) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_User_address(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Address, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_User_address(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "User",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _User_activePositionsCount(ctx context.Context, field graphql.CollectedField, obj *ent.User) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_User_activePositionsCount(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ActivePositionsCount, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_User_activePositionsCount(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "User",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Directive_name(ctx context.Context, field graphql.CollectedField, obj *introspection.Directive) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Directive_name(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Directive_name(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Directive",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Directive_description(ctx context.Context, field graphql.CollectedField, obj *introspection.Directive) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Directive_description(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Description(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Directive_description(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Directive",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Directive_isRepeatable(ctx context.Context, field graphql.CollectedField, obj *introspection.Directive) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Directive_isRepeatable(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsRepeatable, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Directive_isRepeatable(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Directive",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Directive_locations(ctx context.Context, field graphql.CollectedField, obj *introspection.Directive) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Directive_locations(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Locations, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]string)
	fc.Result = res
	return ec.marshalN__DirectiveLocation2ᚕstringᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Directive_locations(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Directive",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type __DirectiveLocation does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Directive_args(ctx context.Context, field graphql.CollectedField, obj *introspection.Directive) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Directive_args(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Args, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]introspection.InputValue)
	fc.Result = res
	return ec.marshalN__InputValue2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐInputValueᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Directive_args(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Directive",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "name":
				return ec.fieldContext___InputValue_name(ctx, field)
			case "description":
				return ec.fieldContext___InputValue_description(ctx, field)
			case "type":
				return ec.fieldContext___InputValue_type(ctx, field)
			case "defaultValue":
				return ec.fieldContext___InputValue_defaultValue(ctx, field)
			case "isDeprecated":
				return ec.fieldContext___InputValue_isDeprecated(ctx, field)
			case "deprecationReason":
				return ec.fieldContext___InputValue_deprecationReason(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type __InputValue", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field___Directive_args_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) ___EnumValue_name(ctx context.Context, field graphql.CollectedField, obj *introspection.EnumValue) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___EnumValue_name(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___EnumValue_name(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__EnumValue",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) ___EnumValue_description(ctx context.Context, field graphql.CollectedField, obj *introspection.EnumValue) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___EnumValue_description(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Description(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___EnumValue_description(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__EnumValue",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) ___EnumValue_isDeprecated(ctx context.Context, field graphql.CollectedField, obj *introspection.EnumValue) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___EnumValue_isDeprecated(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsDeprecated(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___EnumValue_isDeprecated(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__EnumValue",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) ___EnumValue_deprecationReason(ctx context.Context, field graphql.CollectedField, obj *introspection.EnumValue) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___EnumValue_deprecationReason(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DeprecationReason(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___EnumValue_deprecationReason(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__EnumValue",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Field_name(ctx context.Context, field graphql.CollectedField, obj *introspection.Field) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Field_name(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Field_name(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Field",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Field_description(ctx context.Context, field graphql.CollectedField, obj *introspection.Field) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Field_description(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Description(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Field_description(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Field",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Field_args(ctx context.Context, field graphql.CollectedField, obj *introspection.Field) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Field_args(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Args, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]introspection.InputValue)
	fc.Result = res
	return ec.marshalN__InputValue2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐInputValueᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Field_args(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Field",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "name":
				return ec.fieldContext___InputValue_name(ctx, field)
			case "description":
				return ec.fieldContext___InputValue_description(ctx, field)
			case "type":
				return ec.fieldContext___InputValue_type(ctx, field)
			case "defaultValue":
				return ec.fieldContext___InputValue_defaultValue(ctx, field)
			case "isDeprecated":
				return ec.fieldContext___InputValue_isDeprecated(ctx, field)
			case "deprecationReason":
				return ec.fieldContext___InputValue_deprecationReason(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type __InputValue", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field___Field_args_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) ___Field_type(ctx context.Context, field graphql.CollectedField, obj *introspection.Field) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Field_type(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Type, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*introspection.Type)
	fc.Result = res
	return ec.marshalN__Type2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Field_type(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Field",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "kind":
				return ec.fieldContext___Type_kind(ctx, field)
			case "name":
				return ec.fieldContext___Type_name(ctx, field)
			case "description":
				return ec.fieldContext___Type_description(ctx, field)
			case "specifiedByURL":
				return ec.fieldContext___Type_specifiedByURL(ctx, field)
			case "fields":
				return ec.fieldContext___Type_fields(ctx, field)
			case "interfaces":
				return ec.fieldContext___Type_interfaces(ctx, field)
			case "possibleTypes":
				return ec.fieldContext___Type_possibleTypes(ctx, field)
			case "enumValues":
				return ec.fieldContext___Type_enumValues(ctx, field)
			case "inputFields":
				return ec.fieldContext___Type_inputFields(ctx, field)
			case "ofType":
				return ec.fieldContext___Type_ofType(ctx, field)
			case "isOneOf":
				return ec.fieldContext___Type_isOneOf(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type __Type", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Field_isDeprecated(ctx context.Context, field graphql.CollectedField, obj *introspection.Field) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Field_isDeprecated(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsDeprecated(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Field_isDeprecated(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Field",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Field_deprecationReason(ctx context.Context, field graphql.CollectedField, obj *introspection.Field) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Field_deprecationReason(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DeprecationReason(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Field_deprecationReason(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Field",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) ___InputValue_name(ctx context.Context, field graphql.CollectedField, obj *introspection.InputValue) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___InputValue_name(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___InputValue_name(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__InputValue",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) ___InputValue_description(ctx context.Context, field graphql.CollectedField, obj *introspection.InputValue) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___InputValue_description(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Description(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___InputValue_description(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__InputValue",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) ___InputValue_type(ctx context.Context, field graphql.CollectedField, obj *introspection.InputValue) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___InputValue_type(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Type, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*introspection.Type)
	fc.Result = res
	return ec.marshalN__Type2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___InputValue_type(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__InputValue",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "kind":
				return ec.fieldContext___Type_kind(ctx, field)
			case "name":
				return ec.fieldContext___Type_name(ctx, field)
			case "description":
				return ec.fieldContext___Type_description(ctx, field)
			case "specifiedByURL":
				return ec.fieldContext___Type_specifiedByURL(ctx, field)
			case "fields":
				return ec.fieldContext___Type_fields(ctx, field)
			case "interfaces":
				return ec.fieldContext___Type_interfaces(ctx, field)
			case "possibleTypes":
				return ec.fieldContext___Type_possibleTypes(ctx, field)
			case "enumValues":
				return ec.fieldContext___Type_enumValues(ctx, field)
			case "inputFields":
				return ec.fieldContext___Type_inputFields(ctx, field)
			case "ofType":
				return ec.fieldContext___Type_ofType(ctx, field)
			case "isOneOf":
				return ec.fieldContext___Type_isOneOf(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type __Type", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) ___InputValue_defaultValue(ctx context.Context, field graphql.CollectedField, obj *introspection.InputValue) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___InputValue_defaultValue(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DefaultValue, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___InputValue_defaultValue(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__InputValue",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) ___InputValue_isDeprecated(ctx context.Context, field graphql.CollectedField, obj *introspection.InputValue) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___InputValue_isDeprecated(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsDeprecated(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___InputValue_isDeprecated(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__InputValue",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) ___InputValue_deprecationReason(ctx context.Context, field graphql.CollectedField, obj *introspection.InputValue) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___InputValue_deprecationReason(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DeprecationReason(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___InputValue_deprecationReason(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__InputValue",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Schema_description(ctx context.Context, field graphql.CollectedField, obj *introspection.Schema) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Schema_description(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Description(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Schema_description(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Schema",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Schema_types(ctx context.Context, field graphql.CollectedField, obj *introspection.Schema) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Schema_types(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Types(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]introspection.Type)
	fc.Result = res
	return ec.marshalN__Type2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐTypeᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Schema_types(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Schema",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "kind":
				return ec.fieldContext___Type_kind(ctx, field)
			case "name":
				return ec.fieldContext___Type_name(ctx, field)
			case "description":
				return ec.fieldContext___Type_description(ctx, field)
			case "specifiedByURL":
				return ec.fieldContext___Type_specifiedByURL(ctx, field)
			case "fields":
				return ec.fieldContext___Type_fields(ctx, field)
			case "interfaces":
				return ec.fieldContext___Type_interfaces(ctx, field)
			case "possibleTypes":
				return ec.fieldContext___Type_possibleTypes(ctx, field)
			case "enumValues":
				return ec.fieldContext___Type_enumValues(ctx, field)
			case "inputFields":
				return ec.fieldContext___Type_inputFields(ctx, field)
			case "ofType":
				return ec.fieldContext___Type_ofType(ctx, field)
			case "isOneOf":
				return ec.fieldContext___Type_isOneOf(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type __Type", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Schema_queryType(ctx context.Context, field graphql.CollectedField, obj *introspection.Schema) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Schema_queryType(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.QueryType(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*introspection.Type)
	fc.Result = res
	return ec.marshalN__Type2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Schema_queryType(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Schema",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "kind":
				return ec.fieldContext___Type_kind(ctx, field)
			case "name":
				return ec.fieldContext___Type_name(ctx, field)
			case "description":
				return ec.fieldContext___Type_description(ctx, field)
			case "specifiedByURL":
				return ec.fieldContext___Type_specifiedByURL(ctx, field)
			case "fields":
				return ec.fieldContext___Type_fields(ctx, field)
			case "interfaces":
				return ec.fieldContext___Type_interfaces(ctx, field)
			case "possibleTypes":
				return ec.fieldContext___Type_possibleTypes(ctx, field)
			case "enumValues":
				return ec.fieldContext___Type_enumValues(ctx, field)
			case "inputFields":
				return ec.fieldContext___Type_inputFields(ctx, field)
			case "ofType":
				return ec.fieldContext___Type_ofType(ctx, field)
			case "isOneOf":
				return ec.fieldContext___Type_isOneOf(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type __Type", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Schema_mutationType(ctx context.Context, field graphql.CollectedField, obj *introspection.Schema) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Schema_mutationType(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.MutationType(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*introspection.Type)
	fc.Result = res
	return ec.marshalO__Type2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Schema_mutationType(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Schema",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "kind":
				return ec.fieldContext___Type_kind(ctx, field)
			case "name":
				return ec.fieldContext___Type_name(ctx, field)
			case "description":
				return ec.fieldContext___Type_description(ctx, field)
			case "specifiedByURL":
				return ec.fieldContext___Type_specifiedByURL(ctx, field)
			case "fields":
				return ec.fieldContext___Type_fields(ctx, field)
			case "interfaces":
				return ec.fieldContext___Type_interfaces(ctx, field)
			case "possibleTypes":
				return ec.fieldContext___Type_possibleTypes(ctx, field)
			case "enumValues":
				return ec.fieldContext___Type_enumValues(ctx, field)
			case "inputFields":
				return ec.fieldContext___Type_inputFields(ctx, field)
			case "ofType":
				return ec.fieldContext___Type_ofType(ctx, field)
			case "isOneOf":
				return ec.fieldContext___Type_isOneOf(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type __Type", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Schema_subscriptionType(ctx context.Context, field graphql.CollectedField, obj *introspection.Schema) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Schema_subscriptionType(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SubscriptionType(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*introspection.Type)
	fc.Result = res
	return ec.marshalO__Type2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Schema_subscriptionType(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Schema",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "kind":
				return ec.fieldContext___Type_kind(ctx, field)
			case "name":
				return ec.fieldContext___Type_name(ctx, field)
			case "description":
				return ec.fieldContext___Type_description(ctx, field)
			case "specifiedByURL":
				return ec.fieldContext___Type_specifiedByURL(ctx, field)
			case "fields":
				return ec.fieldContext___Type_fields(ctx, field)
			case "interfaces":
				return ec.fieldContext___Type_interfaces(ctx, field)
			case "possibleTypes":
				return ec.fieldContext___Type_possibleTypes(ctx, field)
			case "enumValues":
				return ec.fieldContext___Type_enumValues(ctx, field)
			case "inputFields":
				return ec.fieldContext___Type_inputFields(ctx, field)
			case "ofType":
				return ec.fieldContext___Type_ofType(ctx, field)
			case "isOneOf":
				return ec.fieldContext___Type_isOneOf(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type __Type", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Schema_directives(ctx context.Context, field graphql.CollectedField, obj *introspection.Schema) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Schema_directives(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Directives(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]introspection.Directive)
	fc.Result = res
	return ec.marshalN__Directive2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐDirectiveᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Schema_directives(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Schema",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "name":
				return ec.fieldContext___Directive_name(ctx, field)
			case "description":
				return ec.fieldContext___Directive_description(ctx, field)
			case "isRepeatable":
				return ec.fieldContext___Directive_isRepeatable(ctx, field)
			case "locations":
				return ec.fieldContext___Directive_locations(ctx, field)
			case "args":
				return ec.fieldContext___Directive_args(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type __Directive", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Type_kind(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Type_kind(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Kind(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalN__TypeKind2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Type_kind(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Type",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type __TypeKind does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Type_name(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Type_name(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Type_name(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Type",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Type_description(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Type_description(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Description(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Type_description(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Type",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Type_specifiedByURL(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Type_specifiedByURL(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SpecifiedByURL(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Type_specifiedByURL(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Type",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Type_fields(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Type_fields(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Fields(fc.Args["includeDeprecated"].(bool)), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]introspection.Field)
	fc.Result = res
	return ec.marshalO__Field2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐFieldᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Type_fields(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Type",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "name":
				return ec.fieldContext___Field_name(ctx, field)
			case "description":
				return ec.fieldContext___Field_description(ctx, field)
			case "args":
				return ec.fieldContext___Field_args(ctx, field)
			case "type":
				return ec.fieldContext___Field_type(ctx, field)
			case "isDeprecated":
				return ec.fieldContext___Field_isDeprecated(ctx, field)
			case "deprecationReason":
				return ec.fieldContext___Field_deprecationReason(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type __Field", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field___Type_fields_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) ___Type_interfaces(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Type_interfaces(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Interfaces(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]introspection.Type)
	fc.Result = res
	return ec.marshalO__Type2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐTypeᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Type_interfaces(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Type",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "kind":
				return ec.fieldContext___Type_kind(ctx, field)
			case "name":
				return ec.fieldContext___Type_name(ctx, field)
			case "description":
				return ec.fieldContext___Type_description(ctx, field)
			case "specifiedByURL":
				return ec.fieldContext___Type_specifiedByURL(ctx, field)
			case "fields":
				return ec.fieldContext___Type_fields(ctx, field)
			case "interfaces":
				return ec.fieldContext___Type_interfaces(ctx, field)
			case "possibleTypes":
				return ec.fieldContext___Type_possibleTypes(ctx, field)
			case "enumValues":
				return ec.fieldContext___Type_enumValues(ctx, field)
			case "inputFields":
				return ec.fieldContext___Type_inputFields(ctx, field)
			case "ofType":
				return ec.fieldContext___Type_ofType(ctx, field)
			case "isOneOf":
				return ec.fieldContext___Type_isOneOf(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type __Type", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Type_possibleTypes(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Type_possibleTypes(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PossibleTypes(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]introspection.Type)
	fc.Result = res
	return ec.marshalO__Type2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐTypeᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Type_possibleTypes(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Type",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "kind":
				return ec.fieldContext___Type_kind(ctx, field)
			case "name":
				return ec.fieldContext___Type_name(ctx, field)
			case "description":
				return ec.fieldContext___Type_description(ctx, field)
			case "specifiedByURL":
				return ec.fieldContext___Type_specifiedByURL(ctx, field)
			case "fields":
				return ec.fieldContext___Type_fields(ctx, field)
			case "interfaces":
				return ec.fieldContext___Type_interfaces(ctx, field)
			case "possibleTypes":
				return ec.fieldContext___Type_possibleTypes(ctx, field)
			case "enumValues":
				return ec.fieldContext___Type_enumValues(ctx, field)
			case "inputFields":
				return ec.fieldContext___Type_inputFields(ctx, field)
			case "ofType":
				return ec.fieldContext___Type_ofType(ctx, field)
			case "isOneOf":
				return ec.fieldContext___Type_isOneOf(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type __Type", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Type_enumValues(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Type_enumValues(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.EnumValues(fc.Args["includeDeprecated"].(bool)), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]introspection.EnumValue)
	fc.Result = res
	return ec.marshalO__EnumValue2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐEnumValueᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Type_enumValues(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Type",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "name":
				return ec.fieldContext___EnumValue_name(ctx, field)
			case "description":
				return ec.fieldContext___EnumValue_description(ctx, field)
			case "isDeprecated":
				return ec.fieldContext___EnumValue_isDeprecated(ctx, field)
			case "deprecationReason":
				return ec.fieldContext___EnumValue_deprecationReason(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type __EnumValue", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field___Type_enumValues_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) ___Type_inputFields(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Type_inputFields(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.InputFields(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]introspection.InputValue)
	fc.Result = res
	return ec.marshalO__InputValue2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐInputValueᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Type_inputFields(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Type",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "name":
				return ec.fieldContext___InputValue_name(ctx, field)
			case "description":
				return ec.fieldContext___InputValue_description(ctx, field)
			case "type":
				return ec.fieldContext___InputValue_type(ctx, field)
			case "defaultValue":
				return ec.fieldContext___InputValue_defaultValue(ctx, field)
			case "isDeprecated":
				return ec.fieldContext___InputValue_isDeprecated(ctx, field)
			case "deprecationReason":
				return ec.fieldContext___InputValue_deprecationReason(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type __InputValue", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Type_ofType(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Type_ofType(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.OfType(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*introspection.Type)
	fc.Result = res
	return ec.marshalO__Type2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Type_ofType(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Type",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "kind":
				return ec.fieldContext___Type_kind(ctx, field)
			case "name":
				return ec.fieldContext___Type_name(ctx, field)
			case "description":
				return ec.fieldContext___Type_description(ctx, field)
			case "specifiedByURL":
				return ec.fieldContext___Type_specifiedByURL(ctx, field)
			case "fields":
				return ec.fieldContext___Type_fields(ctx, field)
			case "interfaces":
				return ec.fieldContext___Type_interfaces(ctx, field)
			case "possibleTypes":
				return ec.fieldContext___Type_possibleTypes(ctx, field)
			case "enumValues":
				return ec.fieldContext___Type_enumValues(ctx, field)
			case "inputFields":
				return ec.fieldContext___Type_inputFields(ctx, field)
			case "ofType":
				return ec.fieldContext___Type_ofType(ctx, field)
			case "isOneOf":
				return ec.fieldContext___Type_isOneOf(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type __Type", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Type_isOneOf(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Type_isOneOf(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsOneOf(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalOBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Type_isOneOf(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Type",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

// endregion **************************** field.gotpl *****************************

// region    **************************** input.gotpl *****************************

func (ec *executionContext) unmarshalInputPoolOrderBy(ctx context.Context, obj any) (model.PoolOrderBy, error) {
	var it model.PoolOrderBy
	asMap := map[string]any{}
	for k, v := range obj.(map[string]any) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"field", "direction"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "field":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("field"))
			data, err := ec.unmarshalNPoolOrderField2githubᚗcomᚋtsisarᚋstarknetᚑindexerᚋgraphqlᚋmodelᚐPoolOrderField(ctx, v)
			if err != nil {
				return it, err
			}
			it.Field = data
		case "direction":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("direction"))
			data, err := ec.unmarshalNOrderDirection2githubᚗcomᚋtsisarᚋstarknetᚑindexerᚋgraphqlᚋmodelᚐOrderDirection(ctx, v)
			if err != nil {
				return it, err
			}
			it.Direction = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputPoolWhereInput(ctx context.Context, obj any) (model.PoolWhereInput, error) {
	var it model.PoolWhereInput
	asMap := map[string]any{}
	for k, v := range obj.(map[string]any) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"id", "id_not", "id_in", "id_not_in", "poolName", "poolName_not", "poolName_in", "poolName_not_in", "debtCeiling", "debtCeiling_not", "debtCeiling_in", "debtCeiling_not_in", "liquidationRatio", "liquidationRatio_not", "liquidationRatio_in", "liquidationRatio_not_in", "stabilityFeeRate", "stabilityFeeRate_not", "stabilityFeeRate_in", "stabilityFeeRate_not_in", "tokenAdapterAddress", "tokenAdapterAddress_not", "tokenAdapterAddress_in", "tokenAdapterAddress_not_in", "lockedCollateral", "lockedCollateral_not", "lockedCollateral_in", "lockedCollateral_not_in", "collateralPrice", "collateralPrice_not", "collateralPrice_in", "collateralPrice_not_in", "collateralLastPrice", "collateralLastPrice_not", "collateralLastPrice_in", "collateralLastPrice_not_in", "priceWithSafetyMargin", "priceWithSafetyMargin_not", "priceWithSafetyMargin_in", "priceWithSafetyMargin_not_in", "rawPrice", "rawPrice_not", "rawPrice_in", "rawPrice_not_in", "debtAccumulatedRate", "debtAccumulatedRate_not", "debtAccumulatedRate_in", "debtAccumulatedRate_not_in", "totalBorrowed", "totalBorrowed_not", "totalBorrowed_in", "totalBorrowed_not_in", "totalAvailable", "totalAvailable_not", "totalAvailable_in", "totalAvailable_not_in", "tvl", "tvl_not", "tvl_in", "tvl_not_in"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "id":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.ID = data
		case "id_not":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id_not"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.IDNot = data
		case "id_in":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id_in"))
			data, err := ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.IDIn = data
		case "id_not_in":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id_not_in"))
			data, err := ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.IDNotIn = data
		case "poolName":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("poolName"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.PoolName = data
		case "poolName_not":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("poolName_not"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.PoolNameNot = data
		case "poolName_in":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("poolName_in"))
			data, err := ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.PoolNameIn = data
		case "poolName_not_in":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("poolName_not_in"))
			data, err := ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.PoolNameNotIn = data
		case "debtCeiling":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("debtCeiling"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.DebtCeiling = data
		case "debtCeiling_not":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("debtCeiling_not"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.DebtCeilingNot = data
		case "debtCeiling_in":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("debtCeiling_in"))
			data, err := ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.DebtCeilingIn = data
		case "debtCeiling_not_in":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("debtCeiling_not_in"))
			data, err := ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.DebtCeilingNotIn = data
		case "liquidationRatio":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("liquidationRatio"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.LiquidationRatio = data
		case "liquidationRatio_not":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("liquidationRatio_not"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.LiquidationRatioNot = data
		case "liquidationRatio_in":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("liquidationRatio_in"))
			data, err := ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.LiquidationRatioIn = data
		case "liquidationRatio_not_in":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("liquidationRatio_not_in"))
			data, err := ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.LiquidationRatioNotIn = data
		case "stabilityFeeRate":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("stabilityFeeRate"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.StabilityFeeRate = data
		case "stabilityFeeRate_not":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("stabilityFeeRate_not"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.StabilityFeeRateNot = data
		case "stabilityFeeRate_in":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("stabilityFeeRate_in"))
			data, err := ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.StabilityFeeRateIn = data
		case "stabilityFeeRate_not_in":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("stabilityFeeRate_not_in"))
			data, err := ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.StabilityFeeRateNotIn = data
		case "tokenAdapterAddress":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("tokenAdapterAddress"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.TokenAdapterAddress = data
		case "tokenAdapterAddress_not":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("tokenAdapterAddress_not"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.TokenAdapterAddressNot = data
		case "tokenAdapterAddress_in":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("tokenAdapterAddress_in"))
			data, err := ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.TokenAdapterAddressIn = data
		case "tokenAdapterAddress_not_in":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("tokenAdapterAddress_not_in"))
			data, err := ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.TokenAdapterAddressNotIn = data
		case "lockedCollateral":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("lockedCollateral"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.LockedCollateral = data
		case "lockedCollateral_not":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("lockedCollateral_not"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.LockedCollateralNot = data
		case "lockedCollateral_in":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("lockedCollateral_in"))
			data, err := ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.LockedCollateralIn = data
		case "lockedCollateral_not_in":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("lockedCollateral_not_in"))
			data, err := ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.LockedCollateralNotIn = data
		case "collateralPrice":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("collateralPrice"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.CollateralPrice = data
		case "collateralPrice_not":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("collateralPrice_not"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.CollateralPriceNot = data
		case "collateralPrice_in":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("collateralPrice_in"))
			data, err := ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.CollateralPriceIn = data
		case "collateralPrice_not_in":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("collateralPrice_not_in"))
			data, err := ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.CollateralPriceNotIn = data
		case "collateralLastPrice":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("collateralLastPrice"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.CollateralLastPrice = data
		case "collateralLastPrice_not":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("collateralLastPrice_not"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.CollateralLastPriceNot = data
		case "collateralLastPrice_in":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("collateralLastPrice_in"))
			data, err := ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.CollateralLastPriceIn = data
		case "collateralLastPrice_not_in":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("collateralLastPrice_not_in"))
			data, err := ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.CollateralLastPriceNotIn = data
		case "priceWithSafetyMargin":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("priceWithSafetyMargin"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.PriceWithSafetyMargin = data
		case "priceWithSafetyMargin_not":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("priceWithSafetyMargin_not"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.PriceWithSafetyMarginNot = data
		case "priceWithSafetyMargin_in":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("priceWithSafetyMargin_in"))
			data, err := ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.PriceWithSafetyMarginIn = data
		case "priceWithSafetyMargin_not_in":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("priceWithSafetyMargin_not_in"))
			data, err := ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.PriceWithSafetyMarginNotIn = data
		case "rawPrice":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("rawPrice"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.RawPrice = data
		case "rawPrice_not":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("rawPrice_not"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.RawPriceNot = data
		case "rawPrice_in":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("rawPrice_in"))
			data, err := ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.RawPriceIn = data
		case "rawPrice_not_in":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("rawPrice_not_in"))
			data, err := ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.RawPriceNotIn = data
		case "debtAccumulatedRate":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("debtAccumulatedRate"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.DebtAccumulatedRate = data
		case "debtAccumulatedRate_not":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("debtAccumulatedRate_not"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.DebtAccumulatedRateNot = data
		case "debtAccumulatedRate_in":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("debtAccumulatedRate_in"))
			data, err := ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.DebtAccumulatedRateIn = data
		case "debtAccumulatedRate_not_in":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("debtAccumulatedRate_not_in"))
			data, err := ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.DebtAccumulatedRateNotIn = data
		case "totalBorrowed":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("totalBorrowed"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.TotalBorrowed = data
		case "totalBorrowed_not":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("totalBorrowed_not"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.TotalBorrowedNot = data
		case "totalBorrowed_in":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("totalBorrowed_in"))
			data, err := ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.TotalBorrowedIn = data
		case "totalBorrowed_not_in":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("totalBorrowed_not_in"))
			data, err := ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.TotalBorrowedNotIn = data
		case "totalAvailable":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("totalAvailable"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.TotalAvailable = data
		case "totalAvailable_not":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("totalAvailable_not"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.TotalAvailableNot = data
		case "totalAvailable_in":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("totalAvailable_in"))
			data, err := ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.TotalAvailableIn = data
		case "totalAvailable_not_in":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("totalAvailable_not_in"))
			data, err := ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.TotalAvailableNotIn = data
		case "tvl":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("tvl"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.Tvl = data
		case "tvl_not":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("tvl_not"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.TvlNot = data
		case "tvl_in":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("tvl_in"))
			data, err := ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.TvlIn = data
		case "tvl_not_in":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("tvl_not_in"))
			data, err := ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.TvlNotIn = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputPositionActivityOrderBy(ctx context.Context, obj any) (model.PositionActivityOrderBy, error) {
	var it model.PositionActivityOrderBy
	asMap := map[string]any{}
	for k, v := range obj.(map[string]any) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"field", "direction"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "field":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("field"))
			data, err := ec.unmarshalNPositionActivityOrderField2githubᚗcomᚋtsisarᚋstarknetᚑindexerᚋgraphqlᚋmodelᚐPositionActivityOrderField(ctx, v)
			if err != nil {
				return it, err
			}
			it.Field = data
		case "direction":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("direction"))
			data, err := ec.unmarshalNOrderDirection2githubᚗcomᚋtsisarᚋstarknetᚑindexerᚋgraphqlᚋmodelᚐOrderDirection(ctx, v)
			if err != nil {
				return it, err
			}
			it.Direction = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputPositionActivityWhereInput(ctx context.Context, obj any) (model.PositionActivityWhereInput, error) {
	var it model.PositionActivityWhereInput
	asMap := map[string]any{}
	for k, v := range obj.(map[string]any) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"id", "id_not", "id_in", "id_not_in", "activityState", "activityState_not", "activityState_in", "activityState_not_in", "collateralAmount", "collateralAmount_not", "collateralAmount_in", "collateralAmount_not_in", "debtAmount", "debtAmount_not", "debtAmount_in", "debtAmount_not_in", "blockNumber", "blockNumber_not", "blockNumber_in", "blockNumber_not_in", "blockTimestamp", "blockTimestamp_not", "blockTimestamp_in", "blockTimestamp_not_in", "transaction", "transaction_not", "transaction_in", "transaction_not_in"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "id":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.ID = data
		case "id_not":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id_not"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.IDNot = data
		case "id_in":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id_in"))
			data, err := ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.IDIn = data
		case "id_not_in":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id_not_in"))
			data, err := ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.IDNotIn = data
		case "activityState":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("activityState"))
			data, err := ec.unmarshalOPositionActivityState2ᚖgithubᚗcomᚋtsisarᚋstarknetᚑindexerᚋgraphqlᚋmodelᚐPositionActivityState(ctx, v)
			if err != nil {
				return it, err
			}
			it.ActivityState = data
		case "activityState_not":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("activityState_not"))
			data, err := ec.unmarshalOPositionActivityState2ᚖgithubᚗcomᚋtsisarᚋstarknetᚑindexerᚋgraphqlᚋmodelᚐPositionActivityState(ctx, v)
			if err != nil {
				return it, err
			}
			it.ActivityStateNot = data
		case "activityState_in":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("activityState_in"))
			data, err := ec.unmarshalOPositionActivityState2ᚕgithubᚗcomᚋtsisarᚋstarknetᚑindexerᚋgraphqlᚋmodelᚐPositionActivityStateᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.ActivityStateIn = data
		case "activityState_not_in":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("activityState_not_in"))
			data, err := ec.unmarshalOPositionActivityState2ᚕgithubᚗcomᚋtsisarᚋstarknetᚑindexerᚋgraphqlᚋmodelᚐPositionActivityStateᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.ActivityStateNotIn = data
		case "collateralAmount":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("collateralAmount"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.CollateralAmount = data
		case "collateralAmount_not":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("collateralAmount_not"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.CollateralAmountNot = data
		case "collateralAmount_in":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("collateralAmount_in"))
			data, err := ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.CollateralAmountIn = data
		case "collateralAmount_not_in":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("collateralAmount_not_in"))
			data, err := ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.CollateralAmountNotIn = data
		case "debtAmount":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("debtAmount"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.DebtAmount = data
		case "debtAmount_not":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("debtAmount_not"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.DebtAmountNot = data
		case "debtAmount_in":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("debtAmount_in"))
			data, err := ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.DebtAmountIn = data
		case "debtAmount_not_in":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("debtAmount_not_in"))
			data, err := ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.DebtAmountNotIn = data
		case "blockNumber":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("blockNumber"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.BlockNumber = data
		case "blockNumber_not":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("blockNumber_not"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.BlockNumberNot = data
		case "blockNumber_in":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("blockNumber_in"))
			data, err := ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.BlockNumberIn = data
		case "blockNumber_not_in":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("blockNumber_not_in"))
			data, err := ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.BlockNumberNotIn = data
		case "blockTimestamp":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("blockTimestamp"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.BlockTimestamp = data
		case "blockTimestamp_not":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("blockTimestamp_not"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.BlockTimestampNot = data
		case "blockTimestamp_in":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("blockTimestamp_in"))
			data, err := ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.BlockTimestampIn = data
		case "blockTimestamp_not_in":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("blockTimestamp_not_in"))
			data, err := ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.BlockTimestampNotIn = data
		case "transaction":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("transaction"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.Transaction = data
		case "transaction_not":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("transaction_not"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.TransactionNot = data
		case "transaction_in":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("transaction_in"))
			data, err := ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.TransactionIn = data
		case "transaction_not_in":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("transaction_not_in"))
			data, err := ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.TransactionNotIn = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputPositionOrderBy(ctx context.Context, obj any) (model.PositionOrderBy, error) {
	var it model.PositionOrderBy
	asMap := map[string]any{}
	for k, v := range obj.(map[string]any) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"field", "direction"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "field":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("field"))
			data, err := ec.unmarshalNPositionOrderField2githubᚗcomᚋtsisarᚋstarknetᚑindexerᚋgraphqlᚋmodelᚐPositionOrderField(ctx, v)
			if err != nil {
				return it, err
			}
			it.Field = data
		case "direction":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("direction"))
			data, err := ec.unmarshalNOrderDirection2githubᚗcomᚋtsisarᚋstarknetᚑindexerᚋgraphqlᚋmodelᚐOrderDirection(ctx, v)
			if err != nil {
				return it, err
			}
			it.Direction = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputPositionWhereInput(ctx context.Context, obj any) (model.PositionWhereInput, error) {
	var it model.PositionWhereInput
	asMap := map[string]any{}
	for k, v := range obj.(map[string]any) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"id", "id_not", "id_in", "id_not_in", "positionAddress", "positionAddress_not", "positionAddress_in", "positionAddress_not_in", "userAddress", "userAddress_not", "userAddress_in", "userAddress_not_in", "walletAddress", "walletAddress_not", "walletAddress_in", "walletAddress_not_in", "collateralPool", "collateralPool_not", "collateralPool_in", "collateralPool_not_in", "collateralPoolName", "collateralPoolName_not", "collateralPoolName_in", "collateralPoolName_not_in", "positionId", "positionId_not", "positionId_in", "positionId_not_in", "lockedCollateral", "lockedCollateral_not", "lockedCollateral_in", "lockedCollateral_not_in", "debtValue", "debtValue_not", "debtValue_in", "debtValue_not_in", "debtShare", "debtShare_not", "debtShare_in", "debtShare_not_in", "safetyBuffer", "safetyBuffer_not", "safetyBuffer_in", "safetyBuffer_not_in", "safetyBufferInPercent", "safetyBufferInPercent_not", "safetyBufferInPercent_in", "safetyBufferInPercent_not_in", "tvl", "tvl_not", "tvl_in", "tvl_not_in", "positionStatus", "positionStatus_not", "positionStatus_in", "positionStatus_not_in", "liquidationCount", "liquidationCount_not", "liquidationCount_in", "liquidationCount_not_in", "blockNumber", "blockNumber_not", "blockNumber_in", "blockNumber_not_in", "blockTimestamp", "blockTimestamp_not", "blockTimestamp_in", "blockTimestamp_not_in", "transaction", "transaction_not", "transaction_in", "transaction_not_in"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "id":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.ID = data
		case "id_not":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id_not"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.IDNot = data
		case "id_in":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id_in"))
			data, err := ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.IDIn = data
		case "id_not_in":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id_not_in"))
			data, err := ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.IDNotIn = data
		case "positionAddress":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("positionAddress"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.PositionAddress = data
		case "positionAddress_not":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("positionAddress_not"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.PositionAddressNot = data
		case "positionAddress_in":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("positionAddress_in"))
			data, err := ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.PositionAddressIn = data
		case "positionAddress_not_in":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("positionAddress_not_in"))
			data, err := ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.PositionAddressNotIn = data
		case "userAddress":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("userAddress"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.UserAddress = data
		case "userAddress_not":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("userAddress_not"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.UserAddressNot = data
		case "userAddress_in":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("userAddress_in"))
			data, err := ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.UserAddressIn = data
		case "userAddress_not_in":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("userAddress_not_in"))
			data, err := ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.UserAddressNotIn = data
		case "walletAddress":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("walletAddress"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.WalletAddress = data
		case "walletAddress_not":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("walletAddress_not"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.WalletAddressNot = data
		case "walletAddress_in":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("walletAddress_in"))
			data, err := ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.WalletAddressIn = data
		case "walletAddress_not_in":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("walletAddress_not_in"))
			data, err := ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.WalletAddressNotIn = data
		case "collateralPool":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("collateralPool"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.CollateralPool = data
		case "collateralPool_not":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("collateralPool_not"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.CollateralPoolNot = data
		case "collateralPool_in":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("collateralPool_in"))
			data, err := ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.CollateralPoolIn = data
		case "collateralPool_not_in":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("collateralPool_not_in"))
			data, err := ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.CollateralPoolNotIn = data
		case "collateralPoolName":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("collateralPoolName"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.CollateralPoolName = data
		case "collateralPoolName_not":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("collateralPoolName_not"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.CollateralPoolNameNot = data
		case "collateralPoolName_in":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("collateralPoolName_in"))
			data, err := ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.CollateralPoolNameIn = data
		case "collateralPoolName_not_in":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("collateralPoolName_not_in"))
			data, err := ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.CollateralPoolNameNotIn = data
		case "positionId":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("positionId"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.PositionID = data
		case "positionId_not":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("positionId_not"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.PositionIDNot = data
		case "positionId_in":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("positionId_in"))
			data, err := ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.PositionIDIn = data
		case "positionId_not_in":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("positionId_not_in"))
			data, err := ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.PositionIDNotIn = data
		case "lockedCollateral":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("lockedCollateral"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.LockedCollateral = data
		case "lockedCollateral_not":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("lockedCollateral_not"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.LockedCollateralNot = data
		case "lockedCollateral_in":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("lockedCollateral_in"))
			data, err := ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.LockedCollateralIn = data
		case "lockedCollateral_not_in":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("lockedCollateral_not_in"))
			data, err := ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.LockedCollateralNotIn = data
		case "debtValue":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("debtValue"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.DebtValue = data
		case "debtValue_not":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("debtValue_not"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.DebtValueNot = data
		case "debtValue_in":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("debtValue_in"))
			data, err := ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.DebtValueIn = data
		case "debtValue_not_in":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("debtValue_not_in"))
			data, err := ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.DebtValueNotIn = data
		case "debtShare":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("debtShare"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.DebtShare = data
		case "debtShare_not":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("debtShare_not"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.DebtShareNot = data
		case "debtShare_in":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("debtShare_in"))
			data, err := ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.DebtShareIn = data
		case "debtShare_not_in":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("debtShare_not_in"))
			data, err := ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.DebtShareNotIn = data
		case "safetyBuffer":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("safetyBuffer"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.SafetyBuffer = data
		case "safetyBuffer_not":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("safetyBuffer_not"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.SafetyBufferNot = data
		case "safetyBuffer_in":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("safetyBuffer_in"))
			data, err := ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.SafetyBufferIn = data
		case "safetyBuffer_not_in":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("safetyBuffer_not_in"))
			data, err := ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.SafetyBufferNotIn = data
		case "safetyBufferInPercent":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("safetyBufferInPercent"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.SafetyBufferInPercent = data
		case "safetyBufferInPercent_not":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("safetyBufferInPercent_not"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.SafetyBufferInPercentNot = data
		case "safetyBufferInPercent_in":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("safetyBufferInPercent_in"))
			data, err := ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.SafetyBufferInPercentIn = data
		case "safetyBufferInPercent_not_in":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("safetyBufferInPercent_not_in"))
			data, err := ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.SafetyBufferInPercentNotIn = data
		case "tvl":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("tvl"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.Tvl = data
		case "tvl_not":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("tvl_not"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.TvlNot = data
		case "tvl_in":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("tvl_in"))
			data, err := ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.TvlIn = data
		case "tvl_not_in":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("tvl_not_in"))
			data, err := ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.TvlNotIn = data
		case "positionStatus":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("positionStatus"))
			data, err := ec.unmarshalOPositionStatus2ᚖgithubᚗcomᚋtsisarᚋstarknetᚑindexerᚋgraphqlᚋmodelᚐPositionStatus(ctx, v)
			if err != nil {
				return it, err
			}
			it.PositionStatus = data
		case "positionStatus_not":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("positionStatus_not"))
			data, err := ec.unmarshalOPositionStatus2ᚖgithubᚗcomᚋtsisarᚋstarknetᚑindexerᚋgraphqlᚋmodelᚐPositionStatus(ctx, v)
			if err != nil {
				return it, err
			}
			it.PositionStatusNot = data
		case "positionStatus_in":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("positionStatus_in"))
			data, err := ec.unmarshalOPositionStatus2ᚕgithubᚗcomᚋtsisarᚋstarknetᚑindexerᚋgraphqlᚋmodelᚐPositionStatusᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.PositionStatusIn = data
		case "positionStatus_not_in":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("positionStatus_not_in"))
			data, err := ec.unmarshalOPositionStatus2ᚕgithubᚗcomᚋtsisarᚋstarknetᚑindexerᚋgraphqlᚋmodelᚐPositionStatusᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.PositionStatusNotIn = data
		case "liquidationCount":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("liquidationCount"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.LiquidationCount = data
		case "liquidationCount_not":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("liquidationCount_not"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.LiquidationCountNot = data
		case "liquidationCount_in":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("liquidationCount_in"))
			data, err := ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.LiquidationCountIn = data
		case "liquidationCount_not_in":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("liquidationCount_not_in"))
			data, err := ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.LiquidationCountNotIn = data
		case "blockNumber":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("blockNumber"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.BlockNumber = data
		case "blockNumber_not":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("blockNumber_not"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.BlockNumberNot = data
		case "blockNumber_in":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("blockNumber_in"))
			data, err := ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.BlockNumberIn = data
		case "blockNumber_not_in":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("blockNumber_not_in"))
			data, err := ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.BlockNumberNotIn = data
		case "blockTimestamp":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("blockTimestamp"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.BlockTimestamp = data
		case "blockTimestamp_not":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("blockTimestamp_not"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.BlockTimestampNot = data
		case "blockTimestamp_in":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("blockTimestamp_in"))
			data, err := ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.BlockTimestampIn = data
		case "blockTimestamp_not_in":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("blockTimestamp_not_in"))
			data, err := ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.BlockTimestampNotIn = data
		case "transaction":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("transaction"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.Transaction = data
		case "transaction_not":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("transaction_not"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.TransactionNot = data
		case "transaction_in":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("transaction_in"))
			data, err := ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.TransactionIn = data
		case "transaction_not_in":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("transaction_not_in"))
			data, err := ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.TransactionNotIn = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputProtocolStatOrderBy(ctx context.Context, obj any) (model.ProtocolStatOrderBy, error) {
	var it model.ProtocolStatOrderBy
	asMap := map[string]any{}
	for k, v := range obj.(map[string]any) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"field", "direction"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "field":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("field"))
			data, err := ec.unmarshalNProtocolStatOrderField2githubᚗcomᚋtsisarᚋstarknetᚑindexerᚋgraphqlᚋmodelᚐProtocolStatOrderField(ctx, v)
			if err != nil {
				return it, err
			}
			it.Field = data
		case "direction":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("direction"))
			data, err := ec.unmarshalNOrderDirection2githubᚗcomᚋtsisarᚋstarknetᚑindexerᚋgraphqlᚋmodelᚐOrderDirection(ctx, v)
			if err != nil {
				return it, err
			}
			it.Direction = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputProtocolStatWhereInput(ctx context.Context, obj any) (model.ProtocolStatWhereInput, error) {
	var it model.ProtocolStatWhereInput
	asMap := map[string]any{}
	for k, v := range obj.(map[string]any) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"id", "id_not", "id_in", "id_not_in", "totalSupply", "totalSupply_not", "totalSupply_in", "totalSupply_not_in", "tvl", "tvl_not", "tvl_in", "tvl_not_in"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "id":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.ID = data
		case "id_not":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id_not"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.IDNot = data
		case "id_in":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id_in"))
			data, err := ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.IDIn = data
		case "id_not_in":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id_not_in"))
			data, err := ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.IDNotIn = data
		case "totalSupply":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("totalSupply"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.TotalSupply = data
		case "totalSupply_not":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("totalSupply_not"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.TotalSupplyNot = data
		case "totalSupply_in":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("totalSupply_in"))
			data, err := ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.TotalSupplyIn = data
		case "totalSupply_not_in":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("totalSupply_not_in"))
			data, err := ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.TotalSupplyNotIn = data
		case "tvl":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("tvl"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.Tvl = data
		case "tvl_not":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("tvl_not"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.TvlNot = data
		case "tvl_in":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("tvl_in"))
			data, err := ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.TvlIn = data
		case "tvl_not_in":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("tvl_not_in"))
			data, err := ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.TvlNotIn = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputStableSwapStatOrderBy(ctx context.Context, obj any) (model.StableSwapStatOrderBy, error) {
	var it model.StableSwapStatOrderBy
	asMap := map[string]any{}
	for k, v := range obj.(map[string]any) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"field", "direction"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "field":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("field"))
			data, err := ec.unmarshalNStableSwapStatOrderField2githubᚗcomᚋtsisarᚋstarknetᚑindexerᚋgraphqlᚋmodelᚐStableSwapStatOrderField(ctx, v)
			if err != nil {
				return it, err
			}
			it.Field = data
		case "direction":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("direction"))
			data, err := ec.unmarshalNOrderDirection2githubᚗcomᚋtsisarᚋstarknetᚑindexerᚋgraphqlᚋmodelᚐOrderDirection(ctx, v)
			if err != nil {
				return it, err
			}
			it.Direction = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputStableSwapStatWhereInput(ctx context.Context, obj any) (model.StableSwapStatWhereInput, error) {
	var it model.StableSwapStatWhereInput
	asMap := map[string]any{}
	for k, v := range obj.(map[string]any) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"id", "id_not", "id_in", "id_not_in", "totalTokenToStablecoinSwapEvents", "totalTokenToStablecoinSwapEvents_not", "totalTokenToStablecoinSwapEvents_in", "totalTokenToStablecoinSwapEvents_not_in", "totalStablecoinToTokenSwapEvents", "totalStablecoinToTokenSwapEvents_not", "totalStablecoinToTokenSwapEvents_in", "totalStablecoinToTokenSwapEvents_not_in", "remainingDailySwapAmount", "remainingDailySwapAmount_not", "remainingDailySwapAmount_in", "remainingDailySwapAmount_not_in", "tokenToStablecoinTotalSwapValue", "tokenToStablecoinTotalSwapValue_not", "tokenToStablecoinTotalSwapValue_in", "tokenToStablecoinTotalSwapValue_not_in", "stablecoinToTokenTotalSwapValue", "stablecoinToTokenTotalSwapValue_not", "stablecoinToTokenTotalSwapValue_in", "stablecoinToTokenTotalSwapValue_not_in"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "id":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.ID = data
		case "id_not":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id_not"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.IDNot = data
		case "id_in":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id_in"))
			data, err := ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.IDIn = data
		case "id_not_in":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id_not_in"))
			data, err := ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.IDNotIn = data
		case "totalTokenToStablecoinSwapEvents":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("totalTokenToStablecoinSwapEvents"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.TotalTokenToStablecoinSwapEvents = data
		case "totalTokenToStablecoinSwapEvents_not":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("totalTokenToStablecoinSwapEvents_not"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.TotalTokenToStablecoinSwapEventsNot = data
		case "totalTokenToStablecoinSwapEvents_in":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("totalTokenToStablecoinSwapEvents_in"))
			data, err := ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.TotalTokenToStablecoinSwapEventsIn = data
		case "totalTokenToStablecoinSwapEvents_not_in":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("totalTokenToStablecoinSwapEvents_not_in"))
			data, err := ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.TotalTokenToStablecoinSwapEventsNotIn = data
		case "totalStablecoinToTokenSwapEvents":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("totalStablecoinToTokenSwapEvents"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.TotalStablecoinToTokenSwapEvents = data
		case "totalStablecoinToTokenSwapEvents_not":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("totalStablecoinToTokenSwapEvents_not"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.TotalStablecoinToTokenSwapEventsNot = data
		case "totalStablecoinToTokenSwapEvents_in":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("totalStablecoinToTokenSwapEvents_in"))
			data, err := ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.TotalStablecoinToTokenSwapEventsIn = data
		case "totalStablecoinToTokenSwapEvents_not_in":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("totalStablecoinToTokenSwapEvents_not_in"))
			data, err := ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.TotalStablecoinToTokenSwapEventsNotIn = data
		case "remainingDailySwapAmount":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("remainingDailySwapAmount"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.RemainingDailySwapAmount = data
		case "remainingDailySwapAmount_not":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("remainingDailySwapAmount_not"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.RemainingDailySwapAmountNot = data
		case "remainingDailySwapAmount_in":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("remainingDailySwapAmount_in"))
			data, err := ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.RemainingDailySwapAmountIn = data
		case "remainingDailySwapAmount_not_in":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("remainingDailySwapAmount_not_in"))
			data, err := ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.RemainingDailySwapAmountNotIn = data
		case "tokenToStablecoinTotalSwapValue":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("tokenToStablecoinTotalSwapValue"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.TokenToStablecoinTotalSwapValue = data
		case "tokenToStablecoinTotalSwapValue_not":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("tokenToStablecoinTotalSwapValue_not"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.TokenToStablecoinTotalSwapValueNot = data
		case "tokenToStablecoinTotalSwapValue_in":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("tokenToStablecoinTotalSwapValue_in"))
			data, err := ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.TokenToStablecoinTotalSwapValueIn = data
		case "tokenToStablecoinTotalSwapValue_not_in":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("tokenToStablecoinTotalSwapValue_not_in"))
			data, err := ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.TokenToStablecoinTotalSwapValueNotIn = data
		case "stablecoinToTokenTotalSwapValue":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("stablecoinToTokenTotalSwapValue"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.StablecoinToTokenTotalSwapValue = data
		case "stablecoinToTokenTotalSwapValue_not":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("stablecoinToTokenTotalSwapValue_not"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.StablecoinToTokenTotalSwapValueNot = data
		case "stablecoinToTokenTotalSwapValue_in":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("stablecoinToTokenTotalSwapValue_in"))
			data, err := ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.StablecoinToTokenTotalSwapValueIn = data
		case "stablecoinToTokenTotalSwapValue_not_in":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("stablecoinToTokenTotalSwapValue_not_in"))
			data, err := ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.StablecoinToTokenTotalSwapValueNotIn = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputSwapEventOrderBy(ctx context.Context, obj any) (model.SwapEventOrderBy, error) {
	var it model.SwapEventOrderBy
	asMap := map[string]any{}
	for k, v := range obj.(map[string]any) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"field", "direction"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "field":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("field"))
			data, err := ec.unmarshalNSwapEventOrderField2githubᚗcomᚋtsisarᚋstarknetᚑindexerᚋgraphqlᚋmodelᚐSwapEventOrderField(ctx, v)
			if err != nil {
				return it, err
			}
			it.Field = data
		case "direction":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("direction"))
			data, err := ec.unmarshalNOrderDirection2githubᚗcomᚋtsisarᚋstarknetᚑindexerᚋgraphqlᚋmodelᚐOrderDirection(ctx, v)
			if err != nil {
				return it, err
			}
			it.Direction = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputSwapEventWhereInput(ctx context.Context, obj any) (model.SwapEventWhereInput, error) {
	var it model.SwapEventWhereInput
	asMap := map[string]any{}
	for k, v := range obj.(map[string]any) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"id", "id_not", "id_in", "id_not_in", "fee", "fee_not", "fee_in", "fee_not_in", "owner", "owner_not", "owner_in", "owner_not_in", "value", "value_not", "value_in", "value_not_in", "isStablecoinToTokenSwap", "isStablecoinToTokenSwap_not", "isStablecoinToTokenSwap_in", "isStablecoinToTokenSwap_not_in", "isTokenToStablecoinSwap", "isTokenToStablecoinSwap_not", "isTokenToStablecoinSwap_in", "isTokenToStablecoinSwap_not_in", "blockNumber", "blockNumber_not", "blockNumber_in", "blockNumber_not_in", "blockTimestamp", "blockTimestamp_not", "blockTimestamp_in", "blockTimestamp_not_in", "transaction", "transaction_not", "transaction_in", "transaction_not_in"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "id":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.ID = data
		case "id_not":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id_not"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.IDNot = data
		case "id_in":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id_in"))
			data, err := ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.IDIn = data
		case "id_not_in":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id_not_in"))
			data, err := ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.IDNotIn = data
		case "fee":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("fee"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.Fee = data
		case "fee_not":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("fee_not"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.FeeNot = data
		case "fee_in":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("fee_in"))
			data, err := ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.FeeIn = data
		case "fee_not_in":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("fee_not_in"))
			data, err := ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.FeeNotIn = data
		case "owner":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("owner"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.Owner = data
		case "owner_not":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("owner_not"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.OwnerNot = data
		case "owner_in":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("owner_in"))
			data, err := ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.OwnerIn = data
		case "owner_not_in":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("owner_not_in"))
			data, err := ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.OwnerNotIn = data
		case "value":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("value"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.Value = data
		case "value_not":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("value_not"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.ValueNot = data
		case "value_in":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("value_in"))
			data, err := ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.ValueIn = data
		case "value_not_in":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("value_not_in"))
			data, err := ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.ValueNotIn = data
		case "isStablecoinToTokenSwap":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("isStablecoinToTokenSwap"))
			data, err := ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
			it.IsStablecoinToTokenSwap = data
		case "isStablecoinToTokenSwap_not":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("isStablecoinToTokenSwap_not"))
			data, err := ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
			it.IsStablecoinToTokenSwapNot = data
		case "isStablecoinToTokenSwap_in":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("isStablecoinToTokenSwap_in"))
			data, err := ec.unmarshalOBoolean2ᚕboolᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.IsStablecoinToTokenSwapIn = data
		case "isStablecoinToTokenSwap_not_in":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("isStablecoinToTokenSwap_not_in"))
			data, err := ec.unmarshalOBoolean2ᚕboolᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.IsStablecoinToTokenSwapNotIn = data
		case "isTokenToStablecoinSwap":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("isTokenToStablecoinSwap"))
			data, err := ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
			it.IsTokenToStablecoinSwap = data
		case "isTokenToStablecoinSwap_not":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("isTokenToStablecoinSwap_not"))
			data, err := ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
			it.IsTokenToStablecoinSwapNot = data
		case "isTokenToStablecoinSwap_in":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("isTokenToStablecoinSwap_in"))
			data, err := ec.unmarshalOBoolean2ᚕboolᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.IsTokenToStablecoinSwapIn = data
		case "isTokenToStablecoinSwap_not_in":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("isTokenToStablecoinSwap_not_in"))
			data, err := ec.unmarshalOBoolean2ᚕboolᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.IsTokenToStablecoinSwapNotIn = data
		case "blockNumber":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("blockNumber"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.BlockNumber = data
		case "blockNumber_not":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("blockNumber_not"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.BlockNumberNot = data
		case "blockNumber_in":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("blockNumber_in"))
			data, err := ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.BlockNumberIn = data
		case "blockNumber_not_in":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("blockNumber_not_in"))
			data, err := ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.BlockNumberNotIn = data
		case "blockTimestamp":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("blockTimestamp"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.BlockTimestamp = data
		case "blockTimestamp_not":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("blockTimestamp_not"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.BlockTimestampNot = data
		case "blockTimestamp_in":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("blockTimestamp_in"))
			data, err := ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.BlockTimestampIn = data
		case "blockTimestamp_not_in":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("blockTimestamp_not_in"))
			data, err := ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.BlockTimestampNotIn = data
		case "transaction":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("transaction"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.Transaction = data
		case "transaction_not":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("transaction_not"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.TransactionNot = data
		case "transaction_in":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("transaction_in"))
			data, err := ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.TransactionIn = data
		case "transaction_not_in":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("transaction_not_in"))
			data, err := ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.TransactionNotIn = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputUserOrderBy(ctx context.Context, obj any) (model.UserOrderBy, error) {
	var it model.UserOrderBy
	asMap := map[string]any{}
	for k, v := range obj.(map[string]any) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"field", "direction"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "field":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("field"))
			data, err := ec.unmarshalNUserOrderField2githubᚗcomᚋtsisarᚋstarknetᚑindexerᚋgraphqlᚋmodelᚐUserOrderField(ctx, v)
			if err != nil {
				return it, err
			}
			it.Field = data
		case "direction":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("direction"))
			data, err := ec.unmarshalNOrderDirection2githubᚗcomᚋtsisarᚋstarknetᚑindexerᚋgraphqlᚋmodelᚐOrderDirection(ctx, v)
			if err != nil {
				return it, err
			}
			it.Direction = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputUserWhereInput(ctx context.Context, obj any) (model.UserWhereInput, error) {
	var it model.UserWhereInput
	asMap := map[string]any{}
	for k, v := range obj.(map[string]any) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"id", "id_not", "id_in", "id_not_in", "address", "address_not", "address_in", "address_not_in", "activePositionsCount", "activePositionsCount_not", "activePositionsCount_in", "activePositionsCount_not_in"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "id":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.ID = data
		case "id_not":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id_not"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.IDNot = data
		case "id_in":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id_in"))
			data, err := ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.IDIn = data
		case "id_not_in":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id_not_in"))
			data, err := ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.IDNotIn = data
		case "address":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("address"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.Address = data
		case "address_not":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("address_not"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.AddressNot = data
		case "address_in":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("address_in"))
			data, err := ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.AddressIn = data
		case "address_not_in":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("address_not_in"))
			data, err := ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.AddressNotIn = data
		case "activePositionsCount":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("activePositionsCount"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.ActivePositionsCount = data
		case "activePositionsCount_not":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("activePositionsCount_not"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.ActivePositionsCountNot = data
		case "activePositionsCount_in":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("activePositionsCount_in"))
			data, err := ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.ActivePositionsCountIn = data
		case "activePositionsCount_not_in":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("activePositionsCount_not_in"))
			data, err := ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.ActivePositionsCountNotIn = data
		}
	}

	return it, nil
}

// endregion **************************** input.gotpl *****************************

// region    ************************** interface.gotpl ***************************

// endregion ************************** interface.gotpl ***************************

// region    **************************** object.gotpl ****************************

var blockImplementors = []string{"Block"}

func (ec *executionContext) _Block(ctx context.Context, sel ast.SelectionSet, obj *model.Block) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, blockImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Block")
		case "hash":
			out.Values[i] = ec._Block_hash(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "number":
			out.Values[i] = ec._Block_number(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "parentHash":
			out.Values[i] = ec._Block_parentHash(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "timestamp":
			out.Values[i] = ec._Block_timestamp(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var metaImplementors = []string{"Meta"}

func (ec *executionContext) _Meta(ctx context.Context, sel ast.SelectionSet, obj *model.Meta) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, metaImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Meta")
		case "block":
			out.Values[i] = ec._Meta_block(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "deployment":
			out.Values[i] = ec._Meta_deployment(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "hasIndexingErrors":
			out.Values[i] = ec._Meta_hasIndexingErrors(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var poolImplementors = []string{"Pool"}

func (ec *executionContext) _Pool(ctx context.Context, sel ast.SelectionSet, obj *ent.Pool) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, poolImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Pool")
		case "id":
			out.Values[i] = ec._Pool_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "poolName":
			out.Values[i] = ec._Pool_poolName(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "debtCeiling":
			out.Values[i] = ec._Pool_debtCeiling(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "liquidationRatio":
			out.Values[i] = ec._Pool_liquidationRatio(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "stabilityFeeRate":
			out.Values[i] = ec._Pool_stabilityFeeRate(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "tokenAdapterAddress":
			out.Values[i] = ec._Pool_tokenAdapterAddress(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "lockedCollateral":
			out.Values[i] = ec._Pool_lockedCollateral(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "collateralPrice":
			out.Values[i] = ec._Pool_collateralPrice(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "collateralLastPrice":
			out.Values[i] = ec._Pool_collateralLastPrice(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "priceWithSafetyMargin":
			out.Values[i] = ec._Pool_priceWithSafetyMargin(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "rawPrice":
			out.Values[i] = ec._Pool_rawPrice(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "debtAccumulatedRate":
			out.Values[i] = ec._Pool_debtAccumulatedRate(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "totalBorrowed":
			out.Values[i] = ec._Pool_totalBorrowed(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "totalAvailable":
			out.Values[i] = ec._Pool_totalAvailable(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "tvl":
			out.Values[i] = ec._Pool_tvl(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "positions":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Pool_positions(ctx, field, obj)
				if res == graphql.Null {
					atomic.AddUint32(&fs.Invalids, 1)
				}
				return res
			}

			if field.Deferrable != nil {
				dfs, ok := deferred[field.Deferrable.Label]
				di := 0
				if ok {
					dfs.AddField(field)
					di = len(dfs.Values) - 1
				} else {
					dfs = graphql.NewFieldSet([]graphql.CollectedField{field})
					deferred[field.Deferrable.Label] = dfs
				}
				dfs.Concurrently(di, func(ctx context.Context) graphql.Marshaler {
					return innerFunc(ctx, dfs)
				})

				// don't run the out.Concurrently() call below
				out.Values[i] = graphql.Null
				continue
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var positionImplementors = []string{"Position"}

func (ec *executionContext) _Position(ctx context.Context, sel ast.SelectionSet, obj *ent.Position) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, positionImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Position")
		case "id":
			out.Values[i] = ec._Position_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "positionAddress":
			out.Values[i] = ec._Position_positionAddress(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "userAddress":
			out.Values[i] = ec._Position_userAddress(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "walletAddress":
			out.Values[i] = ec._Position_walletAddress(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "collateralPool":
			out.Values[i] = ec._Position_collateralPool(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "collateralPoolName":
			out.Values[i] = ec._Position_collateralPoolName(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "positionId":
			out.Values[i] = ec._Position_positionId(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "lockedCollateral":
			out.Values[i] = ec._Position_lockedCollateral(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "debtValue":
			out.Values[i] = ec._Position_debtValue(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "debtShare":
			out.Values[i] = ec._Position_debtShare(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "safetyBuffer":
			out.Values[i] = ec._Position_safetyBuffer(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "safetyBufferInPercent":
			out.Values[i] = ec._Position_safetyBufferInPercent(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "tvl":
			out.Values[i] = ec._Position_tvl(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "positionStatus":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Position_positionStatus(ctx, field, obj)
				if res == graphql.Null {
					atomic.AddUint32(&fs.Invalids, 1)
				}
				return res
			}

			if field.Deferrable != nil {
				dfs, ok := deferred[field.Deferrable.Label]
				di := 0
				if ok {
					dfs.AddField(field)
					di = len(dfs.Values) - 1
				} else {
					dfs = graphql.NewFieldSet([]graphql.CollectedField{field})
					deferred[field.Deferrable.Label] = dfs
				}
				dfs.Concurrently(di, func(ctx context.Context) graphql.Marshaler {
					return innerFunc(ctx, dfs)
				})

				// don't run the out.Concurrently() call below
				out.Values[i] = graphql.Null
				continue
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
		case "liquidationCount":
			out.Values[i] = ec._Position_liquidationCount(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "blockNumber":
			out.Values[i] = ec._Position_blockNumber(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "blockTimestamp":
			out.Values[i] = ec._Position_blockTimestamp(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "transaction":
			out.Values[i] = ec._Position_transaction(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "pools":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Position_pools(ctx, field, obj)
				if res == graphql.Null {
					atomic.AddUint32(&fs.Invalids, 1)
				}
				return res
			}

			if field.Deferrable != nil {
				dfs, ok := deferred[field.Deferrable.Label]
				di := 0
				if ok {
					dfs.AddField(field)
					di = len(dfs.Values) - 1
				} else {
					dfs = graphql.NewFieldSet([]graphql.CollectedField{field})
					deferred[field.Deferrable.Label] = dfs
				}
				dfs.Concurrently(di, func(ctx context.Context) graphql.Marshaler {
					return innerFunc(ctx, dfs)
				})

				// don't run the out.Concurrently() call below
				out.Values[i] = graphql.Null
				continue
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
		case "activities":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Position_activities(ctx, field, obj)
				if res == graphql.Null {
					atomic.AddUint32(&fs.Invalids, 1)
				}
				return res
			}

			if field.Deferrable != nil {
				dfs, ok := deferred[field.Deferrable.Label]
				di := 0
				if ok {
					dfs.AddField(field)
					di = len(dfs.Values) - 1
				} else {
					dfs = graphql.NewFieldSet([]graphql.CollectedField{field})
					deferred[field.Deferrable.Label] = dfs
				}
				dfs.Concurrently(di, func(ctx context.Context) graphql.Marshaler {
					return innerFunc(ctx, dfs)
				})

				// don't run the out.Concurrently() call below
				out.Values[i] = graphql.Null
				continue
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var positionActivityImplementors = []string{"PositionActivity"}

func (ec *executionContext) _PositionActivity(ctx context.Context, sel ast.SelectionSet, obj *ent.PositionActivity) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, positionActivityImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("PositionActivity")
		case "id":
			out.Values[i] = ec._PositionActivity_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "position":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._PositionActivity_position(ctx, field, obj)
				if res == graphql.Null {
					atomic.AddUint32(&fs.Invalids, 1)
				}
				return res
			}

			if field.Deferrable != nil {
				dfs, ok := deferred[field.Deferrable.Label]
				di := 0
				if ok {
					dfs.AddField(field)
					di = len(dfs.Values) - 1
				} else {
					dfs = graphql.NewFieldSet([]graphql.CollectedField{field})
					deferred[field.Deferrable.Label] = dfs
				}
				dfs.Concurrently(di, func(ctx context.Context) graphql.Marshaler {
					return innerFunc(ctx, dfs)
				})

				// don't run the out.Concurrently() call below
				out.Values[i] = graphql.Null
				continue
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
		case "activityState":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._PositionActivity_activityState(ctx, field, obj)
				if res == graphql.Null {
					atomic.AddUint32(&fs.Invalids, 1)
				}
				return res
			}

			if field.Deferrable != nil {
				dfs, ok := deferred[field.Deferrable.Label]
				di := 0
				if ok {
					dfs.AddField(field)
					di = len(dfs.Values) - 1
				} else {
					dfs = graphql.NewFieldSet([]graphql.CollectedField{field})
					deferred[field.Deferrable.Label] = dfs
				}
				dfs.Concurrently(di, func(ctx context.Context) graphql.Marshaler {
					return innerFunc(ctx, dfs)
				})

				// don't run the out.Concurrently() call below
				out.Values[i] = graphql.Null
				continue
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
		case "collateralAmount":
			out.Values[i] = ec._PositionActivity_collateralAmount(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "debtAmount":
			out.Values[i] = ec._PositionActivity_debtAmount(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "blockNumber":
			out.Values[i] = ec._PositionActivity_blockNumber(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "blockTimestamp":
			out.Values[i] = ec._PositionActivity_blockTimestamp(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "transaction":
			out.Values[i] = ec._PositionActivity_transaction(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var protocolStatImplementors = []string{"ProtocolStat"}

func (ec *executionContext) _ProtocolStat(ctx context.Context, sel ast.SelectionSet, obj *ent.ProtocolStat) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, protocolStatImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("ProtocolStat")
		case "id":
			out.Values[i] = ec._ProtocolStat_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "totalSupply":
			out.Values[i] = ec._ProtocolStat_totalSupply(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "tvl":
			out.Values[i] = ec._ProtocolStat_tvl(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "pools":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._ProtocolStat_pools(ctx, field, obj)
				if res == graphql.Null {
					atomic.AddUint32(&fs.Invalids, 1)
				}
				return res
			}

			if field.Deferrable != nil {
				dfs, ok := deferred[field.Deferrable.Label]
				di := 0
				if ok {
					dfs.AddField(field)
					di = len(dfs.Values) - 1
				} else {
					dfs = graphql.NewFieldSet([]graphql.CollectedField{field})
					deferred[field.Deferrable.Label] = dfs
				}
				dfs.Concurrently(di, func(ctx context.Context) graphql.Marshaler {
					return innerFunc(ctx, dfs)
				})

				// don't run the out.Concurrently() call below
				out.Values[i] = graphql.Null
				continue
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var queryImplementors = []string{"Query"}

func (ec *executionContext) _Query(ctx context.Context, sel ast.SelectionSet) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, queryImplementors)
	ctx = graphql.WithFieldContext(ctx, &graphql.FieldContext{
		Object: "Query",
	})

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		innerCtx := graphql.WithRootFieldContext(ctx, &graphql.RootFieldContext{
			Object: field.Name,
			Field:  field,
		})

		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Query")
		case "_meta":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query__meta(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&fs.Invalids, 1)
				}
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx,
					func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return rrm(innerCtx) })
		case "user":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_user(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&fs.Invalids, 1)
				}
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx,
					func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return rrm(innerCtx) })
		case "users":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_users(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&fs.Invalids, 1)
				}
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx,
					func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return rrm(innerCtx) })
		case "pool":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_pool(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&fs.Invalids, 1)
				}
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx,
					func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return rrm(innerCtx) })
		case "pools":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_pools(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&fs.Invalids, 1)
				}
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx,
					func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return rrm(innerCtx) })
		case "protocolStat":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_protocolStat(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&fs.Invalids, 1)
				}
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx,
					func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return rrm(innerCtx) })
		case "protocolStats":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_protocolStats(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&fs.Invalids, 1)
				}
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx,
					func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return rrm(innerCtx) })
		case "position":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_position(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&fs.Invalids, 1)
				}
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx,
					func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return rrm(innerCtx) })
		case "positions":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_positions(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&fs.Invalids, 1)
				}
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx,
					func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return rrm(innerCtx) })
		case "positionActivity":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_positionActivity(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&fs.Invalids, 1)
				}
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx,
					func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return rrm(innerCtx) })
		case "positionActivities":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_positionActivities(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&fs.Invalids, 1)
				}
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx,
					func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return rrm(innerCtx) })
		case "swapEvent":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_swapEvent(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&fs.Invalids, 1)
				}
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx,
					func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return rrm(innerCtx) })
		case "swapEvents":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_swapEvents(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&fs.Invalids, 1)
				}
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx,
					func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return rrm(innerCtx) })
		case "stableSwapStat":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_stableSwapStat(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&fs.Invalids, 1)
				}
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx,
					func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return rrm(innerCtx) })
		case "stableSwapStats":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_stableSwapStats(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&fs.Invalids, 1)
				}
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx,
					func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return rrm(innerCtx) })
		case "__type":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Query___type(ctx, field)
			})
		case "__schema":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Query___schema(ctx, field)
			})
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var stableSwapStatImplementors = []string{"StableSwapStat"}

func (ec *executionContext) _StableSwapStat(ctx context.Context, sel ast.SelectionSet, obj *ent.StableSwapStat) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, stableSwapStatImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("StableSwapStat")
		case "id":
			out.Values[i] = ec._StableSwapStat_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "totalTokenToStablecoinSwapEvents":
			out.Values[i] = ec._StableSwapStat_totalTokenToStablecoinSwapEvents(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "totalStablecoinToTokenSwapEvents":
			out.Values[i] = ec._StableSwapStat_totalStablecoinToTokenSwapEvents(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "remainingDailySwapAmount":
			out.Values[i] = ec._StableSwapStat_remainingDailySwapAmount(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "tokenToStablecoinTotalSwapValue":
			out.Values[i] = ec._StableSwapStat_tokenToStablecoinTotalSwapValue(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "stablecoinToTokenTotalSwapValue":
			out.Values[i] = ec._StableSwapStat_stablecoinToTokenTotalSwapValue(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var swapEventImplementors = []string{"SwapEvent"}

func (ec *executionContext) _SwapEvent(ctx context.Context, sel ast.SelectionSet, obj *ent.SwapEvent) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, swapEventImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("SwapEvent")
		case "id":
			out.Values[i] = ec._SwapEvent_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "fee":
			out.Values[i] = ec._SwapEvent_fee(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "owner":
			out.Values[i] = ec._SwapEvent_owner(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "value":
			out.Values[i] = ec._SwapEvent_value(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "isStablecoinToTokenSwap":
			out.Values[i] = ec._SwapEvent_isStablecoinToTokenSwap(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "isTokenToStablecoinSwap":
			out.Values[i] = ec._SwapEvent_isTokenToStablecoinSwap(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "blockNumber":
			out.Values[i] = ec._SwapEvent_blockNumber(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "blockTimestamp":
			out.Values[i] = ec._SwapEvent_blockTimestamp(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "transaction":
			out.Values[i] = ec._SwapEvent_transaction(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var userImplementors = []string{"User"}

func (ec *executionContext) _User(ctx context.Context, sel ast.SelectionSet, obj *ent.User) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, userImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("User")
		case "id":
			out.Values[i] = ec._User_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "address":
			out.Values[i] = ec._User_address(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "activePositionsCount":
			out.Values[i] = ec._User_activePositionsCount(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var __DirectiveImplementors = []string{"__Directive"}

func (ec *executionContext) ___Directive(ctx context.Context, sel ast.SelectionSet, obj *introspection.Directive) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, __DirectiveImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("__Directive")
		case "name":
			out.Values[i] = ec.___Directive_name(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "description":
			out.Values[i] = ec.___Directive_description(ctx, field, obj)
		case "isRepeatable":
			out.Values[i] = ec.___Directive_isRepeatable(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "locations":
			out.Values[i] = ec.___Directive_locations(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "args":
			out.Values[i] = ec.___Directive_args(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var __EnumValueImplementors = []string{"__EnumValue"}

func (ec *executionContext) ___EnumValue(ctx context.Context, sel ast.SelectionSet, obj *introspection.EnumValue) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, __EnumValueImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("__EnumValue")
		case "name":
			out.Values[i] = ec.___EnumValue_name(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "description":
			out.Values[i] = ec.___EnumValue_description(ctx, field, obj)
		case "isDeprecated":
			out.Values[i] = ec.___EnumValue_isDeprecated(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "deprecationReason":
			out.Values[i] = ec.___EnumValue_deprecationReason(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var __FieldImplementors = []string{"__Field"}

func (ec *executionContext) ___Field(ctx context.Context, sel ast.SelectionSet, obj *introspection.Field) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, __FieldImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("__Field")
		case "name":
			out.Values[i] = ec.___Field_name(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "description":
			out.Values[i] = ec.___Field_description(ctx, field, obj)
		case "args":
			out.Values[i] = ec.___Field_args(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "type":
			out.Values[i] = ec.___Field_type(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "isDeprecated":
			out.Values[i] = ec.___Field_isDeprecated(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "deprecationReason":
			out.Values[i] = ec.___Field_deprecationReason(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var __InputValueImplementors = []string{"__InputValue"}

func (ec *executionContext) ___InputValue(ctx context.Context, sel ast.SelectionSet, obj *introspection.InputValue) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, __InputValueImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("__InputValue")
		case "name":
			out.Values[i] = ec.___InputValue_name(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "description":
			out.Values[i] = ec.___InputValue_description(ctx, field, obj)
		case "type":
			out.Values[i] = ec.___InputValue_type(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "defaultValue":
			out.Values[i] = ec.___InputValue_defaultValue(ctx, field, obj)
		case "isDeprecated":
			out.Values[i] = ec.___InputValue_isDeprecated(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "deprecationReason":
			out.Values[i] = ec.___InputValue_deprecationReason(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var __SchemaImplementors = []string{"__Schema"}

func (ec *executionContext) ___Schema(ctx context.Context, sel ast.SelectionSet, obj *introspection.Schema) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, __SchemaImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("__Schema")
		case "description":
			out.Values[i] = ec.___Schema_description(ctx, field, obj)
		case "types":
			out.Values[i] = ec.___Schema_types(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "queryType":
			out.Values[i] = ec.___Schema_queryType(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "mutationType":
			out.Values[i] = ec.___Schema_mutationType(ctx, field, obj)
		case "subscriptionType":
			out.Values[i] = ec.___Schema_subscriptionType(ctx, field, obj)
		case "directives":
			out.Values[i] = ec.___Schema_directives(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var __TypeImplementors = []string{"__Type"}

func (ec *executionContext) ___Type(ctx context.Context, sel ast.SelectionSet, obj *introspection.Type) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, __TypeImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("__Type")
		case "kind":
			out.Values[i] = ec.___Type_kind(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "name":
			out.Values[i] = ec.___Type_name(ctx, field, obj)
		case "description":
			out.Values[i] = ec.___Type_description(ctx, field, obj)
		case "specifiedByURL":
			out.Values[i] = ec.___Type_specifiedByURL(ctx, field, obj)
		case "fields":
			out.Values[i] = ec.___Type_fields(ctx, field, obj)
		case "interfaces":
			out.Values[i] = ec.___Type_interfaces(ctx, field, obj)
		case "possibleTypes":
			out.Values[i] = ec.___Type_possibleTypes(ctx, field, obj)
		case "enumValues":
			out.Values[i] = ec.___Type_enumValues(ctx, field, obj)
		case "inputFields":
			out.Values[i] = ec.___Type_inputFields(ctx, field, obj)
		case "ofType":
			out.Values[i] = ec.___Type_ofType(ctx, field, obj)
		case "isOneOf":
			out.Values[i] = ec.___Type_isOneOf(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

// endregion **************************** object.gotpl ****************************

// region    ***************************** type.gotpl *****************************

func (ec *executionContext) marshalNBlock2ᚖgithubᚗcomᚋtsisarᚋstarknetᚑindexerᚋgraphqlᚋmodelᚐBlock(ctx context.Context, sel ast.SelectionSet, v *model.Block) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._Block(ctx, sel, v)
}

func (ec *executionContext) unmarshalNBoolean2bool(ctx context.Context, v any) (bool, error) {
	res, err := graphql.UnmarshalBoolean(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNBoolean2bool(ctx context.Context, sel ast.SelectionSet, v bool) graphql.Marshaler {
	_ = sel
	res := graphql.MarshalBoolean(v)
	if res == graphql.Null {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
	}
	return res
}

func (ec *executionContext) marshalNMeta2githubᚗcomᚋtsisarᚋstarknetᚑindexerᚋgraphqlᚋmodelᚐMeta(ctx context.Context, sel ast.SelectionSet, v model.Meta) graphql.Marshaler {
	return ec._Meta(ctx, sel, &v)
}

func (ec *executionContext) marshalNMeta2ᚖgithubᚗcomᚋtsisarᚋstarknetᚑindexerᚋgraphqlᚋmodelᚐMeta(ctx context.Context, sel ast.SelectionSet, v *model.Meta) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._Meta(ctx, sel, v)
}

func (ec *executionContext) unmarshalNOrderDirection2githubᚗcomᚋtsisarᚋstarknetᚑindexerᚋgraphqlᚋmodelᚐOrderDirection(ctx context.Context, v any) (model.OrderDirection, error) {
	var res model.OrderDirection
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNOrderDirection2githubᚗcomᚋtsisarᚋstarknetᚑindexerᚋgraphqlᚋmodelᚐOrderDirection(ctx context.Context, sel ast.SelectionSet, v model.OrderDirection) graphql.Marshaler {
	return v
}

func (ec *executionContext) marshalNPool2githubᚗcomᚋtsisarᚋstarknetᚑindexerᚋgeneratedᚋentᚐPool(ctx context.Context, sel ast.SelectionSet, v ent.Pool) graphql.Marshaler {
	return ec._Pool(ctx, sel, &v)
}

func (ec *executionContext) marshalNPool2ᚕᚖgithubᚗcomᚋtsisarᚋstarknetᚑindexerᚋgeneratedᚋentᚐPoolᚄ(ctx context.Context, sel ast.SelectionSet, v []*ent.Pool) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNPool2ᚖgithubᚗcomᚋtsisarᚋstarknetᚑindexerᚋgeneratedᚋentᚐPool(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalNPool2ᚖgithubᚗcomᚋtsisarᚋstarknetᚑindexerᚋgeneratedᚋentᚐPool(ctx context.Context, sel ast.SelectionSet, v *ent.Pool) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._Pool(ctx, sel, v)
}

func (ec *executionContext) unmarshalNPoolOrderField2githubᚗcomᚋtsisarᚋstarknetᚑindexerᚋgraphqlᚋmodelᚐPoolOrderField(ctx context.Context, v any) (model.PoolOrderField, error) {
	var res model.PoolOrderField
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNPoolOrderField2githubᚗcomᚋtsisarᚋstarknetᚑindexerᚋgraphqlᚋmodelᚐPoolOrderField(ctx context.Context, sel ast.SelectionSet, v model.PoolOrderField) graphql.Marshaler {
	return v
}

func (ec *executionContext) marshalNPosition2githubᚗcomᚋtsisarᚋstarknetᚑindexerᚋgeneratedᚋentᚐPosition(ctx context.Context, sel ast.SelectionSet, v ent.Position) graphql.Marshaler {
	return ec._Position(ctx, sel, &v)
}

func (ec *executionContext) marshalNPosition2ᚕᚖgithubᚗcomᚋtsisarᚋstarknetᚑindexerᚋgeneratedᚋentᚐPositionᚄ(ctx context.Context, sel ast.SelectionSet, v []*ent.Position) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNPosition2ᚖgithubᚗcomᚋtsisarᚋstarknetᚑindexerᚋgeneratedᚋentᚐPosition(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalNPosition2ᚖgithubᚗcomᚋtsisarᚋstarknetᚑindexerᚋgeneratedᚋentᚐPosition(ctx context.Context, sel ast.SelectionSet, v *ent.Position) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._Position(ctx, sel, v)
}

func (ec *executionContext) marshalNPositionActivity2githubᚗcomᚋtsisarᚋstarknetᚑindexerᚋgeneratedᚋentᚐPositionActivity(ctx context.Context, sel ast.SelectionSet, v ent.PositionActivity) graphql.Marshaler {
	return ec._PositionActivity(ctx, sel, &v)
}

func (ec *executionContext) marshalNPositionActivity2ᚕᚖgithubᚗcomᚋtsisarᚋstarknetᚑindexerᚋgeneratedᚋentᚐPositionActivityᚄ(ctx context.Context, sel ast.SelectionSet, v []*ent.PositionActivity) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNPositionActivity2ᚖgithubᚗcomᚋtsisarᚋstarknetᚑindexerᚋgeneratedᚋentᚐPositionActivity(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalNPositionActivity2ᚖgithubᚗcomᚋtsisarᚋstarknetᚑindexerᚋgeneratedᚋentᚐPositionActivity(ctx context.Context, sel ast.SelectionSet, v *ent.PositionActivity) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._PositionActivity(ctx, sel, v)
}

func (ec *executionContext) unmarshalNPositionActivityOrderField2githubᚗcomᚋtsisarᚋstarknetᚑindexerᚋgraphqlᚋmodelᚐPositionActivityOrderField(ctx context.Context, v any) (model.PositionActivityOrderField, error) {
	var res model.PositionActivityOrderField
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNPositionActivityOrderField2githubᚗcomᚋtsisarᚋstarknetᚑindexerᚋgraphqlᚋmodelᚐPositionActivityOrderField(ctx context.Context, sel ast.SelectionSet, v model.PositionActivityOrderField) graphql.Marshaler {
	return v
}

func (ec *executionContext) unmarshalNPositionActivityState2githubᚗcomᚋtsisarᚋstarknetᚑindexerᚋgraphqlᚋmodelᚐPositionActivityState(ctx context.Context, v any) (model.PositionActivityState, error) {
	var res model.PositionActivityState
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNPositionActivityState2githubᚗcomᚋtsisarᚋstarknetᚑindexerᚋgraphqlᚋmodelᚐPositionActivityState(ctx context.Context, sel ast.SelectionSet, v model.PositionActivityState) graphql.Marshaler {
	return v
}

func (ec *executionContext) unmarshalNPositionOrderField2githubᚗcomᚋtsisarᚋstarknetᚑindexerᚋgraphqlᚋmodelᚐPositionOrderField(ctx context.Context, v any) (model.PositionOrderField, error) {
	var res model.PositionOrderField
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNPositionOrderField2githubᚗcomᚋtsisarᚋstarknetᚑindexerᚋgraphqlᚋmodelᚐPositionOrderField(ctx context.Context, sel ast.SelectionSet, v model.PositionOrderField) graphql.Marshaler {
	return v
}

func (ec *executionContext) unmarshalNPositionStatus2githubᚗcomᚋtsisarᚋstarknetᚑindexerᚋgraphqlᚋmodelᚐPositionStatus(ctx context.Context, v any) (model.PositionStatus, error) {
	var res model.PositionStatus
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNPositionStatus2githubᚗcomᚋtsisarᚋstarknetᚑindexerᚋgraphqlᚋmodelᚐPositionStatus(ctx context.Context, sel ast.SelectionSet, v model.PositionStatus) graphql.Marshaler {
	return v
}

func (ec *executionContext) marshalNProtocolStat2githubᚗcomᚋtsisarᚋstarknetᚑindexerᚋgeneratedᚋentᚐProtocolStat(ctx context.Context, sel ast.SelectionSet, v ent.ProtocolStat) graphql.Marshaler {
	return ec._ProtocolStat(ctx, sel, &v)
}

func (ec *executionContext) marshalNProtocolStat2ᚕᚖgithubᚗcomᚋtsisarᚋstarknetᚑindexerᚋgeneratedᚋentᚐProtocolStatᚄ(ctx context.Context, sel ast.SelectionSet, v []*ent.ProtocolStat) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNProtocolStat2ᚖgithubᚗcomᚋtsisarᚋstarknetᚑindexerᚋgeneratedᚋentᚐProtocolStat(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalNProtocolStat2ᚖgithubᚗcomᚋtsisarᚋstarknetᚑindexerᚋgeneratedᚋentᚐProtocolStat(ctx context.Context, sel ast.SelectionSet, v *ent.ProtocolStat) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._ProtocolStat(ctx, sel, v)
}

func (ec *executionContext) unmarshalNProtocolStatOrderField2githubᚗcomᚋtsisarᚋstarknetᚑindexerᚋgraphqlᚋmodelᚐProtocolStatOrderField(ctx context.Context, v any) (model.ProtocolStatOrderField, error) {
	var res model.ProtocolStatOrderField
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNProtocolStatOrderField2githubᚗcomᚋtsisarᚋstarknetᚑindexerᚋgraphqlᚋmodelᚐProtocolStatOrderField(ctx context.Context, sel ast.SelectionSet, v model.ProtocolStatOrderField) graphql.Marshaler {
	return v
}

func (ec *executionContext) marshalNStableSwapStat2githubᚗcomᚋtsisarᚋstarknetᚑindexerᚋgeneratedᚋentᚐStableSwapStat(ctx context.Context, sel ast.SelectionSet, v ent.StableSwapStat) graphql.Marshaler {
	return ec._StableSwapStat(ctx, sel, &v)
}

func (ec *executionContext) marshalNStableSwapStat2ᚕᚖgithubᚗcomᚋtsisarᚋstarknetᚑindexerᚋgeneratedᚋentᚐStableSwapStatᚄ(ctx context.Context, sel ast.SelectionSet, v []*ent.StableSwapStat) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNStableSwapStat2ᚖgithubᚗcomᚋtsisarᚋstarknetᚑindexerᚋgeneratedᚋentᚐStableSwapStat(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalNStableSwapStat2ᚖgithubᚗcomᚋtsisarᚋstarknetᚑindexerᚋgeneratedᚋentᚐStableSwapStat(ctx context.Context, sel ast.SelectionSet, v *ent.StableSwapStat) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._StableSwapStat(ctx, sel, v)
}

func (ec *executionContext) unmarshalNStableSwapStatOrderField2githubᚗcomᚋtsisarᚋstarknetᚑindexerᚋgraphqlᚋmodelᚐStableSwapStatOrderField(ctx context.Context, v any) (model.StableSwapStatOrderField, error) {
	var res model.StableSwapStatOrderField
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNStableSwapStatOrderField2githubᚗcomᚋtsisarᚋstarknetᚑindexerᚋgraphqlᚋmodelᚐStableSwapStatOrderField(ctx context.Context, sel ast.SelectionSet, v model.StableSwapStatOrderField) graphql.Marshaler {
	return v
}

func (ec *executionContext) unmarshalNString2string(ctx context.Context, v any) (string, error) {
	res, err := graphql.UnmarshalString(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNString2string(ctx context.Context, sel ast.SelectionSet, v string) graphql.Marshaler {
	_ = sel
	res := graphql.MarshalString(v)
	if res == graphql.Null {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
	}
	return res
}

func (ec *executionContext) unmarshalNString2ᚕstringᚄ(ctx context.Context, v any) ([]string, error) {
	var vSlice []any
	vSlice = graphql.CoerceList(v)
	var err error
	res := make([]string, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNString2string(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) marshalNString2ᚕstringᚄ(ctx context.Context, sel ast.SelectionSet, v []string) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	for i := range v {
		ret[i] = ec.marshalNString2string(ctx, sel, v[i])
	}

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalNSwapEvent2githubᚗcomᚋtsisarᚋstarknetᚑindexerᚋgeneratedᚋentᚐSwapEvent(ctx context.Context, sel ast.SelectionSet, v ent.SwapEvent) graphql.Marshaler {
	return ec._SwapEvent(ctx, sel, &v)
}

func (ec *executionContext) marshalNSwapEvent2ᚕᚖgithubᚗcomᚋtsisarᚋstarknetᚑindexerᚋgeneratedᚋentᚐSwapEventᚄ(ctx context.Context, sel ast.SelectionSet, v []*ent.SwapEvent) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNSwapEvent2ᚖgithubᚗcomᚋtsisarᚋstarknetᚑindexerᚋgeneratedᚋentᚐSwapEvent(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalNSwapEvent2ᚖgithubᚗcomᚋtsisarᚋstarknetᚑindexerᚋgeneratedᚋentᚐSwapEvent(ctx context.Context, sel ast.SelectionSet, v *ent.SwapEvent) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._SwapEvent(ctx, sel, v)
}

func (ec *executionContext) unmarshalNSwapEventOrderField2githubᚗcomᚋtsisarᚋstarknetᚑindexerᚋgraphqlᚋmodelᚐSwapEventOrderField(ctx context.Context, v any) (model.SwapEventOrderField, error) {
	var res model.SwapEventOrderField
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNSwapEventOrderField2githubᚗcomᚋtsisarᚋstarknetᚑindexerᚋgraphqlᚋmodelᚐSwapEventOrderField(ctx context.Context, sel ast.SelectionSet, v model.SwapEventOrderField) graphql.Marshaler {
	return v
}

func (ec *executionContext) marshalNUser2githubᚗcomᚋtsisarᚋstarknetᚑindexerᚋgeneratedᚋentᚐUser(ctx context.Context, sel ast.SelectionSet, v ent.User) graphql.Marshaler {
	return ec._User(ctx, sel, &v)
}

func (ec *executionContext) marshalNUser2ᚕᚖgithubᚗcomᚋtsisarᚋstarknetᚑindexerᚋgeneratedᚋentᚐUserᚄ(ctx context.Context, sel ast.SelectionSet, v []*ent.User) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNUser2ᚖgithubᚗcomᚋtsisarᚋstarknetᚑindexerᚋgeneratedᚋentᚐUser(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalNUser2ᚖgithubᚗcomᚋtsisarᚋstarknetᚑindexerᚋgeneratedᚋentᚐUser(ctx context.Context, sel ast.SelectionSet, v *ent.User) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._User(ctx, sel, v)
}

func (ec *executionContext) unmarshalNUserOrderField2githubᚗcomᚋtsisarᚋstarknetᚑindexerᚋgraphqlᚋmodelᚐUserOrderField(ctx context.Context, v any) (model.UserOrderField, error) {
	var res model.UserOrderField
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNUserOrderField2githubᚗcomᚋtsisarᚋstarknetᚑindexerᚋgraphqlᚋmodelᚐUserOrderField(ctx context.Context, sel ast.SelectionSet, v model.UserOrderField) graphql.Marshaler {
	return v
}

func (ec *executionContext) marshalN__Directive2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐDirective(ctx context.Context, sel ast.SelectionSet, v introspection.Directive) graphql.Marshaler {
	return ec.___Directive(ctx, sel, &v)
}

func (ec *executionContext) marshalN__Directive2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐDirectiveᚄ(ctx context.Context, sel ast.SelectionSet, v []introspection.Directive) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalN__Directive2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐDirective(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) unmarshalN__DirectiveLocation2string(ctx context.Context, v any) (string, error) {
	res, err := graphql.UnmarshalString(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalN__DirectiveLocation2string(ctx context.Context, sel ast.SelectionSet, v string) graphql.Marshaler {
	_ = sel
	res := graphql.MarshalString(v)
	if res == graphql.Null {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
	}
	return res
}

func (ec *executionContext) unmarshalN__DirectiveLocation2ᚕstringᚄ(ctx context.Context, v any) ([]string, error) {
	var vSlice []any
	vSlice = graphql.CoerceList(v)
	var err error
	res := make([]string, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalN__DirectiveLocation2string(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) marshalN__DirectiveLocation2ᚕstringᚄ(ctx context.Context, sel ast.SelectionSet, v []string) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalN__DirectiveLocation2string(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalN__EnumValue2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐEnumValue(ctx context.Context, sel ast.SelectionSet, v introspection.EnumValue) graphql.Marshaler {
	return ec.___EnumValue(ctx, sel, &v)
}

func (ec *executionContext) marshalN__Field2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐField(ctx context.Context, sel ast.SelectionSet, v introspection.Field) graphql.Marshaler {
	return ec.___Field(ctx, sel, &v)
}

func (ec *executionContext) marshalN__InputValue2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐInputValue(ctx context.Context, sel ast.SelectionSet, v introspection.InputValue) graphql.Marshaler {
	return ec.___InputValue(ctx, sel, &v)
}

func (ec *executionContext) marshalN__InputValue2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐInputValueᚄ(ctx context.Context, sel ast.SelectionSet, v []introspection.InputValue) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalN__InputValue2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐInputValue(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalN__Type2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx context.Context, sel ast.SelectionSet, v introspection.Type) graphql.Marshaler {
	return ec.___Type(ctx, sel, &v)
}

func (ec *executionContext) marshalN__Type2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐTypeᚄ(ctx context.Context, sel ast.SelectionSet, v []introspection.Type) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalN__Type2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalN__Type2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx context.Context, sel ast.SelectionSet, v *introspection.Type) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec.___Type(ctx, sel, v)
}

func (ec *executionContext) unmarshalN__TypeKind2string(ctx context.Context, v any) (string, error) {
	res, err := graphql.UnmarshalString(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalN__TypeKind2string(ctx context.Context, sel ast.SelectionSet, v string) graphql.Marshaler {
	_ = sel
	res := graphql.MarshalString(v)
	if res == graphql.Null {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
	}
	return res
}

func (ec *executionContext) unmarshalOBoolean2bool(ctx context.Context, v any) (bool, error) {
	res, err := graphql.UnmarshalBoolean(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOBoolean2bool(ctx context.Context, sel ast.SelectionSet, v bool) graphql.Marshaler {
	_ = sel
	_ = ctx
	res := graphql.MarshalBoolean(v)
	return res
}

func (ec *executionContext) unmarshalOBoolean2ᚕboolᚄ(ctx context.Context, v any) ([]bool, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []any
	vSlice = graphql.CoerceList(v)
	var err error
	res := make([]bool, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNBoolean2bool(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) marshalOBoolean2ᚕboolᚄ(ctx context.Context, sel ast.SelectionSet, v []bool) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	for i := range v {
		ret[i] = ec.marshalNBoolean2bool(ctx, sel, v[i])
	}

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) unmarshalOBoolean2ᚖbool(ctx context.Context, v any) (*bool, error) {
	if v == nil {
		return nil, nil
	}
	res, err := graphql.UnmarshalBoolean(v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOBoolean2ᚖbool(ctx context.Context, sel ast.SelectionSet, v *bool) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	_ = sel
	_ = ctx
	res := graphql.MarshalBoolean(*v)
	return res
}

func (ec *executionContext) unmarshalOID2ᚖstring(ctx context.Context, v any) (*string, error) {
	if v == nil {
		return nil, nil
	}
	res, err := graphql.UnmarshalID(v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOID2ᚖstring(ctx context.Context, sel ast.SelectionSet, v *string) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	_ = sel
	_ = ctx
	res := graphql.MarshalID(*v)
	return res
}

func (ec *executionContext) unmarshalOInt2ᚖint32(ctx context.Context, v any) (*int32, error) {
	if v == nil {
		return nil, nil
	}
	res, err := graphql.UnmarshalInt32(v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOInt2ᚖint32(ctx context.Context, sel ast.SelectionSet, v *int32) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	_ = sel
	_ = ctx
	res := graphql.MarshalInt32(*v)
	return res
}

func (ec *executionContext) unmarshalOPoolOrderBy2ᚖgithubᚗcomᚋtsisarᚋstarknetᚑindexerᚋgraphqlᚋmodelᚐPoolOrderBy(ctx context.Context, v any) (*model.PoolOrderBy, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputPoolOrderBy(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalOPoolWhereInput2ᚖgithubᚗcomᚋtsisarᚋstarknetᚑindexerᚋgraphqlᚋmodelᚐPoolWhereInput(ctx context.Context, v any) (*model.PoolWhereInput, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputPoolWhereInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalOPositionActivityOrderBy2ᚖgithubᚗcomᚋtsisarᚋstarknetᚑindexerᚋgraphqlᚋmodelᚐPositionActivityOrderBy(ctx context.Context, v any) (*model.PositionActivityOrderBy, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputPositionActivityOrderBy(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalOPositionActivityState2ᚕgithubᚗcomᚋtsisarᚋstarknetᚑindexerᚋgraphqlᚋmodelᚐPositionActivityStateᚄ(ctx context.Context, v any) ([]model.PositionActivityState, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []any
	vSlice = graphql.CoerceList(v)
	var err error
	res := make([]model.PositionActivityState, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNPositionActivityState2githubᚗcomᚋtsisarᚋstarknetᚑindexerᚋgraphqlᚋmodelᚐPositionActivityState(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) marshalOPositionActivityState2ᚕgithubᚗcomᚋtsisarᚋstarknetᚑindexerᚋgraphqlᚋmodelᚐPositionActivityStateᚄ(ctx context.Context, sel ast.SelectionSet, v []model.PositionActivityState) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNPositionActivityState2githubᚗcomᚋtsisarᚋstarknetᚑindexerᚋgraphqlᚋmodelᚐPositionActivityState(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) unmarshalOPositionActivityState2ᚖgithubᚗcomᚋtsisarᚋstarknetᚑindexerᚋgraphqlᚋmodelᚐPositionActivityState(ctx context.Context, v any) (*model.PositionActivityState, error) {
	if v == nil {
		return nil, nil
	}
	var res = new(model.PositionActivityState)
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOPositionActivityState2ᚖgithubᚗcomᚋtsisarᚋstarknetᚑindexerᚋgraphqlᚋmodelᚐPositionActivityState(ctx context.Context, sel ast.SelectionSet, v *model.PositionActivityState) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return v
}

func (ec *executionContext) unmarshalOPositionActivityWhereInput2ᚖgithubᚗcomᚋtsisarᚋstarknetᚑindexerᚋgraphqlᚋmodelᚐPositionActivityWhereInput(ctx context.Context, v any) (*model.PositionActivityWhereInput, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputPositionActivityWhereInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalOPositionOrderBy2ᚖgithubᚗcomᚋtsisarᚋstarknetᚑindexerᚋgraphqlᚋmodelᚐPositionOrderBy(ctx context.Context, v any) (*model.PositionOrderBy, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputPositionOrderBy(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalOPositionStatus2ᚕgithubᚗcomᚋtsisarᚋstarknetᚑindexerᚋgraphqlᚋmodelᚐPositionStatusᚄ(ctx context.Context, v any) ([]model.PositionStatus, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []any
	vSlice = graphql.CoerceList(v)
	var err error
	res := make([]model.PositionStatus, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNPositionStatus2githubᚗcomᚋtsisarᚋstarknetᚑindexerᚋgraphqlᚋmodelᚐPositionStatus(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) marshalOPositionStatus2ᚕgithubᚗcomᚋtsisarᚋstarknetᚑindexerᚋgraphqlᚋmodelᚐPositionStatusᚄ(ctx context.Context, sel ast.SelectionSet, v []model.PositionStatus) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNPositionStatus2githubᚗcomᚋtsisarᚋstarknetᚑindexerᚋgraphqlᚋmodelᚐPositionStatus(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) unmarshalOPositionStatus2ᚖgithubᚗcomᚋtsisarᚋstarknetᚑindexerᚋgraphqlᚋmodelᚐPositionStatus(ctx context.Context, v any) (*model.PositionStatus, error) {
	if v == nil {
		return nil, nil
	}
	var res = new(model.PositionStatus)
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOPositionStatus2ᚖgithubᚗcomᚋtsisarᚋstarknetᚑindexerᚋgraphqlᚋmodelᚐPositionStatus(ctx context.Context, sel ast.SelectionSet, v *model.PositionStatus) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return v
}

func (ec *executionContext) unmarshalOPositionWhereInput2ᚖgithubᚗcomᚋtsisarᚋstarknetᚑindexerᚋgraphqlᚋmodelᚐPositionWhereInput(ctx context.Context, v any) (*model.PositionWhereInput, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputPositionWhereInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalOProtocolStatOrderBy2ᚖgithubᚗcomᚋtsisarᚋstarknetᚑindexerᚋgraphqlᚋmodelᚐProtocolStatOrderBy(ctx context.Context, v any) (*model.ProtocolStatOrderBy, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputProtocolStatOrderBy(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalOProtocolStatWhereInput2ᚖgithubᚗcomᚋtsisarᚋstarknetᚑindexerᚋgraphqlᚋmodelᚐProtocolStatWhereInput(ctx context.Context, v any) (*model.ProtocolStatWhereInput, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputProtocolStatWhereInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalOStableSwapStatOrderBy2ᚖgithubᚗcomᚋtsisarᚋstarknetᚑindexerᚋgraphqlᚋmodelᚐStableSwapStatOrderBy(ctx context.Context, v any) (*model.StableSwapStatOrderBy, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputStableSwapStatOrderBy(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalOStableSwapStatWhereInput2ᚖgithubᚗcomᚋtsisarᚋstarknetᚑindexerᚋgraphqlᚋmodelᚐStableSwapStatWhereInput(ctx context.Context, v any) (*model.StableSwapStatWhereInput, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputStableSwapStatWhereInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalOString2ᚕstringᚄ(ctx context.Context, v any) ([]string, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []any
	vSlice = graphql.CoerceList(v)
	var err error
	res := make([]string, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNString2string(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) marshalOString2ᚕstringᚄ(ctx context.Context, sel ast.SelectionSet, v []string) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	for i := range v {
		ret[i] = ec.marshalNString2string(ctx, sel, v[i])
	}

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) unmarshalOString2ᚖstring(ctx context.Context, v any) (*string, error) {
	if v == nil {
		return nil, nil
	}
	res, err := graphql.UnmarshalString(v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOString2ᚖstring(ctx context.Context, sel ast.SelectionSet, v *string) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	_ = sel
	_ = ctx
	res := graphql.MarshalString(*v)
	return res
}

func (ec *executionContext) unmarshalOSwapEventOrderBy2ᚖgithubᚗcomᚋtsisarᚋstarknetᚑindexerᚋgraphqlᚋmodelᚐSwapEventOrderBy(ctx context.Context, v any) (*model.SwapEventOrderBy, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputSwapEventOrderBy(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalOSwapEventWhereInput2ᚖgithubᚗcomᚋtsisarᚋstarknetᚑindexerᚋgraphqlᚋmodelᚐSwapEventWhereInput(ctx context.Context, v any) (*model.SwapEventWhereInput, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputSwapEventWhereInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalOUserOrderBy2ᚖgithubᚗcomᚋtsisarᚋstarknetᚑindexerᚋgraphqlᚋmodelᚐUserOrderBy(ctx context.Context, v any) (*model.UserOrderBy, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputUserOrderBy(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalOUserWhereInput2ᚖgithubᚗcomᚋtsisarᚋstarknetᚑindexerᚋgraphqlᚋmodelᚐUserWhereInput(ctx context.Context, v any) (*model.UserWhereInput, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputUserWhereInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalO__EnumValue2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐEnumValueᚄ(ctx context.Context, sel ast.SelectionSet, v []introspection.EnumValue) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalN__EnumValue2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐEnumValue(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalO__Field2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐFieldᚄ(ctx context.Context, sel ast.SelectionSet, v []introspection.Field) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalN__Field2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐField(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalO__InputValue2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐInputValueᚄ(ctx context.Context, sel ast.SelectionSet, v []introspection.InputValue) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalN__InputValue2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐInputValue(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalO__Schema2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐSchema(ctx context.Context, sel ast.SelectionSet, v *introspection.Schema) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec.___Schema(ctx, sel, v)
}

func (ec *executionContext) marshalO__Type2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐTypeᚄ(ctx context.Context, sel ast.SelectionSet, v []introspection.Type) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalN__Type2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalO__Type2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx context.Context, sel ast.SelectionSet, v *introspection.Type) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec.___Type(ctx, sel, v)
}

// endregion ***************************** type.gotpl *****************************
