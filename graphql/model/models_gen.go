// Code generated by github.com/99designs/gqlgen, DO NOT EDIT.

package model

import (
	"bytes"
	"fmt"
	"io"
	"strconv"
)

type Block struct {
	Hash       string `json:"hash"`
	Number     string `json:"number"`
	ParentHash string `json:"parentHash"`
	Timestamp  string `json:"timestamp"`
}

type Meta struct {
	Block             *Block `json:"block"`
	Deployment        string `json:"deployment"`
	HasIndexingErrors string `json:"hasIndexingErrors"`
}

type PoolOrderBy struct {
	Field     PoolOrderField `json:"field"`
	Direction OrderDirection `json:"direction"`
}

type PoolWhereInput struct {
	ID                         *string  `json:"id,omitempty"`
	IDNot                      *string  `json:"id_not,omitempty"`
	IDIn                       []string `json:"id_in,omitempty"`
	IDNotIn                    []string `json:"id_not_in,omitempty"`
	PoolName                   *string  `json:"poolName,omitempty"`
	PoolNameNot                *string  `json:"poolName_not,omitempty"`
	PoolNameIn                 []string `json:"poolName_in,omitempty"`
	PoolNameNotIn              []string `json:"poolName_not_in,omitempty"`
	DebtCeiling                *string  `json:"debtCeiling,omitempty"`
	DebtCeilingNot             *string  `json:"debtCeiling_not,omitempty"`
	DebtCeilingIn              []string `json:"debtCeiling_in,omitempty"`
	DebtCeilingNotIn           []string `json:"debtCeiling_not_in,omitempty"`
	LiquidationRatio           *string  `json:"liquidationRatio,omitempty"`
	LiquidationRatioNot        *string  `json:"liquidationRatio_not,omitempty"`
	LiquidationRatioIn         []string `json:"liquidationRatio_in,omitempty"`
	LiquidationRatioNotIn      []string `json:"liquidationRatio_not_in,omitempty"`
	StabilityFeeRate           *string  `json:"stabilityFeeRate,omitempty"`
	StabilityFeeRateNot        *string  `json:"stabilityFeeRate_not,omitempty"`
	StabilityFeeRateIn         []string `json:"stabilityFeeRate_in,omitempty"`
	StabilityFeeRateNotIn      []string `json:"stabilityFeeRate_not_in,omitempty"`
	TokenAdapterAddress        *string  `json:"tokenAdapterAddress,omitempty"`
	TokenAdapterAddressNot     *string  `json:"tokenAdapterAddress_not,omitempty"`
	TokenAdapterAddressIn      []string `json:"tokenAdapterAddress_in,omitempty"`
	TokenAdapterAddressNotIn   []string `json:"tokenAdapterAddress_not_in,omitempty"`
	LockedCollateral           *string  `json:"lockedCollateral,omitempty"`
	LockedCollateralNot        *string  `json:"lockedCollateral_not,omitempty"`
	LockedCollateralIn         []string `json:"lockedCollateral_in,omitempty"`
	LockedCollateralNotIn      []string `json:"lockedCollateral_not_in,omitempty"`
	CollateralPrice            *string  `json:"collateralPrice,omitempty"`
	CollateralPriceNot         *string  `json:"collateralPrice_not,omitempty"`
	CollateralPriceIn          []string `json:"collateralPrice_in,omitempty"`
	CollateralPriceNotIn       []string `json:"collateralPrice_not_in,omitempty"`
	CollateralLastPrice        *string  `json:"collateralLastPrice,omitempty"`
	CollateralLastPriceNot     *string  `json:"collateralLastPrice_not,omitempty"`
	CollateralLastPriceIn      []string `json:"collateralLastPrice_in,omitempty"`
	CollateralLastPriceNotIn   []string `json:"collateralLastPrice_not_in,omitempty"`
	PriceWithSafetyMargin      *string  `json:"priceWithSafetyMargin,omitempty"`
	PriceWithSafetyMarginNot   *string  `json:"priceWithSafetyMargin_not,omitempty"`
	PriceWithSafetyMarginIn    []string `json:"priceWithSafetyMargin_in,omitempty"`
	PriceWithSafetyMarginNotIn []string `json:"priceWithSafetyMargin_not_in,omitempty"`
	RawPrice                   *string  `json:"rawPrice,omitempty"`
	RawPriceNot                *string  `json:"rawPrice_not,omitempty"`
	RawPriceIn                 []string `json:"rawPrice_in,omitempty"`
	RawPriceNotIn              []string `json:"rawPrice_not_in,omitempty"`
	DebtAccumulatedRate        *string  `json:"debtAccumulatedRate,omitempty"`
	DebtAccumulatedRateNot     *string  `json:"debtAccumulatedRate_not,omitempty"`
	DebtAccumulatedRateIn      []string `json:"debtAccumulatedRate_in,omitempty"`
	DebtAccumulatedRateNotIn   []string `json:"debtAccumulatedRate_not_in,omitempty"`
	TotalBorrowed              *string  `json:"totalBorrowed,omitempty"`
	TotalBorrowedNot           *string  `json:"totalBorrowed_not,omitempty"`
	TotalBorrowedIn            []string `json:"totalBorrowed_in,omitempty"`
	TotalBorrowedNotIn         []string `json:"totalBorrowed_not_in,omitempty"`
	TotalAvailable             *string  `json:"totalAvailable,omitempty"`
	TotalAvailableNot          *string  `json:"totalAvailable_not,omitempty"`
	TotalAvailableIn           []string `json:"totalAvailable_in,omitempty"`
	TotalAvailableNotIn        []string `json:"totalAvailable_not_in,omitempty"`
	Tvl                        *string  `json:"tvl,omitempty"`
	TvlNot                     *string  `json:"tvl_not,omitempty"`
	TvlIn                      []string `json:"tvl_in,omitempty"`
	TvlNotIn                   []string `json:"tvl_not_in,omitempty"`
}

type PositionActivityOrderBy struct {
	Field     PositionActivityOrderField `json:"field"`
	Direction OrderDirection             `json:"direction"`
}

type PositionActivityWhereInput struct {
	ID                    *string                 `json:"id,omitempty"`
	IDNot                 *string                 `json:"id_not,omitempty"`
	IDIn                  []string                `json:"id_in,omitempty"`
	IDNotIn               []string                `json:"id_not_in,omitempty"`
	Position              *PositionWhereInput     `json:"position,omitempty"`
	ActivityState         *PositionActivityState  `json:"activityState,omitempty"`
	ActivityStateNot      *PositionActivityState  `json:"activityState_not,omitempty"`
	ActivityStateIn       []PositionActivityState `json:"activityState_in,omitempty"`
	ActivityStateNotIn    []PositionActivityState `json:"activityState_not_in,omitempty"`
	CollateralAmount      *string                 `json:"collateralAmount,omitempty"`
	CollateralAmountNot   *string                 `json:"collateralAmount_not,omitempty"`
	CollateralAmountIn    []string                `json:"collateralAmount_in,omitempty"`
	CollateralAmountNotIn []string                `json:"collateralAmount_not_in,omitempty"`
	DebtAmount            *string                 `json:"debtAmount,omitempty"`
	DebtAmountNot         *string                 `json:"debtAmount_not,omitempty"`
	DebtAmountIn          []string                `json:"debtAmount_in,omitempty"`
	DebtAmountNotIn       []string                `json:"debtAmount_not_in,omitempty"`
	BlockNumber           *string                 `json:"blockNumber,omitempty"`
	BlockNumberNot        *string                 `json:"blockNumber_not,omitempty"`
	BlockNumberIn         []string                `json:"blockNumber_in,omitempty"`
	BlockNumberNotIn      []string                `json:"blockNumber_not_in,omitempty"`
	BlockTimestamp        *string                 `json:"blockTimestamp,omitempty"`
	BlockTimestampNot     *string                 `json:"blockTimestamp_not,omitempty"`
	BlockTimestampIn      []string                `json:"blockTimestamp_in,omitempty"`
	BlockTimestampNotIn   []string                `json:"blockTimestamp_not_in,omitempty"`
	Transaction           *string                 `json:"transaction,omitempty"`
	TransactionNot        *string                 `json:"transaction_not,omitempty"`
	TransactionIn         []string                `json:"transaction_in,omitempty"`
	TransactionNotIn      []string                `json:"transaction_not_in,omitempty"`
}

type PositionOrderBy struct {
	Field     PositionOrderField `json:"field"`
	Direction OrderDirection     `json:"direction"`
}

type PositionWhereInput struct {
	ID                         *string          `json:"id,omitempty"`
	IDNot                      *string          `json:"id_not,omitempty"`
	IDIn                       []string         `json:"id_in,omitempty"`
	IDNotIn                    []string         `json:"id_not_in,omitempty"`
	PositionAddress            *string          `json:"positionAddress,omitempty"`
	PositionAddressNot         *string          `json:"positionAddress_not,omitempty"`
	PositionAddressIn          []string         `json:"positionAddress_in,omitempty"`
	PositionAddressNotIn       []string         `json:"positionAddress_not_in,omitempty"`
	UserAddress                *string          `json:"userAddress,omitempty"`
	UserAddressNot             *string          `json:"userAddress_not,omitempty"`
	UserAddressIn              []string         `json:"userAddress_in,omitempty"`
	UserAddressNotIn           []string         `json:"userAddress_not_in,omitempty"`
	WalletAddress              *string          `json:"walletAddress,omitempty"`
	WalletAddressNot           *string          `json:"walletAddress_not,omitempty"`
	WalletAddressIn            []string         `json:"walletAddress_in,omitempty"`
	WalletAddressNotIn         []string         `json:"walletAddress_not_in,omitempty"`
	CollateralPool             *string          `json:"collateralPool,omitempty"`
	CollateralPoolNot          *string          `json:"collateralPool_not,omitempty"`
	CollateralPoolIn           []string         `json:"collateralPool_in,omitempty"`
	CollateralPoolNotIn        []string         `json:"collateralPool_not_in,omitempty"`
	CollateralPoolName         *string          `json:"collateralPoolName,omitempty"`
	CollateralPoolNameNot      *string          `json:"collateralPoolName_not,omitempty"`
	CollateralPoolNameIn       []string         `json:"collateralPoolName_in,omitempty"`
	CollateralPoolNameNotIn    []string         `json:"collateralPoolName_not_in,omitempty"`
	PositionID                 *string          `json:"positionId,omitempty"`
	PositionIDNot              *string          `json:"positionId_not,omitempty"`
	PositionIDIn               []string         `json:"positionId_in,omitempty"`
	PositionIDNotIn            []string         `json:"positionId_not_in,omitempty"`
	LockedCollateral           *string          `json:"lockedCollateral,omitempty"`
	LockedCollateralNot        *string          `json:"lockedCollateral_not,omitempty"`
	LockedCollateralIn         []string         `json:"lockedCollateral_in,omitempty"`
	LockedCollateralNotIn      []string         `json:"lockedCollateral_not_in,omitempty"`
	DebtValue                  *string          `json:"debtValue,omitempty"`
	DebtValueNot               *string          `json:"debtValue_not,omitempty"`
	DebtValueIn                []string         `json:"debtValue_in,omitempty"`
	DebtValueNotIn             []string         `json:"debtValue_not_in,omitempty"`
	DebtShare                  *string          `json:"debtShare,omitempty"`
	DebtShareNot               *string          `json:"debtShare_not,omitempty"`
	DebtShareIn                []string         `json:"debtShare_in,omitempty"`
	DebtShareNotIn             []string         `json:"debtShare_not_in,omitempty"`
	SafetyBuffer               *string          `json:"safetyBuffer,omitempty"`
	SafetyBufferNot            *string          `json:"safetyBuffer_not,omitempty"`
	SafetyBufferIn             []string         `json:"safetyBuffer_in,omitempty"`
	SafetyBufferNotIn          []string         `json:"safetyBuffer_not_in,omitempty"`
	SafetyBufferInPercent      *string          `json:"safetyBufferInPercent,omitempty"`
	SafetyBufferInPercentNot   *string          `json:"safetyBufferInPercent_not,omitempty"`
	SafetyBufferInPercentIn    []string         `json:"safetyBufferInPercent_in,omitempty"`
	SafetyBufferInPercentNotIn []string         `json:"safetyBufferInPercent_not_in,omitempty"`
	Tvl                        *string          `json:"tvl,omitempty"`
	TvlNot                     *string          `json:"tvl_not,omitempty"`
	TvlIn                      []string         `json:"tvl_in,omitempty"`
	TvlNotIn                   []string         `json:"tvl_not_in,omitempty"`
	PositionStatus             *PositionStatus  `json:"positionStatus,omitempty"`
	PositionStatusNot          *PositionStatus  `json:"positionStatus_not,omitempty"`
	PositionStatusIn           []PositionStatus `json:"positionStatus_in,omitempty"`
	PositionStatusNotIn        []PositionStatus `json:"positionStatus_not_in,omitempty"`
	LiquidationCount           *string          `json:"liquidationCount,omitempty"`
	LiquidationCountNot        *string          `json:"liquidationCount_not,omitempty"`
	LiquidationCountIn         []string         `json:"liquidationCount_in,omitempty"`
	LiquidationCountNotIn      []string         `json:"liquidationCount_not_in,omitempty"`
	BlockNumber                *string          `json:"blockNumber,omitempty"`
	BlockNumberNot             *string          `json:"blockNumber_not,omitempty"`
	BlockNumberIn              []string         `json:"blockNumber_in,omitempty"`
	BlockNumberNotIn           []string         `json:"blockNumber_not_in,omitempty"`
	BlockTimestamp             *string          `json:"blockTimestamp,omitempty"`
	BlockTimestampNot          *string          `json:"blockTimestamp_not,omitempty"`
	BlockTimestampIn           []string         `json:"blockTimestamp_in,omitempty"`
	BlockTimestampNotIn        []string         `json:"blockTimestamp_not_in,omitempty"`
	Transaction                *string          `json:"transaction,omitempty"`
	TransactionNot             *string          `json:"transaction_not,omitempty"`
	TransactionIn              []string         `json:"transaction_in,omitempty"`
	TransactionNotIn           []string         `json:"transaction_not_in,omitempty"`
	Pool                       *PoolWhereInput  `json:"pool,omitempty"`
}

type ProtocolStatOrderBy struct {
	Field     ProtocolStatOrderField `json:"field"`
	Direction OrderDirection         `json:"direction"`
}

type ProtocolStatWhereInput struct {
	ID               *string  `json:"id,omitempty"`
	IDNot            *string  `json:"id_not,omitempty"`
	IDIn             []string `json:"id_in,omitempty"`
	IDNotIn          []string `json:"id_not_in,omitempty"`
	TotalSupply      *string  `json:"totalSupply,omitempty"`
	TotalSupplyNot   *string  `json:"totalSupply_not,omitempty"`
	TotalSupplyIn    []string `json:"totalSupply_in,omitempty"`
	TotalSupplyNotIn []string `json:"totalSupply_not_in,omitempty"`
	Tvl              *string  `json:"tvl,omitempty"`
	TvlNot           *string  `json:"tvl_not,omitempty"`
	TvlIn            []string `json:"tvl_in,omitempty"`
	TvlNotIn         []string `json:"tvl_not_in,omitempty"`
}

type Query struct {
}

type StableSwapStatOrderBy struct {
	Field     StableSwapStatOrderField `json:"field"`
	Direction OrderDirection           `json:"direction"`
}

type StableSwapStatWhereInput struct {
	ID                                    *string  `json:"id,omitempty"`
	IDNot                                 *string  `json:"id_not,omitempty"`
	IDIn                                  []string `json:"id_in,omitempty"`
	IDNotIn                               []string `json:"id_not_in,omitempty"`
	TotalTokenToStablecoinSwapEvents      *string  `json:"totalTokenToStablecoinSwapEvents,omitempty"`
	TotalTokenToStablecoinSwapEventsNot   *string  `json:"totalTokenToStablecoinSwapEvents_not,omitempty"`
	TotalTokenToStablecoinSwapEventsIn    []string `json:"totalTokenToStablecoinSwapEvents_in,omitempty"`
	TotalTokenToStablecoinSwapEventsNotIn []string `json:"totalTokenToStablecoinSwapEvents_not_in,omitempty"`
	TotalStablecoinToTokenSwapEvents      *string  `json:"totalStablecoinToTokenSwapEvents,omitempty"`
	TotalStablecoinToTokenSwapEventsNot   *string  `json:"totalStablecoinToTokenSwapEvents_not,omitempty"`
	TotalStablecoinToTokenSwapEventsIn    []string `json:"totalStablecoinToTokenSwapEvents_in,omitempty"`
	TotalStablecoinToTokenSwapEventsNotIn []string `json:"totalStablecoinToTokenSwapEvents_not_in,omitempty"`
	RemainingDailySwapAmount              *string  `json:"remainingDailySwapAmount,omitempty"`
	RemainingDailySwapAmountNot           *string  `json:"remainingDailySwapAmount_not,omitempty"`
	RemainingDailySwapAmountIn            []string `json:"remainingDailySwapAmount_in,omitempty"`
	RemainingDailySwapAmountNotIn         []string `json:"remainingDailySwapAmount_not_in,omitempty"`
	TokenToStablecoinTotalSwapValue       *string  `json:"tokenToStablecoinTotalSwapValue,omitempty"`
	TokenToStablecoinTotalSwapValueNot    *string  `json:"tokenToStablecoinTotalSwapValue_not,omitempty"`
	TokenToStablecoinTotalSwapValueIn     []string `json:"tokenToStablecoinTotalSwapValue_in,omitempty"`
	TokenToStablecoinTotalSwapValueNotIn  []string `json:"tokenToStablecoinTotalSwapValue_not_in,omitempty"`
	StablecoinToTokenTotalSwapValue       *string  `json:"stablecoinToTokenTotalSwapValue,omitempty"`
	StablecoinToTokenTotalSwapValueNot    *string  `json:"stablecoinToTokenTotalSwapValue_not,omitempty"`
	StablecoinToTokenTotalSwapValueIn     []string `json:"stablecoinToTokenTotalSwapValue_in,omitempty"`
	StablecoinToTokenTotalSwapValueNotIn  []string `json:"stablecoinToTokenTotalSwapValue_not_in,omitempty"`
}

type SwapEventOrderBy struct {
	Field     SwapEventOrderField `json:"field"`
	Direction OrderDirection      `json:"direction"`
}

type SwapEventWhereInput struct {
	ID                           *string  `json:"id,omitempty"`
	IDNot                        *string  `json:"id_not,omitempty"`
	IDIn                         []string `json:"id_in,omitempty"`
	IDNotIn                      []string `json:"id_not_in,omitempty"`
	Fee                          *string  `json:"fee,omitempty"`
	FeeNot                       *string  `json:"fee_not,omitempty"`
	FeeIn                        []string `json:"fee_in,omitempty"`
	FeeNotIn                     []string `json:"fee_not_in,omitempty"`
	Owner                        *string  `json:"owner,omitempty"`
	OwnerNot                     *string  `json:"owner_not,omitempty"`
	OwnerIn                      []string `json:"owner_in,omitempty"`
	OwnerNotIn                   []string `json:"owner_not_in,omitempty"`
	Value                        *string  `json:"value,omitempty"`
	ValueNot                     *string  `json:"value_not,omitempty"`
	ValueIn                      []string `json:"value_in,omitempty"`
	ValueNotIn                   []string `json:"value_not_in,omitempty"`
	IsStablecoinToTokenSwap      *bool    `json:"isStablecoinToTokenSwap,omitempty"`
	IsStablecoinToTokenSwapNot   *bool    `json:"isStablecoinToTokenSwap_not,omitempty"`
	IsStablecoinToTokenSwapIn    []bool   `json:"isStablecoinToTokenSwap_in,omitempty"`
	IsStablecoinToTokenSwapNotIn []bool   `json:"isStablecoinToTokenSwap_not_in,omitempty"`
	IsTokenToStablecoinSwap      *bool    `json:"isTokenToStablecoinSwap,omitempty"`
	IsTokenToStablecoinSwapNot   *bool    `json:"isTokenToStablecoinSwap_not,omitempty"`
	IsTokenToStablecoinSwapIn    []bool   `json:"isTokenToStablecoinSwap_in,omitempty"`
	IsTokenToStablecoinSwapNotIn []bool   `json:"isTokenToStablecoinSwap_not_in,omitempty"`
	BlockNumber                  *string  `json:"blockNumber,omitempty"`
	BlockNumberNot               *string  `json:"blockNumber_not,omitempty"`
	BlockNumberIn                []string `json:"blockNumber_in,omitempty"`
	BlockNumberNotIn             []string `json:"blockNumber_not_in,omitempty"`
	BlockTimestamp               *string  `json:"blockTimestamp,omitempty"`
	BlockTimestampNot            *string  `json:"blockTimestamp_not,omitempty"`
	BlockTimestampIn             []string `json:"blockTimestamp_in,omitempty"`
	BlockTimestampNotIn          []string `json:"blockTimestamp_not_in,omitempty"`
	Transaction                  *string  `json:"transaction,omitempty"`
	TransactionNot               *string  `json:"transaction_not,omitempty"`
	TransactionIn                []string `json:"transaction_in,omitempty"`
	TransactionNotIn             []string `json:"transaction_not_in,omitempty"`
}

type UserOrderBy struct {
	Field     UserOrderField `json:"field"`
	Direction OrderDirection `json:"direction"`
}

type UserWhereInput struct {
	ID                        *string  `json:"id,omitempty"`
	IDNot                     *string  `json:"id_not,omitempty"`
	IDIn                      []string `json:"id_in,omitempty"`
	IDNotIn                   []string `json:"id_not_in,omitempty"`
	Address                   *string  `json:"address,omitempty"`
	AddressNot                *string  `json:"address_not,omitempty"`
	AddressIn                 []string `json:"address_in,omitempty"`
	AddressNotIn              []string `json:"address_not_in,omitempty"`
	ActivePositionsCount      *string  `json:"activePositionsCount,omitempty"`
	ActivePositionsCountNot   *string  `json:"activePositionsCount_not,omitempty"`
	ActivePositionsCountIn    []string `json:"activePositionsCount_in,omitempty"`
	ActivePositionsCountNotIn []string `json:"activePositionsCount_not_in,omitempty"`
}

type OrderDirection string

const (
	OrderDirectionAsc  OrderDirection = "asc"
	OrderDirectionDesc OrderDirection = "desc"
)

var AllOrderDirection = []OrderDirection{
	OrderDirectionAsc,
	OrderDirectionDesc,
}

func (e OrderDirection) IsValid() bool {
	switch e {
	case OrderDirectionAsc, OrderDirectionDesc:
		return true
	}
	return false
}

func (e OrderDirection) String() string {
	return string(e)
}

func (e *OrderDirection) UnmarshalGQL(v any) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = OrderDirection(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid OrderDirection", str)
	}
	return nil
}

func (e OrderDirection) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

func (e *OrderDirection) UnmarshalJSON(b []byte) error {
	s, err := strconv.Unquote(string(b))
	if err != nil {
		return err
	}
	return e.UnmarshalGQL(s)
}

func (e OrderDirection) MarshalJSON() ([]byte, error) {
	var buf bytes.Buffer
	e.MarshalGQL(&buf)
	return buf.Bytes(), nil
}

type PoolOrderField string

const (
	PoolOrderFieldID                    PoolOrderField = "id"
	PoolOrderFieldPoolName              PoolOrderField = "poolName"
	PoolOrderFieldDebtCeiling           PoolOrderField = "debtCeiling"
	PoolOrderFieldLiquidationRatio      PoolOrderField = "liquidationRatio"
	PoolOrderFieldStabilityFeeRate      PoolOrderField = "stabilityFeeRate"
	PoolOrderFieldTokenAdapterAddress   PoolOrderField = "tokenAdapterAddress"
	PoolOrderFieldLockedCollateral      PoolOrderField = "lockedCollateral"
	PoolOrderFieldCollateralPrice       PoolOrderField = "collateralPrice"
	PoolOrderFieldCollateralLastPrice   PoolOrderField = "collateralLastPrice"
	PoolOrderFieldPriceWithSafetyMargin PoolOrderField = "priceWithSafetyMargin"
	PoolOrderFieldRawPrice              PoolOrderField = "rawPrice"
	PoolOrderFieldDebtAccumulatedRate   PoolOrderField = "debtAccumulatedRate"
	PoolOrderFieldTotalBorrowed         PoolOrderField = "totalBorrowed"
	PoolOrderFieldTotalAvailable        PoolOrderField = "totalAvailable"
	PoolOrderFieldTvl                   PoolOrderField = "tvl"
)

var AllPoolOrderField = []PoolOrderField{
	PoolOrderFieldID,
	PoolOrderFieldPoolName,
	PoolOrderFieldDebtCeiling,
	PoolOrderFieldLiquidationRatio,
	PoolOrderFieldStabilityFeeRate,
	PoolOrderFieldTokenAdapterAddress,
	PoolOrderFieldLockedCollateral,
	PoolOrderFieldCollateralPrice,
	PoolOrderFieldCollateralLastPrice,
	PoolOrderFieldPriceWithSafetyMargin,
	PoolOrderFieldRawPrice,
	PoolOrderFieldDebtAccumulatedRate,
	PoolOrderFieldTotalBorrowed,
	PoolOrderFieldTotalAvailable,
	PoolOrderFieldTvl,
}

func (e PoolOrderField) IsValid() bool {
	switch e {
	case PoolOrderFieldID, PoolOrderFieldPoolName, PoolOrderFieldDebtCeiling, PoolOrderFieldLiquidationRatio, PoolOrderFieldStabilityFeeRate, PoolOrderFieldTokenAdapterAddress, PoolOrderFieldLockedCollateral, PoolOrderFieldCollateralPrice, PoolOrderFieldCollateralLastPrice, PoolOrderFieldPriceWithSafetyMargin, PoolOrderFieldRawPrice, PoolOrderFieldDebtAccumulatedRate, PoolOrderFieldTotalBorrowed, PoolOrderFieldTotalAvailable, PoolOrderFieldTvl:
		return true
	}
	return false
}

func (e PoolOrderField) String() string {
	return string(e)
}

func (e *PoolOrderField) UnmarshalGQL(v any) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = PoolOrderField(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid PoolOrderField", str)
	}
	return nil
}

func (e PoolOrderField) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

func (e *PoolOrderField) UnmarshalJSON(b []byte) error {
	s, err := strconv.Unquote(string(b))
	if err != nil {
		return err
	}
	return e.UnmarshalGQL(s)
}

func (e PoolOrderField) MarshalJSON() ([]byte, error) {
	var buf bytes.Buffer
	e.MarshalGQL(&buf)
	return buf.Bytes(), nil
}

type PositionActivityOrderField string

const (
	PositionActivityOrderFieldID               PositionActivityOrderField = "id"
	PositionActivityOrderFieldPosition         PositionActivityOrderField = "position"
	PositionActivityOrderFieldActivityState    PositionActivityOrderField = "activityState"
	PositionActivityOrderFieldCollateralAmount PositionActivityOrderField = "collateralAmount"
	PositionActivityOrderFieldDebtAmount       PositionActivityOrderField = "debtAmount"
	PositionActivityOrderFieldBlockNumber      PositionActivityOrderField = "blockNumber"
	PositionActivityOrderFieldBlockTimestamp   PositionActivityOrderField = "blockTimestamp"
	PositionActivityOrderFieldTransaction      PositionActivityOrderField = "transaction"
)

var AllPositionActivityOrderField = []PositionActivityOrderField{
	PositionActivityOrderFieldID,
	PositionActivityOrderFieldPosition,
	PositionActivityOrderFieldActivityState,
	PositionActivityOrderFieldCollateralAmount,
	PositionActivityOrderFieldDebtAmount,
	PositionActivityOrderFieldBlockNumber,
	PositionActivityOrderFieldBlockTimestamp,
	PositionActivityOrderFieldTransaction,
}

func (e PositionActivityOrderField) IsValid() bool {
	switch e {
	case PositionActivityOrderFieldID, PositionActivityOrderFieldPosition, PositionActivityOrderFieldActivityState, PositionActivityOrderFieldCollateralAmount, PositionActivityOrderFieldDebtAmount, PositionActivityOrderFieldBlockNumber, PositionActivityOrderFieldBlockTimestamp, PositionActivityOrderFieldTransaction:
		return true
	}
	return false
}

func (e PositionActivityOrderField) String() string {
	return string(e)
}

func (e *PositionActivityOrderField) UnmarshalGQL(v any) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = PositionActivityOrderField(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid PositionActivityOrderField", str)
	}
	return nil
}

func (e PositionActivityOrderField) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

func (e *PositionActivityOrderField) UnmarshalJSON(b []byte) error {
	s, err := strconv.Unquote(string(b))
	if err != nil {
		return err
	}
	return e.UnmarshalGQL(s)
}

func (e PositionActivityOrderField) MarshalJSON() ([]byte, error) {
	var buf bytes.Buffer
	e.MarshalGQL(&buf)
	return buf.Bytes(), nil
}

type PositionActivityState string

const (
	PositionActivityStateCreated     PositionActivityState = "created"
	PositionActivityStateTopup       PositionActivityState = "topup"
	PositionActivityStateRepay       PositionActivityState = "repay"
	PositionActivityStateLiquidation PositionActivityState = "liquidation"
	PositionActivityStateClosed      PositionActivityState = "closed"
)

var AllPositionActivityState = []PositionActivityState{
	PositionActivityStateCreated,
	PositionActivityStateTopup,
	PositionActivityStateRepay,
	PositionActivityStateLiquidation,
	PositionActivityStateClosed,
}

func (e PositionActivityState) IsValid() bool {
	switch e {
	case PositionActivityStateCreated, PositionActivityStateTopup, PositionActivityStateRepay, PositionActivityStateLiquidation, PositionActivityStateClosed:
		return true
	}
	return false
}

func (e PositionActivityState) String() string {
	return string(e)
}

func (e *PositionActivityState) UnmarshalGQL(v any) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = PositionActivityState(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid PositionActivityState", str)
	}
	return nil
}

func (e PositionActivityState) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

func (e *PositionActivityState) UnmarshalJSON(b []byte) error {
	s, err := strconv.Unquote(string(b))
	if err != nil {
		return err
	}
	return e.UnmarshalGQL(s)
}

func (e PositionActivityState) MarshalJSON() ([]byte, error) {
	var buf bytes.Buffer
	e.MarshalGQL(&buf)
	return buf.Bytes(), nil
}

type PositionOrderField string

const (
	PositionOrderFieldID                    PositionOrderField = "id"
	PositionOrderFieldPositionAddress       PositionOrderField = "positionAddress"
	PositionOrderFieldUserAddress           PositionOrderField = "userAddress"
	PositionOrderFieldWalletAddress         PositionOrderField = "walletAddress"
	PositionOrderFieldCollateralPool        PositionOrderField = "collateralPool"
	PositionOrderFieldCollateralPoolName    PositionOrderField = "collateralPoolName"
	PositionOrderFieldPositionID            PositionOrderField = "positionId"
	PositionOrderFieldLockedCollateral      PositionOrderField = "lockedCollateral"
	PositionOrderFieldDebtValue             PositionOrderField = "debtValue"
	PositionOrderFieldDebtShare             PositionOrderField = "debtShare"
	PositionOrderFieldSafetyBuffer          PositionOrderField = "safetyBuffer"
	PositionOrderFieldSafetyBufferInPercent PositionOrderField = "safetyBufferInPercent"
	PositionOrderFieldTvl                   PositionOrderField = "tvl"
	PositionOrderFieldPositionStatus        PositionOrderField = "positionStatus"
	PositionOrderFieldLiquidationCount      PositionOrderField = "liquidationCount"
	PositionOrderFieldBlockNumber           PositionOrderField = "blockNumber"
	PositionOrderFieldBlockTimestamp        PositionOrderField = "blockTimestamp"
	PositionOrderFieldTransaction           PositionOrderField = "transaction"
	PositionOrderFieldPool                  PositionOrderField = "pool"
)

var AllPositionOrderField = []PositionOrderField{
	PositionOrderFieldID,
	PositionOrderFieldPositionAddress,
	PositionOrderFieldUserAddress,
	PositionOrderFieldWalletAddress,
	PositionOrderFieldCollateralPool,
	PositionOrderFieldCollateralPoolName,
	PositionOrderFieldPositionID,
	PositionOrderFieldLockedCollateral,
	PositionOrderFieldDebtValue,
	PositionOrderFieldDebtShare,
	PositionOrderFieldSafetyBuffer,
	PositionOrderFieldSafetyBufferInPercent,
	PositionOrderFieldTvl,
	PositionOrderFieldPositionStatus,
	PositionOrderFieldLiquidationCount,
	PositionOrderFieldBlockNumber,
	PositionOrderFieldBlockTimestamp,
	PositionOrderFieldTransaction,
	PositionOrderFieldPool,
}

func (e PositionOrderField) IsValid() bool {
	switch e {
	case PositionOrderFieldID, PositionOrderFieldPositionAddress, PositionOrderFieldUserAddress, PositionOrderFieldWalletAddress, PositionOrderFieldCollateralPool, PositionOrderFieldCollateralPoolName, PositionOrderFieldPositionID, PositionOrderFieldLockedCollateral, PositionOrderFieldDebtValue, PositionOrderFieldDebtShare, PositionOrderFieldSafetyBuffer, PositionOrderFieldSafetyBufferInPercent, PositionOrderFieldTvl, PositionOrderFieldPositionStatus, PositionOrderFieldLiquidationCount, PositionOrderFieldBlockNumber, PositionOrderFieldBlockTimestamp, PositionOrderFieldTransaction, PositionOrderFieldPool:
		return true
	}
	return false
}

func (e PositionOrderField) String() string {
	return string(e)
}

func (e *PositionOrderField) UnmarshalGQL(v any) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = PositionOrderField(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid PositionOrderField", str)
	}
	return nil
}

func (e PositionOrderField) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

func (e *PositionOrderField) UnmarshalJSON(b []byte) error {
	s, err := strconv.Unquote(string(b))
	if err != nil {
		return err
	}
	return e.UnmarshalGQL(s)
}

func (e PositionOrderField) MarshalJSON() ([]byte, error) {
	var buf bytes.Buffer
	e.MarshalGQL(&buf)
	return buf.Bytes(), nil
}

type PositionStatus string

const (
	PositionStatusSafe   PositionStatus = "safe"
	PositionStatusUnsafe PositionStatus = "unsafe"
	PositionStatusClosed PositionStatus = "closed"
)

var AllPositionStatus = []PositionStatus{
	PositionStatusSafe,
	PositionStatusUnsafe,
	PositionStatusClosed,
}

func (e PositionStatus) IsValid() bool {
	switch e {
	case PositionStatusSafe, PositionStatusUnsafe, PositionStatusClosed:
		return true
	}
	return false
}

func (e PositionStatus) String() string {
	return string(e)
}

func (e *PositionStatus) UnmarshalGQL(v any) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = PositionStatus(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid PositionStatus", str)
	}
	return nil
}

func (e PositionStatus) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

func (e *PositionStatus) UnmarshalJSON(b []byte) error {
	s, err := strconv.Unquote(string(b))
	if err != nil {
		return err
	}
	return e.UnmarshalGQL(s)
}

func (e PositionStatus) MarshalJSON() ([]byte, error) {
	var buf bytes.Buffer
	e.MarshalGQL(&buf)
	return buf.Bytes(), nil
}

type ProtocolStatOrderField string

const (
	ProtocolStatOrderFieldID          ProtocolStatOrderField = "id"
	ProtocolStatOrderFieldTotalSupply ProtocolStatOrderField = "totalSupply"
	ProtocolStatOrderFieldTvl         ProtocolStatOrderField = "tvl"
)

var AllProtocolStatOrderField = []ProtocolStatOrderField{
	ProtocolStatOrderFieldID,
	ProtocolStatOrderFieldTotalSupply,
	ProtocolStatOrderFieldTvl,
}

func (e ProtocolStatOrderField) IsValid() bool {
	switch e {
	case ProtocolStatOrderFieldID, ProtocolStatOrderFieldTotalSupply, ProtocolStatOrderFieldTvl:
		return true
	}
	return false
}

func (e ProtocolStatOrderField) String() string {
	return string(e)
}

func (e *ProtocolStatOrderField) UnmarshalGQL(v any) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = ProtocolStatOrderField(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid ProtocolStatOrderField", str)
	}
	return nil
}

func (e ProtocolStatOrderField) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

func (e *ProtocolStatOrderField) UnmarshalJSON(b []byte) error {
	s, err := strconv.Unquote(string(b))
	if err != nil {
		return err
	}
	return e.UnmarshalGQL(s)
}

func (e ProtocolStatOrderField) MarshalJSON() ([]byte, error) {
	var buf bytes.Buffer
	e.MarshalGQL(&buf)
	return buf.Bytes(), nil
}

type StableSwapStatOrderField string

const (
	StableSwapStatOrderFieldID                               StableSwapStatOrderField = "id"
	StableSwapStatOrderFieldTotalTokenToStablecoinSwapEvents StableSwapStatOrderField = "totalTokenToStablecoinSwapEvents"
	StableSwapStatOrderFieldTotalStablecoinToTokenSwapEvents StableSwapStatOrderField = "totalStablecoinToTokenSwapEvents"
	StableSwapStatOrderFieldRemainingDailySwapAmount         StableSwapStatOrderField = "remainingDailySwapAmount"
	StableSwapStatOrderFieldTokenToStablecoinTotalSwapValue  StableSwapStatOrderField = "tokenToStablecoinTotalSwapValue"
	StableSwapStatOrderFieldStablecoinToTokenTotalSwapValue  StableSwapStatOrderField = "stablecoinToTokenTotalSwapValue"
)

var AllStableSwapStatOrderField = []StableSwapStatOrderField{
	StableSwapStatOrderFieldID,
	StableSwapStatOrderFieldTotalTokenToStablecoinSwapEvents,
	StableSwapStatOrderFieldTotalStablecoinToTokenSwapEvents,
	StableSwapStatOrderFieldRemainingDailySwapAmount,
	StableSwapStatOrderFieldTokenToStablecoinTotalSwapValue,
	StableSwapStatOrderFieldStablecoinToTokenTotalSwapValue,
}

func (e StableSwapStatOrderField) IsValid() bool {
	switch e {
	case StableSwapStatOrderFieldID, StableSwapStatOrderFieldTotalTokenToStablecoinSwapEvents, StableSwapStatOrderFieldTotalStablecoinToTokenSwapEvents, StableSwapStatOrderFieldRemainingDailySwapAmount, StableSwapStatOrderFieldTokenToStablecoinTotalSwapValue, StableSwapStatOrderFieldStablecoinToTokenTotalSwapValue:
		return true
	}
	return false
}

func (e StableSwapStatOrderField) String() string {
	return string(e)
}

func (e *StableSwapStatOrderField) UnmarshalGQL(v any) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = StableSwapStatOrderField(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid StableSwapStatOrderField", str)
	}
	return nil
}

func (e StableSwapStatOrderField) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

func (e *StableSwapStatOrderField) UnmarshalJSON(b []byte) error {
	s, err := strconv.Unquote(string(b))
	if err != nil {
		return err
	}
	return e.UnmarshalGQL(s)
}

func (e StableSwapStatOrderField) MarshalJSON() ([]byte, error) {
	var buf bytes.Buffer
	e.MarshalGQL(&buf)
	return buf.Bytes(), nil
}

type SwapEventOrderField string

const (
	SwapEventOrderFieldID                      SwapEventOrderField = "id"
	SwapEventOrderFieldFee                     SwapEventOrderField = "fee"
	SwapEventOrderFieldOwner                   SwapEventOrderField = "owner"
	SwapEventOrderFieldValue                   SwapEventOrderField = "value"
	SwapEventOrderFieldIsStablecoinToTokenSwap SwapEventOrderField = "isStablecoinToTokenSwap"
	SwapEventOrderFieldIsTokenToStablecoinSwap SwapEventOrderField = "isTokenToStablecoinSwap"
	SwapEventOrderFieldBlockNumber             SwapEventOrderField = "blockNumber"
	SwapEventOrderFieldBlockTimestamp          SwapEventOrderField = "blockTimestamp"
	SwapEventOrderFieldTransaction             SwapEventOrderField = "transaction"
)

var AllSwapEventOrderField = []SwapEventOrderField{
	SwapEventOrderFieldID,
	SwapEventOrderFieldFee,
	SwapEventOrderFieldOwner,
	SwapEventOrderFieldValue,
	SwapEventOrderFieldIsStablecoinToTokenSwap,
	SwapEventOrderFieldIsTokenToStablecoinSwap,
	SwapEventOrderFieldBlockNumber,
	SwapEventOrderFieldBlockTimestamp,
	SwapEventOrderFieldTransaction,
}

func (e SwapEventOrderField) IsValid() bool {
	switch e {
	case SwapEventOrderFieldID, SwapEventOrderFieldFee, SwapEventOrderFieldOwner, SwapEventOrderFieldValue, SwapEventOrderFieldIsStablecoinToTokenSwap, SwapEventOrderFieldIsTokenToStablecoinSwap, SwapEventOrderFieldBlockNumber, SwapEventOrderFieldBlockTimestamp, SwapEventOrderFieldTransaction:
		return true
	}
	return false
}

func (e SwapEventOrderField) String() string {
	return string(e)
}

func (e *SwapEventOrderField) UnmarshalGQL(v any) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = SwapEventOrderField(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid SwapEventOrderField", str)
	}
	return nil
}

func (e SwapEventOrderField) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

func (e *SwapEventOrderField) UnmarshalJSON(b []byte) error {
	s, err := strconv.Unquote(string(b))
	if err != nil {
		return err
	}
	return e.UnmarshalGQL(s)
}

func (e SwapEventOrderField) MarshalJSON() ([]byte, error) {
	var buf bytes.Buffer
	e.MarshalGQL(&buf)
	return buf.Bytes(), nil
}

type UserOrderField string

const (
	UserOrderFieldID                   UserOrderField = "id"
	UserOrderFieldAddress              UserOrderField = "address"
	UserOrderFieldActivePositionsCount UserOrderField = "activePositionsCount"
)

var AllUserOrderField = []UserOrderField{
	UserOrderFieldID,
	UserOrderFieldAddress,
	UserOrderFieldActivePositionsCount,
}

func (e UserOrderField) IsValid() bool {
	switch e {
	case UserOrderFieldID, UserOrderFieldAddress, UserOrderFieldActivePositionsCount:
		return true
	}
	return false
}

func (e UserOrderField) String() string {
	return string(e)
}

func (e *UserOrderField) UnmarshalGQL(v any) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = UserOrderField(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid UserOrderField", str)
	}
	return nil
}

func (e UserOrderField) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

func (e *UserOrderField) UnmarshalJSON(b []byte) error {
	s, err := strconv.Unquote(string(b))
	if err != nil {
		return err
	}
	return e.UnmarshalGQL(s)
}

func (e UserOrderField) MarshalJSON() ([]byte, error) {
	var buf bytes.Buffer
	e.MarshalGQL(&buf)
	return buf.Bytes(), nil
}
