package graphql

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.74

import (
	"context"
	"encoding/json"
	"fmt"

	"github.com/tsisar/starknet-indexer/generated/ent"
	"github.com/tsisar/starknet-indexer/graphql/model"
	"github.com/tsisar/starknet-indexer/graphql/resolvers"
)

// Positions is the resolver for the positions field.
func (r *poolResolver) Positions(ctx context.Context, obj *ent.Pool, where *model.PositionWhereInput, orderBy *model.PositionOrderBy, first *int32, skip *int32) ([]*ent.Position, error) {
	query := obj.QueryPositions()
	query = resolvers.ApplyPositionWhereInput(query, where)
	query = resolvers.ApplyPositionOrderBy(query, orderBy)
	query = resolvers.ApplyPositionLimit(query, first, skip)

	return query.All(ctx)
}

// PositionStatus is the resolver for the positionStatus field.
func (r *positionResolver) PositionStatus(ctx context.Context, obj *ent.Position) (model.PositionStatus, error) {
	return model.PositionStatus(obj.PositionStatus), nil
}

// Pool is the resolver for the pool field.
func (r *positionResolver) Pool(ctx context.Context, obj *ent.Position) (*ent.Pool, error) {
	return obj.QueryPool().Only(ctx)
}

// Activities is the resolver for the activities field.
func (r *positionResolver) Activities(ctx context.Context, obj *ent.Position, where *model.PositionActivityWhereInput, orderBy *model.PositionActivityOrderBy, first *int32, skip *int32) ([]*ent.PositionActivity, error) {
	query := obj.QueryActivity()
	query = resolvers.ApplyPositionActivityWhereInput(query, where)
	query = resolvers.ApplyPositionActivityOrderBy(query, orderBy)
	query = resolvers.ApplyPositionActivityLimit(query, first, skip)

	return query.All(ctx)
}

// Position is the resolver for the position field.
func (r *positionActivityResolver) Position(ctx context.Context, obj *ent.PositionActivity) (*ent.Position, error) {
	return obj.QueryPosition().Only(ctx)
}

// ActivityState is the resolver for the activityState field.
func (r *positionActivityResolver) ActivityState(ctx context.Context, obj *ent.PositionActivity) (model.PositionActivityState, error) {
	return model.PositionActivityState(obj.ActivityState), nil
}

// Pools is the resolver for the pools field.
func (r *protocolStatResolver) Pools(ctx context.Context, obj *ent.ProtocolStat) ([]string, error) {
	var pools []string
	if err := json.Unmarshal([]byte(obj.Pools), &pools); err != nil {
		return nil, fmt.Errorf("failed to parse pools: %w", err)
	}
	return pools, nil
}

// Pool returns PoolResolver implementation.
func (r *Resolver) Pool() PoolResolver { return &poolResolver{r} }

// Position returns PositionResolver implementation.
func (r *Resolver) Position() PositionResolver { return &positionResolver{r} }

// PositionActivity returns PositionActivityResolver implementation.
func (r *Resolver) PositionActivity() PositionActivityResolver { return &positionActivityResolver{r} }

// ProtocolStat returns ProtocolStatResolver implementation.
func (r *Resolver) ProtocolStat() ProtocolStatResolver { return &protocolStatResolver{r} }

type poolResolver struct{ *Resolver }
type positionResolver struct{ *Resolver }
type positionActivityResolver struct{ *Resolver }
type protocolStatResolver struct{ *Resolver }
